{
    "docs": [
        {
            "location": "/", 
            "text": "SDKBOX\n\n\n\n\nSDKBOX makes it super EASY for Cocos2d-x developers to integrate 3rd party SDKs into their games. We do all the hard, tedious and tricky work so that developers won\u2019t have to. All services are tested and certified. No matter which version of the game engine you are using, C++ or Javascript or Lua, SDKBOX has you covered.", 
            "title": "Home"
        }, 
        {
            "location": "/#sdkbox", 
            "text": "SDKBOX makes it super EASY for Cocos2d-x developers to integrate 3rd party SDKs into their games. We do all the hard, tedious and tricky work so that developers won\u2019t have to. All services are tested and certified. No matter which version of the game engine you are using, C++ or Javascript or Lua, SDKBOX has you covered.", 
            "title": "SDKBOX"
        }, 
        {
            "location": "/installer/", 
            "text": "SDKBOX: Installing SDKBOX Plugins using the Installer\n\n\nPreparing to run the SDKBOX Installer\n\n\nBefore you can run the SDKBOX installer you need to do a few things.\n\n make sure you know the path to where you downloaded the SDKBOX installer. (you can always put it in \n/usr/local/bin\n)\n\n make sure you know the path to where you downloaded the SDKBOX plugin bundles.\n\n\nInstalling a Plugin using the SDKBOX Installer\n\n\nNow we are ready to install a plugin! There isn't much to it. Ready?\n\n\nInstalling for OS X\n\n\n\n\nFrom a command-line, \ncd\n to your applications root directory. Example:\n\n\n\n\ncd ~/MyGame\n\n\n\n\n\n\nNow, you can install your plugin using the SDKBOX installer, noting the locations of where you placed the installer and the plugin bundles. Example:\n\n\n\n\nsdkbox import iap\n\n\n\n\nWhat Next?\n\n\nThe SDKBOX installer takes care of most of what you need. However, there are still a few manual steps that you must complete. After the installer runs it outputs a list of the remaining steps that you need to perform, referring to the plugin bundle PDF. Example output from running the above command:\n\n\n$ sdkbox import iap\n_______ ______  _     _ ______   _____  _     _\n|______ |     \\ |____/  |_____] |     |  \\___/\n______| |_____/ |    \\_ |_____] |_____| _/   \\_\nCopyright (c) 2015 Chukong Technologies Inc. v0.5.7\n\nPlease reference the online documentation to finish the integration:\nhttp://sdkbox-doc.github.io/en/plugins/iap/v3-cpp/\nInstallation Successful :)\n\n\n\n\nOther Installer switches.\n\n\nThe SDKBOX Installer has several switches that you can use. You can always see these by running \nsdkbox\n by itself or using the \n-h\n help switch:\n\n\n$ \npath\n/sdkbox\n_______ ______  _     _ ______   _____  _     _\n|______ |     \\ |____/  |_____] |     |  \\___/\n______| |_____/ |    \\_ |_____] |_____| _/   \\_\nCopyright (c) 2015 Chukong Technologies Inc. v0.5.7\n\nusage: sdkbox [-h] [-v] [-p PROJECT] [-b PLUGIN] [--yes] [--dryrun]\n              {import,restore,symbols,api}\n\n\n\n\n\n\n\n\n\n\nswitch\n\n\nalternate switch\n\n\nwhat it does\n\n\n\n\n\n\n\n\n\n\n-h\n\n\n--help\n\n\nshow this help message and exit\n\n\n\n\n\n\n-v\n\n\n--verbose\n\n\nspecify verbosity level\n\n\n\n\n\n\n-p PROJECT\n\n\n--project PROJECT\n\n\npath to project root (defaults to .)\n\n\n\n\n\n\n-b PLUGIN\n\n\n--plugin PLUGIN\n\n\nspecify path to plugin (defaults to .)\n\n\n\n\n\n\n\n\n--dryrun\n\n\ntest install before performing.\n\n\n\n\n\n\n\n\nStaying Up-to-date\n\n\nThe SDKBOX installer automatically checks for updates to itself. It will ask for your permission before updating. This will allow you to stay current and also automatically pull updates to your plugin bundles when they become available.\n\n\n_______ ______  _     _ ______   _____  _     _\n|______ |     \\ |____/  |_____] |     |  \\___/\n______| |_____/ |    \\_ |_____] |_____| _/   \\_\nCopyright (c) 2015 Chukong Technologies Inc. v0.5.6\n\nA newer version of SDKBOX is available, would you like to update to v0.5.7?\nPlease type Yes, No or Quit Yes\nupdated SDKBOX v0.5.6 to v0.5.7 at sdkbox", 
            "title": "Installer"
        }, 
        {
            "location": "/installer/#sdkbox-installing-sdkbox-plugins-using-the-installer", 
            "text": "", 
            "title": "SDKBOX: Installing SDKBOX Plugins using the Installer"
        }, 
        {
            "location": "/installer/#preparing-to-run-the-sdkbox-installer", 
            "text": "Before you can run the SDKBOX installer you need to do a few things.  make sure you know the path to where you downloaded the SDKBOX installer. (you can always put it in  /usr/local/bin )  make sure you know the path to where you downloaded the SDKBOX plugin bundles.", 
            "title": "Preparing to run the SDKBOX Installer"
        }, 
        {
            "location": "/installer/#installing-a-plugin-using-the-sdkbox-installer", 
            "text": "Now we are ready to install a plugin! There isn't much to it. Ready?  Installing for OS X   From a command-line,  cd  to your applications root directory. Example:   cd ~/MyGame   Now, you can install your plugin using the SDKBOX installer, noting the locations of where you placed the installer and the plugin bundles. Example:   sdkbox import iap  What Next?  The SDKBOX installer takes care of most of what you need. However, there are still a few manual steps that you must complete. After the installer runs it outputs a list of the remaining steps that you need to perform, referring to the plugin bundle PDF. Example output from running the above command:  $ sdkbox import iap\n_______ ______  _     _ ______   _____  _     _\n|______ |     \\ |____/  |_____] |     |  \\___/\n______| |_____/ |    \\_ |_____] |_____| _/   \\_\nCopyright (c) 2015 Chukong Technologies Inc. v0.5.7\n\nPlease reference the online documentation to finish the integration:\nhttp://sdkbox-doc.github.io/en/plugins/iap/v3-cpp/\nInstallation Successful :)  Other Installer switches.  The SDKBOX Installer has several switches that you can use. You can always see these by running  sdkbox  by itself or using the  -h  help switch:  $  path /sdkbox\n_______ ______  _     _ ______   _____  _     _\n|______ |     \\ |____/  |_____] |     |  \\___/\n______| |_____/ |    \\_ |_____] |_____| _/   \\_\nCopyright (c) 2015 Chukong Technologies Inc. v0.5.7\n\nusage: sdkbox [-h] [-v] [-p PROJECT] [-b PLUGIN] [--yes] [--dryrun]\n              {import,restore,symbols,api}     switch  alternate switch  what it does      -h  --help  show this help message and exit    -v  --verbose  specify verbosity level    -p PROJECT  --project PROJECT  path to project root (defaults to .)    -b PLUGIN  --plugin PLUGIN  specify path to plugin (defaults to .)     --dryrun  test install before performing.     Staying Up-to-date  The SDKBOX installer automatically checks for updates to itself. It will ask for your permission before updating. This will allow you to stay current and also automatically pull updates to your plugin bundles when they become available.  _______ ______  _     _ ______   _____  _     _\n|______ |     \\ |____/  |_____] |     |  \\___/\n______| |_____/ |    \\_ |_____] |_____| _/   \\_\nCopyright (c) 2015 Chukong Technologies Inc. v0.5.6\n\nA newer version of SDKBOX is available, would you like to update to v0.5.7?\nPlease type Yes, No or Quit Yes\nupdated SDKBOX v0.5.6 to v0.5.7 at sdkbox", 
            "title": "Installing a Plugin using the SDKBOX Installer"
        }, 
        {
            "location": "/plugins/adcolony/v3-cpp/", 
            "text": "AdColony\n\n\nIntegration\n\n\nUse the following command to install the SDKBOX AdColony plugin, Make sure you setup SDKBOX installer correctly.\n\n\nsdkbox import adcolony\n\n\n\n\nExtra steps\n\n\nModify \nCocos2dxActivity.java\n\n\n\n\n\n\nIf you're using cocos2d-x from source, assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java\n\n\n\n\n\n\nIf you're using the prebuilt cocos2d-x libraries assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n./src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nNote:\n When using Cocos2d-x from source, different versions have \nCocos2dxActivity.java\n in a different location. One way to find the location is to look in \nproj.android/project.properties\n. Example:\n\n\nandroid.library.reference.1=../../cocos2d-x/cocos/platform/android/java\n\n\n\n\nIn this case, \nCocos2dxActivity.java\n should be located at:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nModify \nCocos2dxActivity.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify \nCocos2dxActivity\n to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. The placement of this call is important. It must be done after the call to \nonLoadNativeLibraries();\n. Example:\n\n\n\n\nonLoadNativeLibraries();\nSDKBox.init(this);\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (release, optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n-dontwarn android.webkit.**\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.\n\n\nConfiguration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nres/sdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the AdColony configuration, you need to replace \napp id\n and \nzone id\n items with your specific \nAdColony\n account information.\n\n\nAdColony\n:{\n    \nid\n:\napp id\n,\n    \ndebug\n:true,\n    \nads\n:{\n        \nvideo\n:{\n            \nzone\n: \nzone id\n,\n            \nv4vc\n: false\n        },\n        \nv4vc\n:{\n            \nzone\n: \nzone id\n,\n            \nv4vc\n: true,\n            \npre_popup\n : true,\n            \npost_popup\n: true\n        }\n    }\n}\n\n\n\n\nUsage\n\n\nInitialize AdColony\n\n\n\n\nInitialize the plugin where appropriate in your code. We recommend to do this in the \nAppDelegate::applicationDidFinishLaunching()\n or \nAppController:didFinishLaunchingWithOptions()\n. Make sure to include the appropriate headers:\n\n\n\n\n#include \nPluginAdColony/PluginAdColony.h\n\nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginAdColony::init();\n}\n\n\n\n\nShowing Ads\n\n\nDisplay an ad wherever you want from your code, by specifying ad type:\n\n\nsdkbox::PluginAdColony::show(\nvideo\n);\n\n\n\n\nor:\n\n\nsdkbox::PluginAdColony::show(\nv4vc\n);\n\n\n\n\nCatch AdColony events (optional)\n\n\nThis allows you to catch the \nAdColony\n events so that you can perform operations such as providing player rewards for watching the video.\n\n\n\n\nAllow your class to extend \nsdkbox::AdColonyListener\n\n\n\n\n#include \nPluginAdColony/PluginAdColony.h\n\nclass MyClass : public sdkbox::AdColonyListener\n{\nprivate:\n  void onAdColonyChange(const sdkbox::AdColonyAdInfo\n info, bool available);\n  void onAdColonyReward(const sdkbox::AdColonyAdInfo\n info,\n        const std::string\n currencyName, int amount, bool success);\n  void onAdColonyStarted(const sdkbox::AdColonyAdInfo\n info);\n  void onAdColonyFinished(const sdkbox::AdColonyAdInfo\n info);\n};\n\n\n\n\n\n\nCreate a \nlistener\n that handles callbacks:\n\n\n\n\nsdkbox::PluginAdColony::setListener(this);\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nstatic void init();\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nstatic AdColonyAdStatus getStatus(const std::string\n name);\n\n\n\n\n\n\nCheck the availability of the AdColony ads by name\n\n\n\n\nstatic int zoneStatusForZone(const std::string\n zoneID);\n\n\n\n\n\n\nreturns the status for the specified zone. Use this to pre-load a zone.\n\n\n\n\nstatic void show(const std::string\n name);\n\n\n\n\n\n\nplay video ad using provided \nzone name\n that was specified in \nsdkbox_config.json\n.\n\n\n\n\nstatic void setListener(AdColonyListener* listener);\n\n\n\n\n\n\nset a listener to listen for event changes.\n\n\n\n\nstatic void removeListener();\n\n\n\n\n\n\nremove the event listener.\n\n\n\n\nstatic bool isVirtualCurrencyRewardAvailableForZone(const std::string\n zoneID);\n\n\n\n\n\n\ncheck if this zone offers a virtual currency reward.\n\n\n\n\nstatic int getVirtualCurrencyRewardsAvailableTodayForZone(\n  const std::string\n zoneID);\n\n\n\n\n\n\nis there a virtual currency reward available to the user today for passed in\nzone.\n\n\n\n\nstatic std::string getVirtualCurrencyNameForZone(const std::string\n zoneID);\n\n\n\n\n\n\nget virtual currency name for passed in zone.\n\n\n\n\nstatic int getVirtualCurrencyRewardAmountForZone(const std::string\n zoneID);\n\n\n\n\n\n\nthe amount of the virtual currency reward for passed in zone.\n\n\n\n\nstatic int getVideosPerReward(const std::string\n currencyName);\n\n\n\n\n\n\nare there multiple videos to watch per reward? Get the number of them.\n\n\n\n\nstatic int getVideoCreditBalance(const std::string\n currencyName);\n\n\n\n\n\n\nget video credit balance for passed in currency name.\n\n\n\n\nstatic void cancelAd();\n\n\n\n\n\n\nstop the currently showing ad.\n\n\n\n\nstatic bool videoAdCurrentlyRunning();\n\n\n\n\n\n\nis there a video currently showing?\n\n\n\n\nstatic void turnAllAdsOff();\n\n\n\n\n\n\nturn off all ads.\n\n\n\n\nListeners\n\n\nvoid onAdColonyChange(const sdkbox::AdColonyAdInfo\n info, bool available);\n\n\n\n\n\n\ncalled when AdColony is finished loading.\n\n\n\n\nvoid onAdColonyReward(const sdkbox::AdColonyAdInfo\n info,\n  const std::string\n currencyName,\n  int amount, bool success);\n\n\n\n\n\n\nreward was received.\n\n\n\n\nvoid onAdColonyStarted(const sdkbox::AdColonyAdInfo\n info);\n\n\n\n\n\n\nshowing an ad has started.\n\n\n\n\nvoid onAdColonyFinished(const sdkbox::AdColonyAdInfo\n info);\n\n\n\n\n\n\nshowing an ad has finished.", 
            "title": "c++"
        }, 
        {
            "location": "/plugins/adcolony/v3-cpp/#adcolony", 
            "text": "", 
            "title": "AdColony"
        }, 
        {
            "location": "/plugins/adcolony/v3-cpp/#integration", 
            "text": "Use the following command to install the SDKBOX AdColony plugin, Make sure you setup SDKBOX installer correctly.  sdkbox import adcolony", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/adcolony/v3-cpp/#extra-steps", 
            "text": "Modify  Cocos2dxActivity.java    If you're using cocos2d-x from source, assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java    If you're using the prebuilt cocos2d-x libraries assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ./src/org/cocos2dx/lib/Cocos2dxActivity.java    Note:  When using Cocos2d-x from source, different versions have  Cocos2dxActivity.java  in a different location. One way to find the location is to look in  proj.android/project.properties . Example:  android.library.reference.1=../../cocos2d-x/cocos/platform/android/java  In this case,  Cocos2dxActivity.java  should be located at:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java   Modify  Cocos2dxActivity.java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify  Cocos2dxActivity  to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . The placement of this call is important. It must be done after the call to  onLoadNativeLibraries(); . Example:   onLoadNativeLibraries();\nSDKBox.init(this);    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }  Proguard (release, optional)   Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   Edit the file you specified to include the following:   -dontwarn android.webkit.**  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Extra steps"
        }, 
        {
            "location": "/plugins/adcolony/v3-cpp/#configuration", 
            "text": "SDKBOX Installer will automatically inject a sample configuration to your  res/sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the AdColony configuration, you need to replace  app id  and  zone id  items with your specific  AdColony  account information.  AdColony :{\n     id : app id ,\n     debug :true,\n     ads :{\n         video :{\n             zone :  zone id ,\n             v4vc : false\n        },\n         v4vc :{\n             zone :  zone id ,\n             v4vc : true,\n             pre_popup  : true,\n             post_popup : true\n        }\n    }\n}", 
            "title": "Configuration"
        }, 
        {
            "location": "/plugins/adcolony/v3-cpp/#usage", 
            "text": "Initialize AdColony   Initialize the plugin where appropriate in your code. We recommend to do this in the  AppDelegate::applicationDidFinishLaunching()  or  AppController:didFinishLaunchingWithOptions() . Make sure to include the appropriate headers:   #include  PluginAdColony/PluginAdColony.h \nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginAdColony::init();\n}  Showing Ads  Display an ad wherever you want from your code, by specifying ad type:  sdkbox::PluginAdColony::show( video );  or:  sdkbox::PluginAdColony::show( v4vc );  Catch AdColony events (optional)  This allows you to catch the  AdColony  events so that you can perform operations such as providing player rewards for watching the video.   Allow your class to extend  sdkbox::AdColonyListener   #include  PluginAdColony/PluginAdColony.h \nclass MyClass : public sdkbox::AdColonyListener\n{\nprivate:\n  void onAdColonyChange(const sdkbox::AdColonyAdInfo  info, bool available);\n  void onAdColonyReward(const sdkbox::AdColonyAdInfo  info,\n        const std::string  currencyName, int amount, bool success);\n  void onAdColonyStarted(const sdkbox::AdColonyAdInfo  info);\n  void onAdColonyFinished(const sdkbox::AdColonyAdInfo  info);\n};   Create a  listener  that handles callbacks:   sdkbox::PluginAdColony::setListener(this);", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/adcolony/v3-cpp/#api-reference", 
            "text": "Methods  static void init();   initialize the plugin instance.   static AdColonyAdStatus getStatus(const std::string  name);   Check the availability of the AdColony ads by name   static int zoneStatusForZone(const std::string  zoneID);   returns the status for the specified zone. Use this to pre-load a zone.   static void show(const std::string  name);   play video ad using provided  zone name  that was specified in  sdkbox_config.json .   static void setListener(AdColonyListener* listener);   set a listener to listen for event changes.   static void removeListener();   remove the event listener.   static bool isVirtualCurrencyRewardAvailableForZone(const std::string  zoneID);   check if this zone offers a virtual currency reward.   static int getVirtualCurrencyRewardsAvailableTodayForZone(\n  const std::string  zoneID);   is there a virtual currency reward available to the user today for passed in\nzone.   static std::string getVirtualCurrencyNameForZone(const std::string  zoneID);   get virtual currency name for passed in zone.   static int getVirtualCurrencyRewardAmountForZone(const std::string  zoneID);   the amount of the virtual currency reward for passed in zone.   static int getVideosPerReward(const std::string  currencyName);   are there multiple videos to watch per reward? Get the number of them.   static int getVideoCreditBalance(const std::string  currencyName);   get video credit balance for passed in currency name.   static void cancelAd();   stop the currently showing ad.   static bool videoAdCurrentlyRunning();   is there a video currently showing?   static void turnAllAdsOff();   turn off all ads.   Listeners  void onAdColonyChange(const sdkbox::AdColonyAdInfo  info, bool available);   called when AdColony is finished loading.   void onAdColonyReward(const sdkbox::AdColonyAdInfo  info,\n  const std::string  currencyName,\n  int amount, bool success);   reward was received.   void onAdColonyStarted(const sdkbox::AdColonyAdInfo  info);   showing an ad has started.   void onAdColonyFinished(const sdkbox::AdColonyAdInfo  info);   showing an ad has finished.", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/adcolony/v3-js/", 
            "text": "AdColony\n\n\nIntegration\n\n\nUse the following command to install the SDKBOX AdColony plugin, Make sure you setup SDKBOX installer correctly.\n\n\nsdkbox import adcolony\n\n\n\n\nExtra steps\n\n\nModify \nCocos2dxActivity.java\n\n\n\n\n\n\nIf you're using cocos2d-x from source, assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java\n\n\n\n\n\n\nIf you're using the prebuilt cocos2d-x libraries assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n./src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nNote:\n When using Cocos2d-x from source, different versions have \nCocos2dxActivity.java\n in a different location. One way to find the location is to look in \nproj.android/project.properties\n. Example:\n\n\nandroid.library.reference.1=../../cocos2d-x/cocos/platform/android/java\n\n\n\n\nIn this case, \nCocos2dxActivity.java\n should be located at:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nModify \nCocos2dxActivity.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify \nCocos2dxActivity\n to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. The placement of this call is important. It must be done after the call to \nonLoadNativeLibraries();\n. Example:\n\n\n\n\nonLoadNativeLibraries();\nSDKBox.init(this);\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (release, optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n-dontwarn android.webkit.**\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.\n\n\nConfiguration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nres/sdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the AdColony configuration, you need to replace \napp id\n and \nzone id\n items with your specific \nAdColony\n account information.\n\n\nAdColony\n:{\n    \nid\n:\napp id\n,\n    \ndebug\n:true,\n    \nads\n:{\n        \nvideo\n:{\n            \nzone\n: \nzone id\n,\n            \nv4vc\n: false\n        },\n        \nv4vc\n:{\n            \nzone\n: \nzone id\n,\n            \nv4vc\n: true,\n            \npre_popup\n : true,\n            \npost_popup\n: true\n        }\n    }\n}\n\n\n\n\nUsage\n\n\nInitialize AdColony\n\n\n\n\nInitialize the plugin by calling \ninit()\n where appropriate in your code. We\nrecommend to do this in the \napp.js\n. Example:\n\n\n\n\nsdkbox.PluginAdColony.init();\n\n\n\n\n\n\nModify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n to include the following headers:\n\n\n\n\n#include \nPluginAdColonyJS.hpp\n\n\n\n\n\n\n\nModify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n make sure to call:\n\n\n\n\nsc-\naddRegisterCallback(register_all_PluginAdColonyJS);\n\n\n\n\nThis registers the Javascript callbacks.\n\n\nShowing Ads\n\n\nDisplay an ad wherever you want from your code, by specifying ad type:\n\n\nsdkbox.PluginAdColony.show(\nvideo\n);\n\n\n\n\nor:\n\n\nsdkbox.PluginAdColony.show(\nv4vc\n);\n\n\n\n\nCatch AdColony events (optional)\n\n\nThis allows you to catch the \nAdColony\n events so that you can perform operations such as providing player rewards for watching the video.\n\n\n\n\nCreate a listener (demonstrated by logging events):\n\n\n\n\n/**\n * The structure of data\n * data.name : name of the ad (in sdkbox_config.json)\n * data.zoneID : the zoneID of the ad\n * data.shown : indicates wether the ad gets shown or closed by user\n * data.iapEnabled : indicating whether or not the associated ad is an IAP\n * data.iapProductID : product identifier for the associated ad's IAP\n * data.iapQuantity : he number of items the user wishes to purchase\n * data.iapEngagementType : indicating the IAP engagement mechanism\n */\n\nsdkbox.PluginAdColony.setListener({\n        onAdColonyChange : function (data, available) {\n                // Called when AdColony finish loading\n        },\n        onAdColonyReward : function (data, currencyName, amount, success) {\n                // Called when AdColony v4vc ad finish playing\n        },\n        onAdColonyStarted : function (data) {\n                // Called when ad starts playing\n        },\n        onAdColonyFinished : function (data) {\n                // Called when an ad finish displaying\n        }\n});\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginAdColony.zoneStatusForZone(zoneID);\n\n\n\n\n\n\nreturns the status for the specified zone. Use this to pre-load a zone.\n\n\n\n\nsdkbox.PluginAdColony.isVirtualCurrencyRewardAvailableForZone(zoneID);\n\n\n\n\n\n\ncheck if this zone offers a virtual currency reward.\n\n\n\n\nsdkbox.PluginAdColony.show(name);\n\n\n\n\n\n\nplay video ad using provided \nzone name\n that was specified in \nsdkbox_config.json\n.\n\n\n\n\nsdkbox.PluginAdColony.getStatus(name);\n\n\n\n\n\n\nCheck the availability of the AdColony ads by name\n\n\n\n\nsdkbox.PluginAdColony.setListener(listener);\n\n\n\n\n\n\nset a listener to listen for event changes.\n\n\n\n\nsdkbox.PluginAdColony.removeListener();\n\n\n\n\n\n\nremove the event listener.\n\n\n\n\nsdkbox.PluginAdColony.getVirtualCurrencyRewardAmountForZone(zoneID);\n\n\n\n\n\n\nis there a virtual currency reward available to the user today for passed in zone.\n\n\n\n\nsdkbox.PluginAdColony.init();\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nsdkbox.PluginAdColony.videoAdCurrentlyRunning();\n\n\n\n\n\n\nis there a video currently showing?\n\n\n\n\nsdkbox.PluginAdColony.turnAllAdsOff();\n\n\n\n\n\n\nturn off all ads.\n\n\n\n\nsdkbox.PluginAdColony.getVideoCreditBalance(currencyName);\n\n\n\n\n\n\nget video credit balance for passed in currency name.\n\n\n\n\nsdkbox.PluginAdColony.getVideosPerReward(currencyName);\n\n\n\n\n\n\nare there multiple videos to watch per reward? Get the number of them.\n\n\n\n\nsdkbox.PluginAdColony.getVirtualCurrencyNameForZone(zoneID);\n\n\n\n\n\n\nget virtual currency name for passed in zone.\n\n\n\n\nsdkbox.PluginAdColony.getVirtualCurrencyRewardsAvailableTodayForZone(zoneID);\n\n\n\n\n\n\nis there a virtual currency reward available to the user today for passed in\nzone.\n\n\n\n\nsdkbox.PluginAdColony.cancelAd();\n\n\n\n\n\n\nstop the currently showing ad.\n\n\n\n\nListeners\n\n\n/**\n * The structure of data\n * data.name : name of the ad (in sdkbox_config.json)\n * data.zoneID : the zoneID of the ad\n * data.shown : indicates wether the ad gets shown or closed by user\n * data.iapEnabled : indicating whether or not the associated ad is an IAP\n * data.iapProductID : product identifier for the associated ad's IAP\n * data.iapQuantity : he number of items the user wishes to purchase\n * data.iapEngagementType : indicating the IAP engagement mechanism\n *\n * avail = bool\n */\n\n\n\n\nonAdColonyChange(data, available);\n\n\n\n\n\n\ncalled when AdColony is finished loading.\n\n\n\n\nonAdColonyReward(data, currencyName, amount, success);\n\n\n\n\n\n\nreward was received.\n\n\n\n\nonAdColonyStarted(data);\n\n\n\n\n\n\nshowing an ad has started.\n\n\n\n\nonAdColonyFinished(data);\n\n\n\n\n\n\nshowing an ad has finished.", 
            "title": "js"
        }, 
        {
            "location": "/plugins/adcolony/v3-js/#adcolony", 
            "text": "", 
            "title": "AdColony"
        }, 
        {
            "location": "/plugins/adcolony/v3-js/#integration", 
            "text": "Use the following command to install the SDKBOX AdColony plugin, Make sure you setup SDKBOX installer correctly.  sdkbox import adcolony", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/adcolony/v3-js/#extra-steps", 
            "text": "Modify  Cocos2dxActivity.java    If you're using cocos2d-x from source, assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java    If you're using the prebuilt cocos2d-x libraries assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ./src/org/cocos2dx/lib/Cocos2dxActivity.java    Note:  When using Cocos2d-x from source, different versions have  Cocos2dxActivity.java  in a different location. One way to find the location is to look in  proj.android/project.properties . Example:  android.library.reference.1=../../cocos2d-x/cocos/platform/android/java  In this case,  Cocos2dxActivity.java  should be located at:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java   Modify  Cocos2dxActivity.java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify  Cocos2dxActivity  to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . The placement of this call is important. It must be done after the call to  onLoadNativeLibraries(); . Example:   onLoadNativeLibraries();\nSDKBox.init(this);    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }  Proguard (release, optional)   Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   Edit the file you specified to include the following:   -dontwarn android.webkit.**  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Extra steps"
        }, 
        {
            "location": "/plugins/adcolony/v3-js/#configuration", 
            "text": "SDKBOX Installer will automatically inject a sample configuration to your  res/sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the AdColony configuration, you need to replace  app id  and  zone id  items with your specific  AdColony  account information.  AdColony :{\n     id : app id ,\n     debug :true,\n     ads :{\n         video :{\n             zone :  zone id ,\n             v4vc : false\n        },\n         v4vc :{\n             zone :  zone id ,\n             v4vc : true,\n             pre_popup  : true,\n             post_popup : true\n        }\n    }\n}", 
            "title": "Configuration"
        }, 
        {
            "location": "/plugins/adcolony/v3-js/#usage", 
            "text": "Initialize AdColony   Initialize the plugin by calling  init()  where appropriate in your code. We\nrecommend to do this in the  app.js . Example:   sdkbox.PluginAdColony.init();   Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  to include the following headers:   #include  PluginAdColonyJS.hpp    Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  make sure to call:   sc- addRegisterCallback(register_all_PluginAdColonyJS);  This registers the Javascript callbacks.  Showing Ads  Display an ad wherever you want from your code, by specifying ad type:  sdkbox.PluginAdColony.show( video );  or:  sdkbox.PluginAdColony.show( v4vc );  Catch AdColony events (optional)  This allows you to catch the  AdColony  events so that you can perform operations such as providing player rewards for watching the video.   Create a listener (demonstrated by logging events):   /**\n * The structure of data\n * data.name : name of the ad (in sdkbox_config.json)\n * data.zoneID : the zoneID of the ad\n * data.shown : indicates wether the ad gets shown or closed by user\n * data.iapEnabled : indicating whether or not the associated ad is an IAP\n * data.iapProductID : product identifier for the associated ad's IAP\n * data.iapQuantity : he number of items the user wishes to purchase\n * data.iapEngagementType : indicating the IAP engagement mechanism\n */\n\nsdkbox.PluginAdColony.setListener({\n        onAdColonyChange : function (data, available) {\n                // Called when AdColony finish loading\n        },\n        onAdColonyReward : function (data, currencyName, amount, success) {\n                // Called when AdColony v4vc ad finish playing\n        },\n        onAdColonyStarted : function (data) {\n                // Called when ad starts playing\n        },\n        onAdColonyFinished : function (data) {\n                // Called when an ad finish displaying\n        }\n});", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/adcolony/v3-js/#api-reference", 
            "text": "Methods  sdkbox.PluginAdColony.zoneStatusForZone(zoneID);   returns the status for the specified zone. Use this to pre-load a zone.   sdkbox.PluginAdColony.isVirtualCurrencyRewardAvailableForZone(zoneID);   check if this zone offers a virtual currency reward.   sdkbox.PluginAdColony.show(name);   play video ad using provided  zone name  that was specified in  sdkbox_config.json .   sdkbox.PluginAdColony.getStatus(name);   Check the availability of the AdColony ads by name   sdkbox.PluginAdColony.setListener(listener);   set a listener to listen for event changes.   sdkbox.PluginAdColony.removeListener();   remove the event listener.   sdkbox.PluginAdColony.getVirtualCurrencyRewardAmountForZone(zoneID);   is there a virtual currency reward available to the user today for passed in zone.   sdkbox.PluginAdColony.init();   initialize the plugin instance.   sdkbox.PluginAdColony.videoAdCurrentlyRunning();   is there a video currently showing?   sdkbox.PluginAdColony.turnAllAdsOff();   turn off all ads.   sdkbox.PluginAdColony.getVideoCreditBalance(currencyName);   get video credit balance for passed in currency name.   sdkbox.PluginAdColony.getVideosPerReward(currencyName);   are there multiple videos to watch per reward? Get the number of them.   sdkbox.PluginAdColony.getVirtualCurrencyNameForZone(zoneID);   get virtual currency name for passed in zone.   sdkbox.PluginAdColony.getVirtualCurrencyRewardsAvailableTodayForZone(zoneID);   is there a virtual currency reward available to the user today for passed in\nzone.   sdkbox.PluginAdColony.cancelAd();   stop the currently showing ad.   Listeners  /**\n * The structure of data\n * data.name : name of the ad (in sdkbox_config.json)\n * data.zoneID : the zoneID of the ad\n * data.shown : indicates wether the ad gets shown or closed by user\n * data.iapEnabled : indicating whether or not the associated ad is an IAP\n * data.iapProductID : product identifier for the associated ad's IAP\n * data.iapQuantity : he number of items the user wishes to purchase\n * data.iapEngagementType : indicating the IAP engagement mechanism\n *\n * avail = bool\n */  onAdColonyChange(data, available);   called when AdColony is finished loading.   onAdColonyReward(data, currencyName, amount, success);   reward was received.   onAdColonyStarted(data);   showing an ad has started.   onAdColonyFinished(data);   showing an ad has finished.", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/adcolony/v3-lua/", 
            "text": "AdColony\n\n\nIntegration\n\n\nUse the following command to install the SDKBOX AdColony plugin, Make sure you setup SDKBOX installer correctly.\n\n\nsdkbox import adcolony\n\n\n\n\nExtra steps\n\n\nModify \nCocos2dxActivity.java\n\n\n\n\n\n\nIf you're using cocos2d-x from source, assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java\n\n\n\n\n\n\nIf you're using the prebuilt cocos2d-x libraries assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n./src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nNote:\n When using Cocos2d-x from source, different versions have \nCocos2dxActivity.java\n in a different location. One way to find the location is to look in \nproj.android/project.properties\n. Example:\n\n\nandroid.library.reference.1=../../cocos2d-x/cocos/platform/android/java\n\n\n\n\nIn this case, \nCocos2dxActivity.java\n should be located at:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nModify \nCocos2dxActivity.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify \nCocos2dxActivity\n to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. The placement of this call is important. It must be done after the call to \nonLoadNativeLibraries();\n. Example:\n\n\n\n\nonLoadNativeLibraries();\nSDKBox.init(this);\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (release, optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n-dontwarn android.webkit.**\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.\n\n\nConfiguration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nres/sdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the AdColony configuration, you need to replace \napp id\n and \nzone id\n items with your specific \nAdColony\n account information.\n\n\nAdColony\n:{\n    \nid\n:\napp id\n,\n    \ndebug\n:true,\n    \nads\n:{\n        \nvideo\n:{\n            \nzone\n: \nzone id\n,\n            \nv4vc\n: false\n        },\n        \nv4vc\n:{\n            \nzone\n: \nzone id\n,\n            \nv4vc\n: true,\n            \npre_popup\n : true,\n            \npost_popup\n: true\n        }\n    }\n}\n\n\n\n\nUsage\n\n\nModify Lua Code\n\n\nModify \n./frameworks/runtime-src/Classes/lua_module_register.h\n to include the necessary headers and calls to register \nAdColony\n with Lua. Note this takes a parameter of \nlua_State*\n:\n\n\n#include \nPluginAdColonyLua.hpp\n\n#include \nPluginAdColonyLuaHelper.h\n\n\n\n\n\nstatic int lua_module_register(lua_State* L)\n{\n  register_all_PluginAdColonyLua(L);\n  register_PluginAdColonyLua_helper(L);\n}\n\n\n\n\nInitialize AdColony\n\n\n\n\nmodify your Lua code to \ninit()\n the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.\n\n\n\n\nsdkbox.PluginAdColony:init();\n\n\n\n\nShowing Ads\n\n\nDisplay an ad wherever you want from your code, by specifying ad type:\n\n\nsdkbox.PluginAdColony:show(\nvideo\n);\n\n\n\n\nor:\n\n\nsdkbox.PluginAdColony:show(\nv4vc\n);\n\n\n\n\nCatch AdColony events (optional)\n\n\nThis allows you to catch the \nAdColony\n events so that you can perform operations such as providing player rewards for watching the video.\n\n\n\n\nCreate a listener (demonstrated by logging events):\n\n\n\n\nsdkbox.PluginAdColony:setListener(function(args)\n    if \nonAdColonyChange\n == args.name then\n        local info = args.info  -- sdkbox::AdColonyAdInfo\n        local available = args.available -- boolean\n                dump(info, \nonAdColonyChange:\n)\n        print(\navailable:\n, available)\n    elseif \nonAdColonyReward\n ==  args.name then\n        local info = args.info  -- sdkbox::AdColonyAdInfo\n        local currencyName = args.currencyName -- string\n        local amount = args.amount -- int\n        local success = args.success -- boolean\n                dump(info, \nonAdColonyReward:\n)\n        print(\ncurrencyName:\n, currencyName)\n        print(\namount:\n, amount)\n        print(\nsuccess:\n, success)\n    elseif \nonAdColonyStarted\n ==  args.name then\n        local info = args.info  -- sdkbox::AdColonyAdInfo\n                dump(info, \nonAdColonyStarted:\n)\n    elseif \nonAdColonyFinished\n ==  args.name then\n        local info = args.info  -- sdkbox::AdColonyAdInfo\n                dump(info, \nonAdColonyFinished:\n)\n    end\nend)\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginAdColony:zoneStatusForZone(zoneID);\n\n\n\n\n\n\nreturns the status for the specified zone. Use this to pre-load a zone.\n\n\n\n\nsdkbox.PluginAdColony:isVirtualCurrencyRewardAvailableForZone(zoneID);\n\n\n\n\n\n\ncheck if this zone offers a virtual currency reward.\n\n\n\n\nsdkbox.PluginAdColony:show(name);\n\n\n\n\n\n\nplay video ad using provided \nzone name\n that was specified in \nsdkbox_config.json\n.\n\n\n\n\nsdkbox.PluginAdColony:getStatus(name);\n\n\n\n\n\n\nCheck the availability of the AdColony ads by name\n\n\n\n\nsdkbox.PluginAdColony:getVirtualCurrencyRewardAmountForZone(zoneID);\n\n\n\n\n\n\nis there a virtual currency reward available to the user today for passed in\nzone.\n\n\n\n\nsdkbox.PluginAdColony:init();\n\n\n\n\n\n\ninitialize the instance.\n\n\n\n\nsdkbox.PluginAdColony:videoAdCurrentlyRunning();\n\n\n\n\n\n\nis there a video currently showing?\n\n\n\n\nsdkbox.PluginAdColony:turnAllAdsOff();\n\n\n\n\n\n\nturn off all ads.\n\n\n\n\nsdkbox.PluginAdColony:getVideoCreditBalance(currencyName);\n\n\n\n\n\n\nget video credit balance for passed in currency name.\n\n\n\n\nsdkbox.PluginAdColony:getVideosPerReward(currencyName);\n\n\n\n\n\n\nare there multiple videos to watch per reward? Get the number of them.\n\n\n\n\nsdkbox.PluginAdColony:getVirtualCurrencyNameForZone(zoneID);\n\n\n\n\n\n\nget virtual currency name for passed in zone.\n\n\n\n\nsdkbox.PluginAdColony:getVirtualCurrencyRewardsAvailableTodayForZone(zoneID);\n\n\n\n\n\n\nis there a virtual currency reward available to the user today for passed in\nzone.\n\n\n\n\nsdkbox.PluginAdColony:cancelAd();\n\n\n\n\n\n\nstop the currently showing ad.\n\n\n\n\nListeners\n\n\n/**\n * The structure of data\n * data.name : name of the ad (in sdkbox_config.json)\n * data.zoneID : the zoneID of the ad\n * data.shown : indicates wether the ad gets shown or closed by user\n * data.iapEnabled : indicating whether or not the associated ad is an IAP\n * data.iapProductID : product identifier for the associated ad's IAP\n * data.iapQuantity : he number of items the user wishes to purchase\n * data.iapEngagementType : indicating the IAP engagement mechanism\n *\n * avail = bool\n */\n\n\n\n\nonAdColonyChange(data, available);\n\n\n\n\n\n\ncalled when AdColony is finished loading.\n\n\n\n\nonAdColonyReward(data, currencyName, amount, success);\n\n\n\n\n\n\nreward was received.\n\n\n\n\nonAdColonyStarted(data);\n\n\n\n\n\n\nshowing an ad has started.\n\n\n\n\nonAdColonyFinished(data);\n\n\n\n\n\n\nshowing an ad has finished.", 
            "title": "lua"
        }, 
        {
            "location": "/plugins/adcolony/v3-lua/#adcolony", 
            "text": "", 
            "title": "AdColony"
        }, 
        {
            "location": "/plugins/adcolony/v3-lua/#integration", 
            "text": "Use the following command to install the SDKBOX AdColony plugin, Make sure you setup SDKBOX installer correctly.  sdkbox import adcolony", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/adcolony/v3-lua/#extra-steps", 
            "text": "Modify  Cocos2dxActivity.java    If you're using cocos2d-x from source, assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java    If you're using the prebuilt cocos2d-x libraries assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ./src/org/cocos2dx/lib/Cocos2dxActivity.java    Note:  When using Cocos2d-x from source, different versions have  Cocos2dxActivity.java  in a different location. One way to find the location is to look in  proj.android/project.properties . Example:  android.library.reference.1=../../cocos2d-x/cocos/platform/android/java  In this case,  Cocos2dxActivity.java  should be located at:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java   Modify  Cocos2dxActivity.java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify  Cocos2dxActivity  to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . The placement of this call is important. It must be done after the call to  onLoadNativeLibraries(); . Example:   onLoadNativeLibraries();\nSDKBox.init(this);    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }  Proguard (release, optional)   Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   Edit the file you specified to include the following:   -dontwarn android.webkit.**  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Extra steps"
        }, 
        {
            "location": "/plugins/adcolony/v3-lua/#configuration", 
            "text": "SDKBOX Installer will automatically inject a sample configuration to your  res/sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the AdColony configuration, you need to replace  app id  and  zone id  items with your specific  AdColony  account information.  AdColony :{\n     id : app id ,\n     debug :true,\n     ads :{\n         video :{\n             zone :  zone id ,\n             v4vc : false\n        },\n         v4vc :{\n             zone :  zone id ,\n             v4vc : true,\n             pre_popup  : true,\n             post_popup : true\n        }\n    }\n}", 
            "title": "Configuration"
        }, 
        {
            "location": "/plugins/adcolony/v3-lua/#usage", 
            "text": "Modify Lua Code  Modify  ./frameworks/runtime-src/Classes/lua_module_register.h  to include the necessary headers and calls to register  AdColony  with Lua. Note this takes a parameter of  lua_State* :  #include  PluginAdColonyLua.hpp \n#include  PluginAdColonyLuaHelper.h   static int lua_module_register(lua_State* L)\n{\n  register_all_PluginAdColonyLua(L);\n  register_PluginAdColonyLua_helper(L);\n}  Initialize AdColony   modify your Lua code to  init()  the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.   sdkbox.PluginAdColony:init();  Showing Ads  Display an ad wherever you want from your code, by specifying ad type:  sdkbox.PluginAdColony:show( video );  or:  sdkbox.PluginAdColony:show( v4vc );  Catch AdColony events (optional)  This allows you to catch the  AdColony  events so that you can perform operations such as providing player rewards for watching the video.   Create a listener (demonstrated by logging events):   sdkbox.PluginAdColony:setListener(function(args)\n    if  onAdColonyChange  == args.name then\n        local info = args.info  -- sdkbox::AdColonyAdInfo\n        local available = args.available -- boolean\n                dump(info,  onAdColonyChange: )\n        print( available: , available)\n    elseif  onAdColonyReward  ==  args.name then\n        local info = args.info  -- sdkbox::AdColonyAdInfo\n        local currencyName = args.currencyName -- string\n        local amount = args.amount -- int\n        local success = args.success -- boolean\n                dump(info,  onAdColonyReward: )\n        print( currencyName: , currencyName)\n        print( amount: , amount)\n        print( success: , success)\n    elseif  onAdColonyStarted  ==  args.name then\n        local info = args.info  -- sdkbox::AdColonyAdInfo\n                dump(info,  onAdColonyStarted: )\n    elseif  onAdColonyFinished  ==  args.name then\n        local info = args.info  -- sdkbox::AdColonyAdInfo\n                dump(info,  onAdColonyFinished: )\n    end\nend)", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/adcolony/v3-lua/#api-reference", 
            "text": "Methods  sdkbox.PluginAdColony:zoneStatusForZone(zoneID);   returns the status for the specified zone. Use this to pre-load a zone.   sdkbox.PluginAdColony:isVirtualCurrencyRewardAvailableForZone(zoneID);   check if this zone offers a virtual currency reward.   sdkbox.PluginAdColony:show(name);   play video ad using provided  zone name  that was specified in  sdkbox_config.json .   sdkbox.PluginAdColony:getStatus(name);   Check the availability of the AdColony ads by name   sdkbox.PluginAdColony:getVirtualCurrencyRewardAmountForZone(zoneID);   is there a virtual currency reward available to the user today for passed in\nzone.   sdkbox.PluginAdColony:init();   initialize the instance.   sdkbox.PluginAdColony:videoAdCurrentlyRunning();   is there a video currently showing?   sdkbox.PluginAdColony:turnAllAdsOff();   turn off all ads.   sdkbox.PluginAdColony:getVideoCreditBalance(currencyName);   get video credit balance for passed in currency name.   sdkbox.PluginAdColony:getVideosPerReward(currencyName);   are there multiple videos to watch per reward? Get the number of them.   sdkbox.PluginAdColony:getVirtualCurrencyNameForZone(zoneID);   get virtual currency name for passed in zone.   sdkbox.PluginAdColony:getVirtualCurrencyRewardsAvailableTodayForZone(zoneID);   is there a virtual currency reward available to the user today for passed in\nzone.   sdkbox.PluginAdColony:cancelAd();   stop the currently showing ad.   Listeners  /**\n * The structure of data\n * data.name : name of the ad (in sdkbox_config.json)\n * data.zoneID : the zoneID of the ad\n * data.shown : indicates wether the ad gets shown or closed by user\n * data.iapEnabled : indicating whether or not the associated ad is an IAP\n * data.iapProductID : product identifier for the associated ad's IAP\n * data.iapQuantity : he number of items the user wishes to purchase\n * data.iapEngagementType : indicating the IAP engagement mechanism\n *\n * avail = bool\n */  onAdColonyChange(data, available);   called when AdColony is finished loading.   onAdColonyReward(data, currencyName, amount, success);   reward was received.   onAdColonyStarted(data);   showing an ad has started.   onAdColonyFinished(data);   showing an ad has finished.", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/adcolony/v2-cpp/", 
            "text": "AdColony\n\n\nIntegration\n\n\nUse the following command to install the SDKBOX AdColony plugin, Make sure you setup SDKBOX installer correctly.\n\n\nsdkbox import adcolony\n\n\n\n\nExtra steps\n\n\nModify \nYourGameName\n.java\n\n\n\n\nModify \nproj.android/src/\npackage identifier\n/\nYourGameName\n.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify the class to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. Example of what this might look like for you:\n\n\n\n\nprotected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (release, optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n-dontwarn android.webkit.**\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.\n\n\nConfiguration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nres/sdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the AdColony configuration, you need to replace \napp id\n and \nzone id\n items with your specific \nAdColony\n account information.\n\n\nAdColony\n:{\n    \nid\n:\napp id\n,\n    \ndebug\n:true,\n    \nads\n:{\n        \nvideo\n:{\n            \nzone\n: \nzone id\n,\n            \nv4vc\n: false\n        },\n        \nv4vc\n:{\n            \nzone\n: \nzone id\n,\n            \nv4vc\n: true,\n            \npre_popup\n : true,\n            \npost_popup\n: true\n        }\n    }\n}\n\n\n\n\nUsage\n\n\nInitialize AdColony\n\n\n\n\nInitialize the plugin where appropriate in your code. We recommend to do this in the \nAppDelegate::applicationDidFinishLaunching()\n or \nAppController:didFinishLaunchingWithOptions()\n. Make sure to include the appropriate headers:\n\n\n\n\n#include \nPluginAdColony/PluginAdColony.h\n\nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginAdColony::init();\n}\n\n\n\n\nShowing Ads\n\n\nDisplay an ad wherever you want from your code, by specifying ad type:\n\n\nsdkbox::PluginAdColony::show(\nvideo\n);\n\n\n\n\nor:\n\n\nsdkbox::PluginAdColony::show(\nv4vc\n);\n\n\n\n\nCatch AdColony events (optional)\n\n\nThis allows you to catch the \nAdColony\n events so that you can perform operations such as providing player rewards for watching the video.\n\n\n\n\nAllow your class to extend \nsdkbox::AdColonyListener\n\n\n\n\n#include \nPluginAdColony/PluginAdColony.h\n\nclass MyClass : public sdkbox::AdColonyListener\n{\nprivate:\n  void onAdColonyChange(const sdkbox::AdColonyAdInfo\n info, bool available);\n  void onAdColonyReward(const sdkbox::AdColonyAdInfo\n info,\n        const std::string\n currencyName, int amount, bool success);\n  void onAdColonyStarted(const sdkbox::AdColonyAdInfo\n info);\n  void onAdColonyFinished(const sdkbox::AdColonyAdInfo\n info);\n};\n\n\n\n\n\n\nCreate a \nlistener\n that handles callbacks:\n\n\n\n\nsdkbox::PluginAdColony::setListener(this);\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nstatic void init();\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nstatic AdColonyAdStatus getStatus(const std::string\n name);\n\n\n\n\n\n\nCheck the availability of the AdColony ads by name\n\n\n\n\nstatic int zoneStatusForZone(const std::string\n zoneID);\n\n\n\n\n\n\nreturns the status for the specified zone. Use this to pre-load a zone.\n\n\n\n\nstatic void show(const std::string\n name);\n\n\n\n\n\n\nplay video ad using provided \nzone name\n that was specified in \nsdkbox_config.json\n.\n\n\n\n\nstatic void setListener(AdColonyListener* listener);\n\n\n\n\n\n\nset a listener to listen for event changes.\n\n\n\n\nstatic void removeListener();\n\n\n\n\n\n\nremove the event listener.\n\n\n\n\nstatic bool isVirtualCurrencyRewardAvailableForZone(const std::string\n zoneID);\n\n\n\n\n\n\ncheck if this zone offers a virtual currency reward.\n\n\n\n\nstatic int getVirtualCurrencyRewardsAvailableTodayForZone(\n  const std::string\n zoneID);\n\n\n\n\n\n\nis there a virtual currency reward available to the user today for passed in\nzone.\n\n\n\n\nstatic std::string getVirtualCurrencyNameForZone(const std::string\n zoneID);\n\n\n\n\n\n\nget virtual currency name for passed in zone.\n\n\n\n\nstatic int getVirtualCurrencyRewardAmountForZone(const std::string\n zoneID);\n\n\n\n\n\n\nthe amount of the virtual currency reward for passed in zone.\n\n\n\n\nstatic int getVideosPerReward(const std::string\n currencyName);\n\n\n\n\n\n\nare there multiple videos to watch per reward? Get the number of them.\n\n\n\n\nstatic int getVideoCreditBalance(const std::string\n currencyName);\n\n\n\n\n\n\nget video credit balance for passed in currency name.\n\n\n\n\nstatic void cancelAd();\n\n\n\n\n\n\nstop the currently showing ad.\n\n\n\n\nstatic bool videoAdCurrentlyRunning();\n\n\n\n\n\n\nis there a video currently showing?\n\n\n\n\nstatic void turnAllAdsOff();\n\n\n\n\n\n\nturn off all ads.\n\n\n\n\nListeners\n\n\nvoid onAdColonyChange(const sdkbox::AdColonyAdInfo\n info, bool available);\n\n\n\n\n\n\ncalled when AdColony is finished loading.\n\n\n\n\nvoid onAdColonyReward(const sdkbox::AdColonyAdInfo\n info,\n  const std::string\n currencyName,\n  int amount, bool success);\n\n\n\n\n\n\nreward was received.\n\n\n\n\nvoid onAdColonyStarted(const sdkbox::AdColonyAdInfo\n info);\n\n\n\n\n\n\nshowing an ad has started.\n\n\n\n\nvoid onAdColonyFinished(const sdkbox::AdColonyAdInfo\n info);\n\n\n\n\n\n\nshowing an ad has finished.", 
            "title": "c++"
        }, 
        {
            "location": "/plugins/adcolony/v2-cpp/#adcolony", 
            "text": "", 
            "title": "AdColony"
        }, 
        {
            "location": "/plugins/adcolony/v2-cpp/#integration", 
            "text": "Use the following command to install the SDKBOX AdColony plugin, Make sure you setup SDKBOX installer correctly.  sdkbox import adcolony", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/adcolony/v2-cpp/#extra-steps", 
            "text": "Modify  YourGameName .java   Modify  proj.android/src/ package identifier / YourGameName .java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify the class to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . Example of what this might look like for you:   protected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }  Proguard (release, optional)   Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   Edit the file you specified to include the following:   -dontwarn android.webkit.**  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Extra steps"
        }, 
        {
            "location": "/plugins/adcolony/v2-cpp/#configuration", 
            "text": "SDKBOX Installer will automatically inject a sample configuration to your  res/sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the AdColony configuration, you need to replace  app id  and  zone id  items with your specific  AdColony  account information.  AdColony :{\n     id : app id ,\n     debug :true,\n     ads :{\n         video :{\n             zone :  zone id ,\n             v4vc : false\n        },\n         v4vc :{\n             zone :  zone id ,\n             v4vc : true,\n             pre_popup  : true,\n             post_popup : true\n        }\n    }\n}", 
            "title": "Configuration"
        }, 
        {
            "location": "/plugins/adcolony/v2-cpp/#usage", 
            "text": "Initialize AdColony   Initialize the plugin where appropriate in your code. We recommend to do this in the  AppDelegate::applicationDidFinishLaunching()  or  AppController:didFinishLaunchingWithOptions() . Make sure to include the appropriate headers:   #include  PluginAdColony/PluginAdColony.h \nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginAdColony::init();\n}  Showing Ads  Display an ad wherever you want from your code, by specifying ad type:  sdkbox::PluginAdColony::show( video );  or:  sdkbox::PluginAdColony::show( v4vc );  Catch AdColony events (optional)  This allows you to catch the  AdColony  events so that you can perform operations such as providing player rewards for watching the video.   Allow your class to extend  sdkbox::AdColonyListener   #include  PluginAdColony/PluginAdColony.h \nclass MyClass : public sdkbox::AdColonyListener\n{\nprivate:\n  void onAdColonyChange(const sdkbox::AdColonyAdInfo  info, bool available);\n  void onAdColonyReward(const sdkbox::AdColonyAdInfo  info,\n        const std::string  currencyName, int amount, bool success);\n  void onAdColonyStarted(const sdkbox::AdColonyAdInfo  info);\n  void onAdColonyFinished(const sdkbox::AdColonyAdInfo  info);\n};   Create a  listener  that handles callbacks:   sdkbox::PluginAdColony::setListener(this);", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/adcolony/v2-cpp/#api-reference", 
            "text": "Methods  static void init();   initialize the plugin instance.   static AdColonyAdStatus getStatus(const std::string  name);   Check the availability of the AdColony ads by name   static int zoneStatusForZone(const std::string  zoneID);   returns the status for the specified zone. Use this to pre-load a zone.   static void show(const std::string  name);   play video ad using provided  zone name  that was specified in  sdkbox_config.json .   static void setListener(AdColonyListener* listener);   set a listener to listen for event changes.   static void removeListener();   remove the event listener.   static bool isVirtualCurrencyRewardAvailableForZone(const std::string  zoneID);   check if this zone offers a virtual currency reward.   static int getVirtualCurrencyRewardsAvailableTodayForZone(\n  const std::string  zoneID);   is there a virtual currency reward available to the user today for passed in\nzone.   static std::string getVirtualCurrencyNameForZone(const std::string  zoneID);   get virtual currency name for passed in zone.   static int getVirtualCurrencyRewardAmountForZone(const std::string  zoneID);   the amount of the virtual currency reward for passed in zone.   static int getVideosPerReward(const std::string  currencyName);   are there multiple videos to watch per reward? Get the number of them.   static int getVideoCreditBalance(const std::string  currencyName);   get video credit balance for passed in currency name.   static void cancelAd();   stop the currently showing ad.   static bool videoAdCurrentlyRunning();   is there a video currently showing?   static void turnAllAdsOff();   turn off all ads.   Listeners  void onAdColonyChange(const sdkbox::AdColonyAdInfo  info, bool available);   called when AdColony is finished loading.   void onAdColonyReward(const sdkbox::AdColonyAdInfo  info,\n  const std::string  currencyName,\n  int amount, bool success);   reward was received.   void onAdColonyStarted(const sdkbox::AdColonyAdInfo  info);   showing an ad has started.   void onAdColonyFinished(const sdkbox::AdColonyAdInfo  info);   showing an ad has finished.", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/adcolony/v2-js/", 
            "text": "AdColony\n\n\nIntegration\n\n\nUse the following command to install the SDKBOX AdColony plugin, Make sure you setup SDKBOX installer correctly.\n\n\nsdkbox import adcolony\n\n\n\n\nExtra steps\n\n\nModify \nYourGameName\n.java\n\n\n\n\nModify \nproj.android/src/\npackage identifier\n/\nYourGameName\n.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify the class to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. Example of what this might look like for you:\n\n\n\n\nprotected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (release, optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n-dontwarn android.webkit.**\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.\n\n\nConfiguration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nres/sdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the AdColony configuration, you need to replace \napp id\n and \nzone id\n items with your specific \nAdColony\n account information.\n\n\nAdColony\n:{\n    \nid\n:\napp id\n,\n    \ndebug\n:true,\n    \nads\n:{\n        \nvideo\n:{\n            \nzone\n: \nzone id\n,\n            \nv4vc\n: false\n        },\n        \nv4vc\n:{\n            \nzone\n: \nzone id\n,\n            \nv4vc\n: true,\n            \npre_popup\n : true,\n            \npost_popup\n: true\n        }\n    }\n}\n\n\n\n\nUsage\n\n\nInitialize AdColony\n\n\n\n\nInitialize the plugin by calling \ninit()\n where appropriate in your code. We\nrecommend to do this in the \napp.js\n. Example:\n\n\n\n\nsdkbox.PluginAdColony.init();\n\n\n\n\n\n\nModify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n to include the following headers:\n\n\n\n\n#include \nPluginAdColonyJS.hpp\n\n\n\n\n\n\n\nModify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n make sure to call:\n\n\n\n\nsc-\naddRegisterCallback(register_all_PluginAdColonyJS);\n\n\n\n\nThis registers the Javascript callbacks.\n\n\nShowing Ads\n\n\nDisplay an ad wherever you want from your code, by specifying ad type:\n\n\nsdkbox.PluginAdColony.show(\nvideo\n);\n\n\n\n\nor:\n\n\nsdkbox.PluginAdColony.show(\nv4vc\n);\n\n\n\n\nCatch AdColony events (optional)\n\n\nThis allows you to catch the \nAdColony\n events so that you can perform operations such as providing player rewards for watching the video.\n\n\n\n\nCreate a listener (demonstrated by logging events):\n\n\n\n\n/**\n * The structure of data\n * data.name : name of the ad (in sdkbox_config.json)\n * data.zoneID : the zoneID of the ad\n * data.shown : indicates wether the ad gets shown or closed by user\n * data.iapEnabled : indicating whether or not the associated ad is an IAP\n * data.iapProductID : product identifier for the associated ad's IAP\n * data.iapQuantity : he number of items the user wishes to purchase\n * data.iapEngagementType : indicating the IAP engagement mechanism\n */\n\nsdkbox.PluginAdColony.setListener({\n        onAdColonyChange : function (data, available) {\n                // Called when AdColony finish loading\n        },\n        onAdColonyReward : function (data, currencyName, amount, success) {\n                // Called when AdColony v4vc ad finish playing\n        },\n        onAdColonyStarted : function (data) {\n                // Called when ad starts playing\n        },\n        onAdColonyFinished : function (data) {\n                // Called when an ad finish displaying\n        }\n});\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginAdColony.zoneStatusForZone(zoneID);\n\n\n\n\n\n\nreturns the status for the specified zone. Use this to pre-load a zone.\n\n\n\n\nsdkbox.PluginAdColony.isVirtualCurrencyRewardAvailableForZone(zoneID);\n\n\n\n\n\n\ncheck if this zone offers a virtual currency reward.\n\n\n\n\nsdkbox.PluginAdColony.show(name);\n\n\n\n\n\n\nplay video ad using provided \nzone name\n that was specified in \nsdkbox_config.json\n.\n\n\n\n\nsdkbox.PluginAdColony.getStatus(name);\n\n\n\n\n\n\nCheck the availability of the AdColony ads by name\n\n\n\n\nsdkbox.PluginAdColony.setListener(listener);\n\n\n\n\n\n\nset a listener to listen for event changes.\n\n\n\n\nsdkbox.PluginAdColony.removeListener();\n\n\n\n\n\n\nremove the event listener.\n\n\n\n\nsdkbox.PluginAdColony.getVirtualCurrencyRewardAmountForZone(zoneID);\n\n\n\n\n\n\nis there a virtual currency reward available to the user today for passed in zone.\n\n\n\n\nsdkbox.PluginAdColony.init();\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nsdkbox.PluginAdColony.videoAdCurrentlyRunning();\n\n\n\n\n\n\nis there a video currently showing?\n\n\n\n\nsdkbox.PluginAdColony.turnAllAdsOff();\n\n\n\n\n\n\nturn off all ads.\n\n\n\n\nsdkbox.PluginAdColony.getVideoCreditBalance(currencyName);\n\n\n\n\n\n\nget video credit balance for passed in currency name.\n\n\n\n\nsdkbox.PluginAdColony.getVideosPerReward(currencyName);\n\n\n\n\n\n\nare there multiple videos to watch per reward? Get the number of them.\n\n\n\n\nsdkbox.PluginAdColony.getVirtualCurrencyNameForZone(zoneID);\n\n\n\n\n\n\nget virtual currency name for passed in zone.\n\n\n\n\nsdkbox.PluginAdColony.getVirtualCurrencyRewardsAvailableTodayForZone(zoneID);\n\n\n\n\n\n\nis there a virtual currency reward available to the user today for passed in\nzone.\n\n\n\n\nsdkbox.PluginAdColony.cancelAd();\n\n\n\n\n\n\nstop the currently showing ad.\n\n\n\n\nListeners\n\n\n/**\n * The structure of data\n * data.name : name of the ad (in sdkbox_config.json)\n * data.zoneID : the zoneID of the ad\n * data.shown : indicates wether the ad gets shown or closed by user\n * data.iapEnabled : indicating whether or not the associated ad is an IAP\n * data.iapProductID : product identifier for the associated ad's IAP\n * data.iapQuantity : he number of items the user wishes to purchase\n * data.iapEngagementType : indicating the IAP engagement mechanism\n *\n * avail = bool\n */\n\n\n\n\nonAdColonyChange(data, available);\n\n\n\n\n\n\ncalled when AdColony is finished loading.\n\n\n\n\nonAdColonyReward(data, currencyName, amount, success);\n\n\n\n\n\n\nreward was received.\n\n\n\n\nonAdColonyStarted(data);\n\n\n\n\n\n\nshowing an ad has started.\n\n\n\n\nonAdColonyFinished(data);\n\n\n\n\n\n\nshowing an ad has finished.", 
            "title": "js"
        }, 
        {
            "location": "/plugins/adcolony/v2-js/#adcolony", 
            "text": "", 
            "title": "AdColony"
        }, 
        {
            "location": "/plugins/adcolony/v2-js/#integration", 
            "text": "Use the following command to install the SDKBOX AdColony plugin, Make sure you setup SDKBOX installer correctly.  sdkbox import adcolony", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/adcolony/v2-js/#extra-steps", 
            "text": "Modify  YourGameName .java   Modify  proj.android/src/ package identifier / YourGameName .java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify the class to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . Example of what this might look like for you:   protected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }  Proguard (release, optional)   Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   Edit the file you specified to include the following:   -dontwarn android.webkit.**  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Extra steps"
        }, 
        {
            "location": "/plugins/adcolony/v2-js/#configuration", 
            "text": "SDKBOX Installer will automatically inject a sample configuration to your  res/sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the AdColony configuration, you need to replace  app id  and  zone id  items with your specific  AdColony  account information.  AdColony :{\n     id : app id ,\n     debug :true,\n     ads :{\n         video :{\n             zone :  zone id ,\n             v4vc : false\n        },\n         v4vc :{\n             zone :  zone id ,\n             v4vc : true,\n             pre_popup  : true,\n             post_popup : true\n        }\n    }\n}", 
            "title": "Configuration"
        }, 
        {
            "location": "/plugins/adcolony/v2-js/#usage", 
            "text": "Initialize AdColony   Initialize the plugin by calling  init()  where appropriate in your code. We\nrecommend to do this in the  app.js . Example:   sdkbox.PluginAdColony.init();   Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  to include the following headers:   #include  PluginAdColonyJS.hpp    Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  make sure to call:   sc- addRegisterCallback(register_all_PluginAdColonyJS);  This registers the Javascript callbacks.  Showing Ads  Display an ad wherever you want from your code, by specifying ad type:  sdkbox.PluginAdColony.show( video );  or:  sdkbox.PluginAdColony.show( v4vc );  Catch AdColony events (optional)  This allows you to catch the  AdColony  events so that you can perform operations such as providing player rewards for watching the video.   Create a listener (demonstrated by logging events):   /**\n * The structure of data\n * data.name : name of the ad (in sdkbox_config.json)\n * data.zoneID : the zoneID of the ad\n * data.shown : indicates wether the ad gets shown or closed by user\n * data.iapEnabled : indicating whether or not the associated ad is an IAP\n * data.iapProductID : product identifier for the associated ad's IAP\n * data.iapQuantity : he number of items the user wishes to purchase\n * data.iapEngagementType : indicating the IAP engagement mechanism\n */\n\nsdkbox.PluginAdColony.setListener({\n        onAdColonyChange : function (data, available) {\n                // Called when AdColony finish loading\n        },\n        onAdColonyReward : function (data, currencyName, amount, success) {\n                // Called when AdColony v4vc ad finish playing\n        },\n        onAdColonyStarted : function (data) {\n                // Called when ad starts playing\n        },\n        onAdColonyFinished : function (data) {\n                // Called when an ad finish displaying\n        }\n});", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/adcolony/v2-js/#api-reference", 
            "text": "Methods  sdkbox.PluginAdColony.zoneStatusForZone(zoneID);   returns the status for the specified zone. Use this to pre-load a zone.   sdkbox.PluginAdColony.isVirtualCurrencyRewardAvailableForZone(zoneID);   check if this zone offers a virtual currency reward.   sdkbox.PluginAdColony.show(name);   play video ad using provided  zone name  that was specified in  sdkbox_config.json .   sdkbox.PluginAdColony.getStatus(name);   Check the availability of the AdColony ads by name   sdkbox.PluginAdColony.setListener(listener);   set a listener to listen for event changes.   sdkbox.PluginAdColony.removeListener();   remove the event listener.   sdkbox.PluginAdColony.getVirtualCurrencyRewardAmountForZone(zoneID);   is there a virtual currency reward available to the user today for passed in zone.   sdkbox.PluginAdColony.init();   initialize the plugin instance.   sdkbox.PluginAdColony.videoAdCurrentlyRunning();   is there a video currently showing?   sdkbox.PluginAdColony.turnAllAdsOff();   turn off all ads.   sdkbox.PluginAdColony.getVideoCreditBalance(currencyName);   get video credit balance for passed in currency name.   sdkbox.PluginAdColony.getVideosPerReward(currencyName);   are there multiple videos to watch per reward? Get the number of them.   sdkbox.PluginAdColony.getVirtualCurrencyNameForZone(zoneID);   get virtual currency name for passed in zone.   sdkbox.PluginAdColony.getVirtualCurrencyRewardsAvailableTodayForZone(zoneID);   is there a virtual currency reward available to the user today for passed in\nzone.   sdkbox.PluginAdColony.cancelAd();   stop the currently showing ad.   Listeners  /**\n * The structure of data\n * data.name : name of the ad (in sdkbox_config.json)\n * data.zoneID : the zoneID of the ad\n * data.shown : indicates wether the ad gets shown or closed by user\n * data.iapEnabled : indicating whether or not the associated ad is an IAP\n * data.iapProductID : product identifier for the associated ad's IAP\n * data.iapQuantity : he number of items the user wishes to purchase\n * data.iapEngagementType : indicating the IAP engagement mechanism\n *\n * avail = bool\n */  onAdColonyChange(data, available);   called when AdColony is finished loading.   onAdColonyReward(data, currencyName, amount, success);   reward was received.   onAdColonyStarted(data);   showing an ad has started.   onAdColonyFinished(data);   showing an ad has finished.", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/adcolony/v2-lua/", 
            "text": "AdColony\n\n\nIntegration\n\n\nUse the following command to install the SDKBOX AdColony plugin, Make sure you setup SDKBOX installer correctly.\n\n\nsdkbox import adcolony\n\n\n\n\nExtra steps\n\n\nModify \nYourGameName\n.java\n\n\n\n\nModify \nproj.android/src/\npackage identifier\n/\nYourGameName\n.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify the class to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. Example of what this might look like for you:\n\n\n\n\nprotected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (release, optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n-dontwarn android.webkit.**\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.\n\n\nConfiguration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nres/sdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the AdColony configuration, you need to replace \napp id\n and \nzone id\n items with your specific \nAdColony\n account information.\n\n\nAdColony\n:{\n    \nid\n:\napp id\n,\n    \ndebug\n:true,\n    \nads\n:{\n        \nvideo\n:{\n            \nzone\n: \nzone id\n,\n            \nv4vc\n: false\n        },\n        \nv4vc\n:{\n            \nzone\n: \nzone id\n,\n            \nv4vc\n: true,\n            \npre_popup\n : true,\n            \npost_popup\n: true\n        }\n    }\n}\n\n\n\n\nUsage\n\n\nModify \nAppDelegate.cpp\n\n\n\n\nModify \nAppDelegate.cpp\n to include the following headers:\n\n\n\n\n#include \nPluginAdColonyLua.hpp\n\n#include \nPluginAdColonyLuaHelper.hpp\n\n\n\n\n\n\n\nSecond, We need to register the plugin with Lua. This is done by making a call to \nregister_all_PluginAdColonyLua(\nlua_State*\n);\n. It is important to note that this call must be made after \nlua_State *tolua_s = pStack-\ngetLuaState();\n and before \ntolua_extensions_ccb_open(tolua_s);\n. Here is an example of what this might look like for you:\n\n\n\n\nlua_State *tolua_s = pStack-\ngetLuaState();\nregister_all_PluginAdColonyLua(tolua_s);\nregister_all_PluginAdColonyLua_helper(tolua_s);\ntolua_extensions_ccb_open(tolua_s);\n\n\n\n\nInitialize AdColony\n\n\nModify your Lua code to \ninit()\n the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.\n\n\nsdkbox.PluginAdColony:init();\n\n\n\n\nShowing Ads\n\n\nDisplay an ad where ever you want from your code:\n\n\nsdkbox.PluginAdColony:show(\nAD_NAME\n);\n\n\n\n\nCatch AdColony events (optional)\n\n\nThis allows you to catch the \nAdColony\n events so that you can perform operations such as providing player rewards for watching the video.\n\n\n\n\nCreate a listener (demonstrated by logging events):\n\n\n\n\nsdkbox.PluginAdColony:setListener(function(args)\n    if \nonAdColonyChange\n == args.name then\n        local info = args.info  -- sdkbox::AdColonyAdInfo\n        local available = args.available -- boolean\n                dump(info, \nonAdColonyChange:\n)\n        print(\navailable:\n, available)\n    elseif \nonAdColonyReward\n ==  args.name then\n        local info = args.info  -- sdkbox::AdColonyAdInfo\n        local currencyName = args.currencyName -- string\n        local amount = args.amount -- int\n        local success = args.success -- boolean\n                dump(info, \nonAdColonyReward:\n)\n        print(\ncurrencyName:\n, currencyName)\n        print(\namount:\n, amount)\n        print(\nsuccess:\n, success)\n    elseif \nonAdColonyStarted\n ==  args.name then\n        local info = args.info  -- sdkbox::AdColonyAdInfo\n                dump(info, \nonAdColonyStarted:\n)\n    elseif \nonAdColonyFinished\n ==  args.name then\n        local info = args.info  -- sdkbox::AdColonyAdInfo\n                dump(info, \nonAdColonyFinished:\n)\n    end\nend)\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginAdColony:zoneStatusForZone(zoneID);\n\n\n\n\n\n\nreturns the status for the specified zone. Use this to pre-load a zone.\n\n\n\n\nsdkbox.PluginAdColony:isVirtualCurrencyRewardAvailableForZone(zoneID);\n\n\n\n\n\n\ncheck if this zone offers a virtual currency reward.\n\n\n\n\nsdkbox.PluginAdColony:show(name);\n\n\n\n\n\n\nplay video ad using provided \nzone name\n that was specified in \nsdkbox_config.json\n.\n\n\n\n\nsdkbox.PluginAdColony:getStatus(name);\n\n\n\n\n\n\nCheck the availability of the AdColony ads by name\n\n\n\n\nsdkbox.PluginAdColony:getVirtualCurrencyRewardAmountForZone(zoneID);\n\n\n\n\n\n\nis there a virtual currency reward available to the user today for passed in\nzone.\n\n\n\n\nsdkbox.PluginAdColony:init();\n\n\n\n\n\n\ninitialize the instance.\n\n\n\n\nsdkbox.PluginAdColony:videoAdCurrentlyRunning();\n\n\n\n\n\n\nis there a video currently showing?\n\n\n\n\nsdkbox.PluginAdColony:turnAllAdsOff();\n\n\n\n\n\n\nturn off all ads.\n\n\n\n\nsdkbox.PluginAdColony:getVideoCreditBalance(currencyName);\n\n\n\n\n\n\nget video credit balance for passed in currency name.\n\n\n\n\nsdkbox.PluginAdColony:getVideosPerReward(currencyName);\n\n\n\n\n\n\nare there multiple videos to watch per reward? Get the number of them.\n\n\n\n\nsdkbox.PluginAdColony:getVirtualCurrencyNameForZone(zoneID);\n\n\n\n\n\n\nget virtual currency name for passed in zone.\n\n\n\n\nsdkbox.PluginAdColony:getVirtualCurrencyRewardsAvailableTodayForZone(zoneID);\n\n\n\n\n\n\nis there a virtual currency reward available to the user today for passed in\nzone.\n\n\n\n\nsdkbox.PluginAdColony:cancelAd();\n\n\n\n\n\n\nstop the currently showing ad.\n\n\n\n\nListeners\n\n\n/**\n * The structure of data\n * data.name : name of the ad (in sdkbox_config.json)\n * data.zoneID : the zoneID of the ad\n * data.shown : indicates wether the ad gets shown or closed by user\n * data.iapEnabled : indicating whether or not the associated ad is an IAP\n * data.iapProductID : product identifier for the associated ad's IAP\n * data.iapQuantity : he number of items the user wishes to purchase\n * data.iapEngagementType : indicating the IAP engagement mechanism\n *\n * avail = bool\n */\n\n\n\n\nonAdColonyChange(data, available);\n\n\n\n\n\n\ncalled when AdColony is finished loading.\n\n\n\n\nonAdColonyReward(data, currencyName, amount, success);\n\n\n\n\n\n\nreward was received.\n\n\n\n\nonAdColonyStarted(data);\n\n\n\n\n\n\nshowing an ad has started.\n\n\n\n\nonAdColonyFinished(data);\n\n\n\n\n\n\nshowing an ad has finished.", 
            "title": "lua"
        }, 
        {
            "location": "/plugins/adcolony/v2-lua/#adcolony", 
            "text": "", 
            "title": "AdColony"
        }, 
        {
            "location": "/plugins/adcolony/v2-lua/#integration", 
            "text": "Use the following command to install the SDKBOX AdColony plugin, Make sure you setup SDKBOX installer correctly.  sdkbox import adcolony", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/adcolony/v2-lua/#extra-steps", 
            "text": "Modify  YourGameName .java   Modify  proj.android/src/ package identifier / YourGameName .java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify the class to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . Example of what this might look like for you:   protected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }  Proguard (release, optional)   Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   Edit the file you specified to include the following:   -dontwarn android.webkit.**  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Extra steps"
        }, 
        {
            "location": "/plugins/adcolony/v2-lua/#configuration", 
            "text": "SDKBOX Installer will automatically inject a sample configuration to your  res/sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the AdColony configuration, you need to replace  app id  and  zone id  items with your specific  AdColony  account information.  AdColony :{\n     id : app id ,\n     debug :true,\n     ads :{\n         video :{\n             zone :  zone id ,\n             v4vc : false\n        },\n         v4vc :{\n             zone :  zone id ,\n             v4vc : true,\n             pre_popup  : true,\n             post_popup : true\n        }\n    }\n}", 
            "title": "Configuration"
        }, 
        {
            "location": "/plugins/adcolony/v2-lua/#usage", 
            "text": "Modify  AppDelegate.cpp   Modify  AppDelegate.cpp  to include the following headers:   #include  PluginAdColonyLua.hpp \n#include  PluginAdColonyLuaHelper.hpp    Second, We need to register the plugin with Lua. This is done by making a call to  register_all_PluginAdColonyLua( lua_State* ); . It is important to note that this call must be made after  lua_State *tolua_s = pStack- getLuaState();  and before  tolua_extensions_ccb_open(tolua_s); . Here is an example of what this might look like for you:   lua_State *tolua_s = pStack- getLuaState();\nregister_all_PluginAdColonyLua(tolua_s);\nregister_all_PluginAdColonyLua_helper(tolua_s);\ntolua_extensions_ccb_open(tolua_s);  Initialize AdColony  Modify your Lua code to  init()  the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.  sdkbox.PluginAdColony:init();  Showing Ads  Display an ad where ever you want from your code:  sdkbox.PluginAdColony:show( AD_NAME );  Catch AdColony events (optional)  This allows you to catch the  AdColony  events so that you can perform operations such as providing player rewards for watching the video.   Create a listener (demonstrated by logging events):   sdkbox.PluginAdColony:setListener(function(args)\n    if  onAdColonyChange  == args.name then\n        local info = args.info  -- sdkbox::AdColonyAdInfo\n        local available = args.available -- boolean\n                dump(info,  onAdColonyChange: )\n        print( available: , available)\n    elseif  onAdColonyReward  ==  args.name then\n        local info = args.info  -- sdkbox::AdColonyAdInfo\n        local currencyName = args.currencyName -- string\n        local amount = args.amount -- int\n        local success = args.success -- boolean\n                dump(info,  onAdColonyReward: )\n        print( currencyName: , currencyName)\n        print( amount: , amount)\n        print( success: , success)\n    elseif  onAdColonyStarted  ==  args.name then\n        local info = args.info  -- sdkbox::AdColonyAdInfo\n                dump(info,  onAdColonyStarted: )\n    elseif  onAdColonyFinished  ==  args.name then\n        local info = args.info  -- sdkbox::AdColonyAdInfo\n                dump(info,  onAdColonyFinished: )\n    end\nend)", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/adcolony/v2-lua/#api-reference", 
            "text": "Methods  sdkbox.PluginAdColony:zoneStatusForZone(zoneID);   returns the status for the specified zone. Use this to pre-load a zone.   sdkbox.PluginAdColony:isVirtualCurrencyRewardAvailableForZone(zoneID);   check if this zone offers a virtual currency reward.   sdkbox.PluginAdColony:show(name);   play video ad using provided  zone name  that was specified in  sdkbox_config.json .   sdkbox.PluginAdColony:getStatus(name);   Check the availability of the AdColony ads by name   sdkbox.PluginAdColony:getVirtualCurrencyRewardAmountForZone(zoneID);   is there a virtual currency reward available to the user today for passed in\nzone.   sdkbox.PluginAdColony:init();   initialize the instance.   sdkbox.PluginAdColony:videoAdCurrentlyRunning();   is there a video currently showing?   sdkbox.PluginAdColony:turnAllAdsOff();   turn off all ads.   sdkbox.PluginAdColony:getVideoCreditBalance(currencyName);   get video credit balance for passed in currency name.   sdkbox.PluginAdColony:getVideosPerReward(currencyName);   are there multiple videos to watch per reward? Get the number of them.   sdkbox.PluginAdColony:getVirtualCurrencyNameForZone(zoneID);   get virtual currency name for passed in zone.   sdkbox.PluginAdColony:getVirtualCurrencyRewardsAvailableTodayForZone(zoneID);   is there a virtual currency reward available to the user today for passed in\nzone.   sdkbox.PluginAdColony:cancelAd();   stop the currently showing ad.   Listeners  /**\n * The structure of data\n * data.name : name of the ad (in sdkbox_config.json)\n * data.zoneID : the zoneID of the ad\n * data.shown : indicates wether the ad gets shown or closed by user\n * data.iapEnabled : indicating whether or not the associated ad is an IAP\n * data.iapProductID : product identifier for the associated ad's IAP\n * data.iapQuantity : he number of items the user wishes to purchase\n * data.iapEngagementType : indicating the IAP engagement mechanism\n *\n * avail = bool\n */  onAdColonyChange(data, available);   called when AdColony is finished loading.   onAdColonyReward(data, currencyName, amount, success);   reward was received.   onAdColonyStarted(data);   showing an ad has started.   onAdColonyFinished(data);   showing an ad has finished.", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/chartboost/v3-cpp/", 
            "text": "Chartboost\n\n\nIntegration\n\n\nUse the following command to install the SDKBOX Chartboost plugin, Make sure you setup SDKBOX installer correctly.\n\n\nsdkbox import chartboost\n\n\n\n\nExtra steps\n\n\nModify \nCocos2dxActivity.java\n\n\n\n\n\n\nIf you're using cocos2d-x from source, assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java\n\n\n\n\n\n\nIf you're using the prebuilt cocos2d-x libraries assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n./src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nNote:\n When using Cocos2d-x from source, different versions have \nCocos2dxActivity.java\n in a different location. One way to find the location is to look in \nproj.android/project.properties\n. Example:\n\n\nandroid.library.reference.1=../../cocos2d-x/cocos/platform/android/java\n\n\n\n\nIn this case, \nCocos2dxActivity.java\n should be located at:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nModify \nCocos2dxActivity.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify \nCocos2dxActivity\n to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. The placement of this call is important. It must be done after the call to \nonLoadNativeLibraries();\n. Example:\n\n\n\n\nonLoadNativeLibraries();\nSDKBox.init(this);\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (release, optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n-keep class com.chartboost.** { *; }\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.\n\n\nConfiguration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nsdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the Chartboost configuration, you need to replace \nCHARTBOOST ID\n and \nCHARTBOOST SIGNATURE\n items with your specific \nChartboost\n account information.\n\n\nChartboost\n:{\n    \nid\n:\nCHARTBOOST ID\n,\n    \nsignature\n:\nCHARTBOOST SIGNATURE\n,\n    \nads\n:{\n        \nDefault\n:{\n            \ntype\n:\ninterstitial\n\n        },\n        \nLevel Complete\n:{\n            \ntype\n:\nrewarded_video\n\n        },\n        \nMoreApp\n:{\n            \ntype\n:\nmore_app\n\n        }\n    }\n}\n\n\n\n\nUsage\n\n\nInitialize Chartboost\n\n\nInitialize the plugin where appropriate in your code. We recommend to do this in the \nAppDelegate::applicationDidFinishLaunching()\n or \nAppController:didFinishLaunchingWithOptions()\n. Make sure to include the appropriate headers:\n\n\n#include \nPluginChartboost/PluginChartboost.h\n\nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginChartboost::init();\n}\n\n\n\n\nShowing Ads\n\n\nDisplay an ad where ever you want from your code:\n\n\n// To use the Chartboost predefined locations\nsdkbox::PluginChartboost::show(sdkbox::CB_Location_Default);\n// To use customized location\nsdkbox::PluginChartboost::show(\nyour_ad_name\n);\n\n\n\n\nCatch Chartboost events (optional)\n\n\nThis allows you to catch the \nChartboost\n events so that you can perform operations such as providing player rewards for watching the video.\n\n\n\n\nAllow your class to extend \nsdkbox::ChartboostListener\n\n\n\n\n#include \nPluginChartboost/PluginChartboost.h\n\nclass MyClass : public sdkbox::ChartboostListener\n{\npublic:\n      void onChartboostCached(const std::string\n name);\n      void onChartboostShouldDisplay(const std::string\n name);\n      void onChartboostDisplay(const std::string\n name);\n      void onChartboostDismiss(const std::string\n name);\n      void onChartboostClose(const std::string\n name);\n      void onChartboostClick(const std::string\n name);\n      void onChartboostReward(const std::string\n name, int reward);\n      void onChartboostPauseClickForConfirmation();\n};\n\n\n\n\n\n\nCreate a \nlistener\n that handles callbacks:\n\n\n\n\nsdkbox::PluginChartboost::setListener(this);\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nstatic void init();\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nstatic void show(const std::string\n name);\n\n\n\n\n\n\nshow ad by specifying ad name.\n\n\n\n\nstatic void setListener(ChartboostListener* listener);\n\n\n\n\n\n\ncreates the an optional listener.\n\n\n\n\nstatic void removeListener();\n\n\n\n\n\n\nremoved the listener.\n\n\n\n\nstatic bool isAnyViewVisible();\n\n\n\n\n\n\ncheck to see if any views are visible.\n\n\n\n\nstatic bool isAvailable(const std::string\n name);\n\n\n\n\n\n\nis the specified ad available?\n\n\n\n\nstatic void setAutoCacheAds(bool shouldCache);\n\n\n\n\n\n\nset to enable and disable the auto cache feature (Enabled by default).\n\n\n\n\nstatic bool getAutoCacheAds();\n\n\n\n\n\n\nget the current auto cache behavior (Enabled by default).\n\n\n\n\nstatic void closeImpression();\n\n\n\n\n\n\nclose any visible Chartboost impressions (interstitials, more apps, rewarded\nvideo, etc..) and the loading view (if visible).\n\n\n\n\nstatic void setStatusBarBehavior(CB_StatusBarBehavior behavior);\n\n\n\n\n\n\nset to control how the fullscreen ad units should interact with the status bar. (CBStatusBarBehaviorIgnore by default).\n\n\n\n\nstatic void didPassAgeGate(bool pass);\n\n\n\n\n\n\nconfirm if an age gate passed or failed. When specified Chartboost will wait for\n this call before showing the IOS App Store.\n\n\n\n\nstatic void setShouldPauseClickForConfirmation(bool shouldPause);\n\n\n\n\n\n\ndecide if Chartboost SDK should block for an age gate.\n\n\n\n\nstatic bool handleOpenURL(const std::string\n url, const std::string\n sourceApp);\n\n\n\n\n\n\nopens a \"deep link\" URL for a Chartboost Custom Scheme.\n\n\n\n\nstatic void setCustomID(const std::string\n customID);\n\n\n\n\n\n\nset a custom identifier to send in the POST body for all Chartboost API server\nrequests.\n\n\n\n\nstatic std::string getCustomID();\n\n\n\n\n\n\nget the current custom identifier being sent in the POST body for all Chartboost\nAPI server requests.\n\n\n\n\nstatic void setShouldRequestInterstitialsInFirstSession(bool shouldRequest);\n\n\n\n\n\n\ndecide if Chartboost SDK should show interstitials in the first session.\n\n\n\n\nstatic void setShouldDisplayLoadingViewForMoreApps(bool shouldDisplay);\n\n\n\n\n\n\ndecide if Chartboost SDK should show a loading view while preparing to display\nthe \"more applications\" UI.\n\n\n\n\nstatic void setShouldPrefetchVideoContent(bool shouldPrefetch);\n\n\n\n\n\n\ndecide if Chartboost SDK will attempt to fetch videos from the Chartboost API\nservers.", 
            "title": "c++"
        }, 
        {
            "location": "/plugins/chartboost/v3-cpp/#chartboost", 
            "text": "", 
            "title": "Chartboost"
        }, 
        {
            "location": "/plugins/chartboost/v3-cpp/#integration", 
            "text": "Use the following command to install the SDKBOX Chartboost plugin, Make sure you setup SDKBOX installer correctly.  sdkbox import chartboost", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/chartboost/v3-cpp/#extra-steps", 
            "text": "Modify  Cocos2dxActivity.java    If you're using cocos2d-x from source, assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java    If you're using the prebuilt cocos2d-x libraries assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ./src/org/cocos2dx/lib/Cocos2dxActivity.java    Note:  When using Cocos2d-x from source, different versions have  Cocos2dxActivity.java  in a different location. One way to find the location is to look in  proj.android/project.properties . Example:  android.library.reference.1=../../cocos2d-x/cocos/platform/android/java  In this case,  Cocos2dxActivity.java  should be located at:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java   Modify  Cocos2dxActivity.java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify  Cocos2dxActivity  to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . The placement of this call is important. It must be done after the call to  onLoadNativeLibraries(); . Example:   onLoadNativeLibraries();\nSDKBox.init(this);    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }  Proguard (release, optional)   Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   Edit the file you specified to include the following:   -keep class com.chartboost.** { *; }  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Extra steps"
        }, 
        {
            "location": "/plugins/chartboost/v3-cpp/#configuration", 
            "text": "SDKBOX Installer will automatically inject a sample configuration to your  sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the Chartboost configuration, you need to replace  CHARTBOOST ID  and  CHARTBOOST SIGNATURE  items with your specific  Chartboost  account information.  Chartboost :{\n     id : CHARTBOOST ID ,\n     signature : CHARTBOOST SIGNATURE ,\n     ads :{\n         Default :{\n             type : interstitial \n        },\n         Level Complete :{\n             type : rewarded_video \n        },\n         MoreApp :{\n             type : more_app \n        }\n    }\n}", 
            "title": "Configuration"
        }, 
        {
            "location": "/plugins/chartboost/v3-cpp/#usage", 
            "text": "Initialize Chartboost  Initialize the plugin where appropriate in your code. We recommend to do this in the  AppDelegate::applicationDidFinishLaunching()  or  AppController:didFinishLaunchingWithOptions() . Make sure to include the appropriate headers:  #include  PluginChartboost/PluginChartboost.h \nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginChartboost::init();\n}  Showing Ads  Display an ad where ever you want from your code:  // To use the Chartboost predefined locations\nsdkbox::PluginChartboost::show(sdkbox::CB_Location_Default);\n// To use customized location\nsdkbox::PluginChartboost::show( your_ad_name );  Catch Chartboost events (optional)  This allows you to catch the  Chartboost  events so that you can perform operations such as providing player rewards for watching the video.   Allow your class to extend  sdkbox::ChartboostListener   #include  PluginChartboost/PluginChartboost.h \nclass MyClass : public sdkbox::ChartboostListener\n{\npublic:\n      void onChartboostCached(const std::string  name);\n      void onChartboostShouldDisplay(const std::string  name);\n      void onChartboostDisplay(const std::string  name);\n      void onChartboostDismiss(const std::string  name);\n      void onChartboostClose(const std::string  name);\n      void onChartboostClick(const std::string  name);\n      void onChartboostReward(const std::string  name, int reward);\n      void onChartboostPauseClickForConfirmation();\n};   Create a  listener  that handles callbacks:   sdkbox::PluginChartboost::setListener(this);", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/chartboost/v3-cpp/#api-reference", 
            "text": "Methods  static void init();   initialize the plugin instance.   static void show(const std::string  name);   show ad by specifying ad name.   static void setListener(ChartboostListener* listener);   creates the an optional listener.   static void removeListener();   removed the listener.   static bool isAnyViewVisible();   check to see if any views are visible.   static bool isAvailable(const std::string  name);   is the specified ad available?   static void setAutoCacheAds(bool shouldCache);   set to enable and disable the auto cache feature (Enabled by default).   static bool getAutoCacheAds();   get the current auto cache behavior (Enabled by default).   static void closeImpression();   close any visible Chartboost impressions (interstitials, more apps, rewarded\nvideo, etc..) and the loading view (if visible).   static void setStatusBarBehavior(CB_StatusBarBehavior behavior);   set to control how the fullscreen ad units should interact with the status bar. (CBStatusBarBehaviorIgnore by default).   static void didPassAgeGate(bool pass);   confirm if an age gate passed or failed. When specified Chartboost will wait for\n this call before showing the IOS App Store.   static void setShouldPauseClickForConfirmation(bool shouldPause);   decide if Chartboost SDK should block for an age gate.   static bool handleOpenURL(const std::string  url, const std::string  sourceApp);   opens a \"deep link\" URL for a Chartboost Custom Scheme.   static void setCustomID(const std::string  customID);   set a custom identifier to send in the POST body for all Chartboost API server\nrequests.   static std::string getCustomID();   get the current custom identifier being sent in the POST body for all Chartboost\nAPI server requests.   static void setShouldRequestInterstitialsInFirstSession(bool shouldRequest);   decide if Chartboost SDK should show interstitials in the first session.   static void setShouldDisplayLoadingViewForMoreApps(bool shouldDisplay);   decide if Chartboost SDK should show a loading view while preparing to display\nthe \"more applications\" UI.   static void setShouldPrefetchVideoContent(bool shouldPrefetch);   decide if Chartboost SDK will attempt to fetch videos from the Chartboost API\nservers.", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/chartboost/v3-js/", 
            "text": "Chartboost\n\n\nIntegration\n\n\nUse the following command to install the SDKBOX Chartboost plugin, Make sure you setup SDKBOX installer correctly.\n\n\nsdkbox import chartboost\n\n\n\n\nExtra steps\n\n\nModify \nCocos2dxActivity.java\n\n\n\n\n\n\nIf you're using cocos2d-x from source, assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java\n\n\n\n\n\n\nIf you're using the prebuilt cocos2d-x libraries assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n./src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nNote:\n When using Cocos2d-x from source, different versions have \nCocos2dxActivity.java\n in a different location. One way to find the location is to look in \nproj.android/project.properties\n. Example:\n\n\nandroid.library.reference.1=../../cocos2d-x/cocos/platform/android/java\n\n\n\n\nIn this case, \nCocos2dxActivity.java\n should be located at:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nModify \nCocos2dxActivity.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify \nCocos2dxActivity\n to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. The placement of this call is important. It must be done after the call to \nonLoadNativeLibraries();\n. Example:\n\n\n\n\nonLoadNativeLibraries();\nSDKBox.init(this);\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (release, optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n-keep class com.chartboost.** { *; }\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.\n\n\nConfiguration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nsdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the Chartboost configuration, you need to replace \nCHARTBOOST ID\n and \nCHARTBOOST SIGNATURE\n items with your specific \nChartboost\n account information.\n\n\nChartboost\n:{\n    \nid\n:\nCHARTBOOST ID\n,\n    \nsignature\n:\nCHARTBOOST SIGNATURE\n,\n    \nads\n:{\n        \nDefault\n:{\n            \ntype\n:\ninterstitial\n\n        },\n        \nLevel Complete\n:{\n            \ntype\n:\nrewarded_video\n\n        },\n        \nMoreApp\n:{\n            \ntype\n:\nmore_app\n\n        }\n    }\n}\n\n\n\n\nUsage\n\n\nInitialize Chartboost\n\n\n\n\nInitialize the plugin by calling \ninit()\n where appropriate in your code. We\nrecommend to do this in the \napp.js\n. Example:\n\n\n\n\nsdkbox.PluginChartboost.init();\n\n\n\n\n\n\nModify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n to include the following headers:\n\n\n\n\n#include \nPluginChartboostJS.hpp\n\n#include \nPluginChartboostJSHelper.h\n\n\n\n\n\n\n\nModify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n make sure to call:\n\n\n\n\nsc-\naddRegisterCallback(register_all_PluginChartboostJS);\nsc-\naddRegisterCallback(register_PluginChartboostJs_helper);\n\n\n\n\nThis registers the Javascript callbacks.\n\n\nShowing Ads\n\n\nDisplay an ad where ever you want from your code:\n\n\n// To use the Chartboost predefined locations\nsdkbox.PluginChartboost.show(\nDefault\n);\n// To use customized location\nsdkbox.PluginChartboost.show(\nyour_ad_name\n);\n\n\n\n\nCatch Chartboost events (optional)\n\n\nThis allows you to catch the \nChartboost\n events so that you can perform operations such as providing player rewards for viewing ads.\n\n\n\n\nCreate a listener (demonstrated by logging events):\n\n\n\n\nsdkbox.PluginChartboost.setListener({\n    onChartboostCached : function (name) { cc.log(\nonChartboostCached \n + name) },\n    onChartboostShouldDisplay : function (name) { cc.log(\nonChartboostShouldDisplay \n + name) },\n    onChartboostDisplay : function (name) { cc.log(\nonChartboostDisplay \n + name) },\n    onChartboostDismiss : function (name) { cc.log(\nonChartboostDismiss \n + name) },\n    onChartboostClose : function (name) { cc.log(\nonChartboostClose \n + name) },\n    onChartboostClick : function (name) { cc.log(\nonChartboostClick \n + name) },\n    onChartboostReward : function (name, reward) { cc.log(\nonChartboostReward \n + name + \n reward \n + reward) },\n    onChartboostFailedToLoad : function (name, e) { cc.log(\nonChartboostFailedToLoad \n + name + \n load error \n + e) },\n    onChartboostFailToRecordClick : function (name, e) { cc.log(\nonChartboostFailToRecordClick \n + name + \n click error \n + e) },\n    onChartboostConfirmation : function () { cc.log(\nonChartboostConfirmation\n) },\n    onChartboostCompleteStore : function () { cc.log(\nonChartboostCompleteStore\n) },\n})\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginChartboost.init();\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nsdkbox.PluginChartboost.show(name);\n\n\n\n\n\n\nshow ad by specifying ad name.\n\n\n\n\nsdkbox.PluginChartboost.setListener(listener);\n\n\n\n\n\n\ncreates the an optional listener.\n\n\n\n\nsdkbox.PluginChartboost.removeListener();\n\n\n\n\n\n\nremoved the listener.\n\n\n\n\nsdkbox.PluginChartboost.isAnyViewVisible();\n\n\n\n\n\n\ncheck to see if any views are visible.\n\n\n\n\nsdkbox.PluginChartboost.isAvailable(name);\n\n\n\n\n\n\nis the specified ad available?\n\n\n\n\nsdkbox.PluginChartboost.setAutoCacheAds(shouldCache);\n\n\n\n\n\n\nset to enable and disable the auto cache feature (Enabled by default).\n\n\n\n\nsdkbox.PluginChartboost.getAutoCacheAds();\n\n\n\n\n\n\nget the current auto cache behavior (Enabled by default).\n\n\n\n\nsdkbox.PluginChartboost.closeImpression();\n\n\n\n\n\n\nclose any visible Chartboost impressions (interstitials, more apps, rewarded\nvideo, etc..) and the loading view (if visible).\n\n\n\n\nsdkbox.PluginChartboost.setStatusBarBehavior(behavior);\n\n\n\n\n\n\nset to control how the fullscreen ad units should interact with the status bar. (CBStatusBarBehaviorIgnore by default).\n\n\n\n\nsdkbox.PluginChartboost.didPassAgeGate(pass);\n\n\n\n\n\n\nconfirm if an age gate passed or failed. When specified Chartboost will wait for\n this call before showing the IOS App Store.\n\n\n\n\nsdkbox.PluginChartboost.setShouldPauseClickForConfirmation(shouldPause);\n\n\n\n\n\n\ndecide if Chartboost SDK should block for an age gate.\n\n\n\n\nsdkbox.PluginChartboost.handleOpenURL(url, sourceApp);\n\n\n\n\n\n\nopens a \"deep link\" URL for a Chartboost Custom Scheme.\n\n\n\n\nsdkbox.PluginChartboost.setCustomID(customID);\n\n\n\n\n\n\nset a custom identifier to send in the POST body for all Chartboost API server requests.\n\n\n\n\nsdkbox.PluginChartboost.getCustomID();\n\n\n\n\n\n\nget the current custom identifier being sent in the POST body for all Chartboost API server requests.\n\n\n\n\nsdkbox.PluginChartboost.setShouldRequestInterstitialsInFirstSession(shouldRequest);\n\n\n\n\n\n\ndecide if Chartboost SDK should show interstitials in the first session.\n\n\n\n\nsdkbox.PluginChartboost.setShouldDisplayLoadingViewForMoreApps(shouldDisplay);\n\n\n\n\n\n\ndecide if Chartboost SDK should show a loading view while preparing to display the \"more applications\" UI.\n\n\n\n\nsdkbox.PluginChartboost.setShouldPrefetchVideoContent(shouldPrefetch);\n\n\n\n\n\n\ndecide if Chartboost SDK will attempt to fetch videos from the Chartboost API servers.\n\n\n\n\nListeners\n\n\nonChartboostCached();\n\n\n\n\n\n\nthere is cached content\n\n\n\n\nonChartboostShouldDisplay();\n\n\n\n\n\n\nshould Chartboost display\n\n\n\n\nonChartboostDisplay();\n\n\n\n\n\n\nCharboost ad has displayed\n\n\n\n\nonChartboostDismiss();\n\n\n\n\n\n\nChartboost ad has been dismissed\n\n\n\n\nonChartboostClose();\n\n\n\n\n\n\nChartboost is not running\n\n\n\n\nonChartboostClick();\n\n\n\n\n\n\nChartboost ad was clicked on\n\n\n\n\nonChartboostReward();\n\n\n\n\n\n\nChartboost reward was given\n\n\n\n\nonChartboostFailedToLoad();\n\n\n\n\n\n\nChartboost failed to load\n\n\n\n\nonChartboostFailToRecordClick();\n\n\n\n\n\n\nChartboost failed to record click\n\n\n\n\nonChartboostConfirmation();\n\n\n\n\n\n\nChartboost confirmation\n\n\n\n\nonChartboostCompleteStore();\n\n\n\n\n\n\nChartboost complete store", 
            "title": "js"
        }, 
        {
            "location": "/plugins/chartboost/v3-js/#chartboost", 
            "text": "", 
            "title": "Chartboost"
        }, 
        {
            "location": "/plugins/chartboost/v3-js/#integration", 
            "text": "Use the following command to install the SDKBOX Chartboost plugin, Make sure you setup SDKBOX installer correctly.  sdkbox import chartboost", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/chartboost/v3-js/#extra-steps", 
            "text": "Modify  Cocos2dxActivity.java    If you're using cocos2d-x from source, assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java    If you're using the prebuilt cocos2d-x libraries assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ./src/org/cocos2dx/lib/Cocos2dxActivity.java    Note:  When using Cocos2d-x from source, different versions have  Cocos2dxActivity.java  in a different location. One way to find the location is to look in  proj.android/project.properties . Example:  android.library.reference.1=../../cocos2d-x/cocos/platform/android/java  In this case,  Cocos2dxActivity.java  should be located at:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java   Modify  Cocos2dxActivity.java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify  Cocos2dxActivity  to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . The placement of this call is important. It must be done after the call to  onLoadNativeLibraries(); . Example:   onLoadNativeLibraries();\nSDKBox.init(this);    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }  Proguard (release, optional)   Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   Edit the file you specified to include the following:   -keep class com.chartboost.** { *; }  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Extra steps"
        }, 
        {
            "location": "/plugins/chartboost/v3-js/#configuration", 
            "text": "SDKBOX Installer will automatically inject a sample configuration to your  sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the Chartboost configuration, you need to replace  CHARTBOOST ID  and  CHARTBOOST SIGNATURE  items with your specific  Chartboost  account information.  Chartboost :{\n     id : CHARTBOOST ID ,\n     signature : CHARTBOOST SIGNATURE ,\n     ads :{\n         Default :{\n             type : interstitial \n        },\n         Level Complete :{\n             type : rewarded_video \n        },\n         MoreApp :{\n             type : more_app \n        }\n    }\n}", 
            "title": "Configuration"
        }, 
        {
            "location": "/plugins/chartboost/v3-js/#usage", 
            "text": "Initialize Chartboost   Initialize the plugin by calling  init()  where appropriate in your code. We\nrecommend to do this in the  app.js . Example:   sdkbox.PluginChartboost.init();   Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  to include the following headers:   #include  PluginChartboostJS.hpp \n#include  PluginChartboostJSHelper.h    Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  make sure to call:   sc- addRegisterCallback(register_all_PluginChartboostJS);\nsc- addRegisterCallback(register_PluginChartboostJs_helper);  This registers the Javascript callbacks.  Showing Ads  Display an ad where ever you want from your code:  // To use the Chartboost predefined locations\nsdkbox.PluginChartboost.show( Default );\n// To use customized location\nsdkbox.PluginChartboost.show( your_ad_name );  Catch Chartboost events (optional)  This allows you to catch the  Chartboost  events so that you can perform operations such as providing player rewards for viewing ads.   Create a listener (demonstrated by logging events):   sdkbox.PluginChartboost.setListener({\n    onChartboostCached : function (name) { cc.log( onChartboostCached   + name) },\n    onChartboostShouldDisplay : function (name) { cc.log( onChartboostShouldDisplay   + name) },\n    onChartboostDisplay : function (name) { cc.log( onChartboostDisplay   + name) },\n    onChartboostDismiss : function (name) { cc.log( onChartboostDismiss   + name) },\n    onChartboostClose : function (name) { cc.log( onChartboostClose   + name) },\n    onChartboostClick : function (name) { cc.log( onChartboostClick   + name) },\n    onChartboostReward : function (name, reward) { cc.log( onChartboostReward   + name +   reward   + reward) },\n    onChartboostFailedToLoad : function (name, e) { cc.log( onChartboostFailedToLoad   + name +   load error   + e) },\n    onChartboostFailToRecordClick : function (name, e) { cc.log( onChartboostFailToRecordClick   + name +   click error   + e) },\n    onChartboostConfirmation : function () { cc.log( onChartboostConfirmation ) },\n    onChartboostCompleteStore : function () { cc.log( onChartboostCompleteStore ) },\n})", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/chartboost/v3-js/#api-reference", 
            "text": "Methods  sdkbox.PluginChartboost.init();   initialize the plugin instance.   sdkbox.PluginChartboost.show(name);   show ad by specifying ad name.   sdkbox.PluginChartboost.setListener(listener);   creates the an optional listener.   sdkbox.PluginChartboost.removeListener();   removed the listener.   sdkbox.PluginChartboost.isAnyViewVisible();   check to see if any views are visible.   sdkbox.PluginChartboost.isAvailable(name);   is the specified ad available?   sdkbox.PluginChartboost.setAutoCacheAds(shouldCache);   set to enable and disable the auto cache feature (Enabled by default).   sdkbox.PluginChartboost.getAutoCacheAds();   get the current auto cache behavior (Enabled by default).   sdkbox.PluginChartboost.closeImpression();   close any visible Chartboost impressions (interstitials, more apps, rewarded\nvideo, etc..) and the loading view (if visible).   sdkbox.PluginChartboost.setStatusBarBehavior(behavior);   set to control how the fullscreen ad units should interact with the status bar. (CBStatusBarBehaviorIgnore by default).   sdkbox.PluginChartboost.didPassAgeGate(pass);   confirm if an age gate passed or failed. When specified Chartboost will wait for\n this call before showing the IOS App Store.   sdkbox.PluginChartboost.setShouldPauseClickForConfirmation(shouldPause);   decide if Chartboost SDK should block for an age gate.   sdkbox.PluginChartboost.handleOpenURL(url, sourceApp);   opens a \"deep link\" URL for a Chartboost Custom Scheme.   sdkbox.PluginChartboost.setCustomID(customID);   set a custom identifier to send in the POST body for all Chartboost API server requests.   sdkbox.PluginChartboost.getCustomID();   get the current custom identifier being sent in the POST body for all Chartboost API server requests.   sdkbox.PluginChartboost.setShouldRequestInterstitialsInFirstSession(shouldRequest);   decide if Chartboost SDK should show interstitials in the first session.   sdkbox.PluginChartboost.setShouldDisplayLoadingViewForMoreApps(shouldDisplay);   decide if Chartboost SDK should show a loading view while preparing to display the \"more applications\" UI.   sdkbox.PluginChartboost.setShouldPrefetchVideoContent(shouldPrefetch);   decide if Chartboost SDK will attempt to fetch videos from the Chartboost API servers.   Listeners  onChartboostCached();   there is cached content   onChartboostShouldDisplay();   should Chartboost display   onChartboostDisplay();   Charboost ad has displayed   onChartboostDismiss();   Chartboost ad has been dismissed   onChartboostClose();   Chartboost is not running   onChartboostClick();   Chartboost ad was clicked on   onChartboostReward();   Chartboost reward was given   onChartboostFailedToLoad();   Chartboost failed to load   onChartboostFailToRecordClick();   Chartboost failed to record click   onChartboostConfirmation();   Chartboost confirmation   onChartboostCompleteStore();   Chartboost complete store", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/chartboost/v3-lua/", 
            "text": "Chartboost\n\n\nIntegration\n\n\nUse the following command to install the SDKBOX Chartboost plugin, Make sure you setup SDKBOX installer correctly.\n\n\nsdkbox import chartboost\n\n\n\n\nExtra steps\n\n\nModify \nCocos2dxActivity.java\n\n\n\n\n\n\nIf you're using cocos2d-x from source, assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java\n\n\n\n\n\n\nIf you're using the prebuilt cocos2d-x libraries assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n./src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nNote:\n When using Cocos2d-x from source, different versions have \nCocos2dxActivity.java\n in a different location. One way to find the location is to look in \nproj.android/project.properties\n. Example:\n\n\nandroid.library.reference.1=../../cocos2d-x/cocos/platform/android/java\n\n\n\n\nIn this case, \nCocos2dxActivity.java\n should be located at:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nModify \nCocos2dxActivity.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify \nCocos2dxActivity\n to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. The placement of this call is important. It must be done after the call to \nonLoadNativeLibraries();\n. Example:\n\n\n\n\nonLoadNativeLibraries();\nSDKBox.init(this);\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (release, optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n-keep class com.chartboost.** { *; }\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.\n\n\nConfiguration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nsdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the Chartboost configuration, you need to replace \nCHARTBOOST ID\n and \nCHARTBOOST SIGNATURE\n items with your specific \nChartboost\n account information.\n\n\nChartboost\n:{\n    \nid\n:\nCHARTBOOST ID\n,\n    \nsignature\n:\nCHARTBOOST SIGNATURE\n,\n    \nads\n:{\n        \nDefault\n:{\n            \ntype\n:\ninterstitial\n\n        },\n        \nLevel Complete\n:{\n            \ntype\n:\nrewarded_video\n\n        },\n        \nMoreApp\n:{\n            \ntype\n:\nmore_app\n\n        }\n    }\n}\n\n\n\n\nUsage\n\n\nModify Lua Code\n\n\nModify \n./frameworks/runtime-src/Classes/lua_module_register.h\n to include the necessary headers and calls to register \nChartboost\n with Lua. Note this takes a parameter of \nlua_State*\n:\n\n\n#include \nPluginChartboostLua.hpp\n\n#include \nPluginChartboostLuaHelper.h\n\n\n\n\n\nstatic int lua_module_register(lua_State* L)\n{\n  register_all_PluginChartboostLua(L);\n  register_PluginChartboostLua_helper(L);\n}\n\n\n\n\nInitialize Chartboost\n\n\n\n\nModify your Lua code to \ninit()\n the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.\n\n\n\n\nsdkbox.PluginChartboost:init();\n\n\n\n\nShowing Ads\n\n\nDisplay an ad where ever you want from your code:\n\n\n// To use the Chartboost predefined locations\nsdkbox.PluginChartboost:show(\nDefault\n);\n// To use customized location\nsdkbox.PluginChartboost:show(\nyour_ad_name\n);\n\n\n\n\nCatch Chartboost events (optional)\n\n\nThis allows you to catch the \nChartboost\n events so that you can perform operations such as providing player rewards for viewing ads.\n\n\n\n\nCreate a listener (demonstrated by logging events):\n\n\n\n\nsdkbox.PluginChartboost:setListener(function(args)\n    if \nonChartboostCached\n == args.func then\n        local name = args.name -- string\n        print(\nonChartboostCached\n)\n        print(\nname:\n, args.name)\n    elseif \nonChartboostShouldDisplay\n == args.func then\n        local name = args.name -- string\n        print(\nonChartboostShouldDisplay\n)\n        print(\nname:\n, args.name)\n    elseif \nonChartboostDisplay\n == args.func then\n        local name = args.name -- string\n        print(\nonChartboostDisplay\n)\n        print(\nname:\n, args.name)\n    elseif \nonChartboostDismiss\n == args.func then\n        local name = args.name -- string\n        print(\nonChartboostDismiss\n)\n        print(\nname:\n, args.name)\n    elseif \nonChartboostClose\n == args.func then\n        local name = args.name -- string\n        print(\nonChartboostClose\n)\n        print(\nname:\n, args.name)\n    elseif \nonChartboostClick\n == args.func then\n        local name = args.name -- string\n        print(\nonChartboostClick\n)\n        print(\nname:\n, args.name)\n    elseif \nonChartboostReward\n == args.func then\n        local name = args.name -- string\n        local reward = args.reward -- int\n        print(\nonChartboostReward\n)\n        print(\nname:\n, args.name)\n        print(\nreward:\n, reward)\n    elseif \nonChartboostFailedToLoad\n == args.func then\n        local name = args.name -- string\n        local e = args.e -- int\n        print(\nonChartboostFailedToLoad\n)\n        print(\nname:\n, args.name)\n        print(\nerror:\n, e)\n    elseif \nonChartboostFailToRecordClick\n == args.func then\n        local name = args.name -- string\n        local e = args.e -- int\n        print(\nonChartboostFailToRecordClick\n)\n        print(\nname:\n, args.name)\n        print(\nerror:\n, e)\n    elseif \nonChartboostConfirmation\n == args.func then\n        local name = args.name -- string\n        print(\nonChartboostConfirmation\n)\n    elseif \nonChartboostCompleteStore\n == args.func then\n        local name = args.name -- string\n        print(\nonChartboostCompleteStore\n)\n    end\nend)\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginChartboost:init();\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nsdkbox.PluginChartboost:show(name);\n\n\n\n\n\n\nshow ad by specifying ad name.\n\n\n\n\nsdkbox.PluginChartboost:setListener(listener);\n\n\n\n\n\n\ncreates the an optional listener.\n\n\n\n\nsdkbox.PluginChartboost:removeListener();\n\n\n\n\n\n\nremoved the listener.\n\n\n\n\nsdkbox.PluginChartboost:isAnyViewVisible();\n\n\n\n\n\n\ncheck to see if any views are visible.\n\n\n\n\nsdkbox.PluginChartboost:isAvailable(name);\n\n\n\n\n\n\nis the specified ad available?\n\n\n\n\nsdkbox.PluginChartboost:setAutoCacheAds(shouldCache);\n\n\n\n\n\n\nset to enable and disable the auto cache feature (Enabled by default).\n\n\n\n\nsdkbox.PluginChartboost:getAutoCacheAds();\n\n\n\n\n\n\nget the current auto cache behavior (Enabled by default).\n\n\n\n\nsdkbox.PluginChartboost:closeImpression();\n\n\n\n\n\n\nclose any visible Chartboost impressions (interstitials, more apps, rewarded\nvideo, etc..) and the loading view (if visible).\n\n\n\n\nsdkbox.PluginChartboost:setStatusBarBehavior(behavior);\n\n\n\n\n\n\nset to control how the fullscreen ad units should interact with the status bar. (CBStatusBarBehaviorIgnore by default).\n\n\n\n\nsdkbox.PluginChartboost:didPassAgeGate(pass);\n\n\n\n\n\n\nconfirm if an age gate passed or failed. When specified Chartboost will wait for this call before showing the IOS App Store.\n\n\n\n\nsdkbox.PluginChartboost:setShouldPauseClickForConfirmation(shouldPause);\n\n\n\n\n\n\ndecide if Chartboost SDK should block for an age gate.\n\n\n\n\nsdkbox.PluginChartboost:handleOpenURL(url, sourceApp);\n\n\n\n\n\n\nopens a \"deep link\" URL for a Chartboost Custom Scheme.\n\n\n\n\nsdkbox.PluginChartboost:setCustomID(customID);\n\n\n\n\n\n\nset a custom identifier to send in the POST body for all Chartboost API server requests.\n\n\n\n\nsdkbox.PluginChartboost:getCustomID();\n\n\n\n\n\n\nget the current custom identifier being sent in the POST body for all Chartboost API server requests.\n\n\n\n\nsdkbox.PluginChartboost:setShouldRequestInterstitialsInFirstSession(shouldRequest);\n\n\n\n\n\n\ndecide if Chartboost SDK should show interstitials in the first session.\n\n\n\n\nsdkbox.PluginChartboost:setShouldDisplayLoadingViewForMoreApps(shouldDisplay);\n\n\n\n\n\n\ndecide if Chartboost SDK should show a loading view while preparing to display the \"more applications\" UI.\n\n\n\n\nsdkbox.PluginChartboost:setShouldPrefetchVideoContent(shouldPrefetch);\n\n\n\n\n\n\ndecide if Chartboost SDK will attempt to fetch videos from the Chartboost API servers.\n\n\n\n\nListeners\n\n\nonChartboostCached();\n\n\n\n\n\n\nthere is cached content\n\n\n\n\nonChartboostShouldDisplay();\n\n\n\n\n\n\nshould Chartboost display\n\n\n\n\nonChartboostDisplay();\n\n\n\n\n\n\nCharboost ad has displayed\n\n\n\n\nonChartboostDismiss();\n\n\n\n\n\n\nChartboost ad has been dismissed\n\n\n\n\nonChartboostClose();\n\n\n\n\n\n\nChartboost is not running\n\n\n\n\nonChartboostClick();\n\n\n\n\n\n\nChartboost ad was clicked on\n\n\n\n\nonChartboostReward();\n\n\n\n\n\n\nChartboost reward was given\n\n\n\n\nonChartboostFailedToLoad();\n\n\n\n\n\n\nChartboost failed to load\n\n\n\n\nonChartboostFailToRecordClick();\n\n\n\n\n\n\nChartboost failed to record click\n\n\n\n\nonChartboostConfirmation();\n\n\n\n\n\n\nChartboost confirmation\n\n\n\n\nonChartboostCompleteStore();\n\n\n\n\n\n\nChartboost complete store", 
            "title": "lua"
        }, 
        {
            "location": "/plugins/chartboost/v3-lua/#chartboost", 
            "text": "", 
            "title": "Chartboost"
        }, 
        {
            "location": "/plugins/chartboost/v3-lua/#integration", 
            "text": "Use the following command to install the SDKBOX Chartboost plugin, Make sure you setup SDKBOX installer correctly.  sdkbox import chartboost", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/chartboost/v3-lua/#extra-steps", 
            "text": "Modify  Cocos2dxActivity.java    If you're using cocos2d-x from source, assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java    If you're using the prebuilt cocos2d-x libraries assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ./src/org/cocos2dx/lib/Cocos2dxActivity.java    Note:  When using Cocos2d-x from source, different versions have  Cocos2dxActivity.java  in a different location. One way to find the location is to look in  proj.android/project.properties . Example:  android.library.reference.1=../../cocos2d-x/cocos/platform/android/java  In this case,  Cocos2dxActivity.java  should be located at:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java   Modify  Cocos2dxActivity.java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify  Cocos2dxActivity  to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . The placement of this call is important. It must be done after the call to  onLoadNativeLibraries(); . Example:   onLoadNativeLibraries();\nSDKBox.init(this);    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }  Proguard (release, optional)   Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   Edit the file you specified to include the following:   -keep class com.chartboost.** { *; }  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Extra steps"
        }, 
        {
            "location": "/plugins/chartboost/v3-lua/#configuration", 
            "text": "SDKBOX Installer will automatically inject a sample configuration to your  sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the Chartboost configuration, you need to replace  CHARTBOOST ID  and  CHARTBOOST SIGNATURE  items with your specific  Chartboost  account information.  Chartboost :{\n     id : CHARTBOOST ID ,\n     signature : CHARTBOOST SIGNATURE ,\n     ads :{\n         Default :{\n             type : interstitial \n        },\n         Level Complete :{\n             type : rewarded_video \n        },\n         MoreApp :{\n             type : more_app \n        }\n    }\n}", 
            "title": "Configuration"
        }, 
        {
            "location": "/plugins/chartboost/v3-lua/#usage", 
            "text": "Modify Lua Code  Modify  ./frameworks/runtime-src/Classes/lua_module_register.h  to include the necessary headers and calls to register  Chartboost  with Lua. Note this takes a parameter of  lua_State* :  #include  PluginChartboostLua.hpp \n#include  PluginChartboostLuaHelper.h   static int lua_module_register(lua_State* L)\n{\n  register_all_PluginChartboostLua(L);\n  register_PluginChartboostLua_helper(L);\n}  Initialize Chartboost   Modify your Lua code to  init()  the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.   sdkbox.PluginChartboost:init();  Showing Ads  Display an ad where ever you want from your code:  // To use the Chartboost predefined locations\nsdkbox.PluginChartboost:show( Default );\n// To use customized location\nsdkbox.PluginChartboost:show( your_ad_name );  Catch Chartboost events (optional)  This allows you to catch the  Chartboost  events so that you can perform operations such as providing player rewards for viewing ads.   Create a listener (demonstrated by logging events):   sdkbox.PluginChartboost:setListener(function(args)\n    if  onChartboostCached  == args.func then\n        local name = args.name -- string\n        print( onChartboostCached )\n        print( name: , args.name)\n    elseif  onChartboostShouldDisplay  == args.func then\n        local name = args.name -- string\n        print( onChartboostShouldDisplay )\n        print( name: , args.name)\n    elseif  onChartboostDisplay  == args.func then\n        local name = args.name -- string\n        print( onChartboostDisplay )\n        print( name: , args.name)\n    elseif  onChartboostDismiss  == args.func then\n        local name = args.name -- string\n        print( onChartboostDismiss )\n        print( name: , args.name)\n    elseif  onChartboostClose  == args.func then\n        local name = args.name -- string\n        print( onChartboostClose )\n        print( name: , args.name)\n    elseif  onChartboostClick  == args.func then\n        local name = args.name -- string\n        print( onChartboostClick )\n        print( name: , args.name)\n    elseif  onChartboostReward  == args.func then\n        local name = args.name -- string\n        local reward = args.reward -- int\n        print( onChartboostReward )\n        print( name: , args.name)\n        print( reward: , reward)\n    elseif  onChartboostFailedToLoad  == args.func then\n        local name = args.name -- string\n        local e = args.e -- int\n        print( onChartboostFailedToLoad )\n        print( name: , args.name)\n        print( error: , e)\n    elseif  onChartboostFailToRecordClick  == args.func then\n        local name = args.name -- string\n        local e = args.e -- int\n        print( onChartboostFailToRecordClick )\n        print( name: , args.name)\n        print( error: , e)\n    elseif  onChartboostConfirmation  == args.func then\n        local name = args.name -- string\n        print( onChartboostConfirmation )\n    elseif  onChartboostCompleteStore  == args.func then\n        local name = args.name -- string\n        print( onChartboostCompleteStore )\n    end\nend)", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/chartboost/v3-lua/#api-reference", 
            "text": "Methods  sdkbox.PluginChartboost:init();   initialize the plugin instance.   sdkbox.PluginChartboost:show(name);   show ad by specifying ad name.   sdkbox.PluginChartboost:setListener(listener);   creates the an optional listener.   sdkbox.PluginChartboost:removeListener();   removed the listener.   sdkbox.PluginChartboost:isAnyViewVisible();   check to see if any views are visible.   sdkbox.PluginChartboost:isAvailable(name);   is the specified ad available?   sdkbox.PluginChartboost:setAutoCacheAds(shouldCache);   set to enable and disable the auto cache feature (Enabled by default).   sdkbox.PluginChartboost:getAutoCacheAds();   get the current auto cache behavior (Enabled by default).   sdkbox.PluginChartboost:closeImpression();   close any visible Chartboost impressions (interstitials, more apps, rewarded\nvideo, etc..) and the loading view (if visible).   sdkbox.PluginChartboost:setStatusBarBehavior(behavior);   set to control how the fullscreen ad units should interact with the status bar. (CBStatusBarBehaviorIgnore by default).   sdkbox.PluginChartboost:didPassAgeGate(pass);   confirm if an age gate passed or failed. When specified Chartboost will wait for this call before showing the IOS App Store.   sdkbox.PluginChartboost:setShouldPauseClickForConfirmation(shouldPause);   decide if Chartboost SDK should block for an age gate.   sdkbox.PluginChartboost:handleOpenURL(url, sourceApp);   opens a \"deep link\" URL for a Chartboost Custom Scheme.   sdkbox.PluginChartboost:setCustomID(customID);   set a custom identifier to send in the POST body for all Chartboost API server requests.   sdkbox.PluginChartboost:getCustomID();   get the current custom identifier being sent in the POST body for all Chartboost API server requests.   sdkbox.PluginChartboost:setShouldRequestInterstitialsInFirstSession(shouldRequest);   decide if Chartboost SDK should show interstitials in the first session.   sdkbox.PluginChartboost:setShouldDisplayLoadingViewForMoreApps(shouldDisplay);   decide if Chartboost SDK should show a loading view while preparing to display the \"more applications\" UI.   sdkbox.PluginChartboost:setShouldPrefetchVideoContent(shouldPrefetch);   decide if Chartboost SDK will attempt to fetch videos from the Chartboost API servers.   Listeners  onChartboostCached();   there is cached content   onChartboostShouldDisplay();   should Chartboost display   onChartboostDisplay();   Charboost ad has displayed   onChartboostDismiss();   Chartboost ad has been dismissed   onChartboostClose();   Chartboost is not running   onChartboostClick();   Chartboost ad was clicked on   onChartboostReward();   Chartboost reward was given   onChartboostFailedToLoad();   Chartboost failed to load   onChartboostFailToRecordClick();   Chartboost failed to record click   onChartboostConfirmation();   Chartboost confirmation   onChartboostCompleteStore();   Chartboost complete store", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/chartboost/v2-cpp/", 
            "text": "Chartboost\n\n\nIntegration\n\n\nUse the following command to install the SDKBOX Chartboost plugin, Make sure you setup SDKBOX installer correctly.\n\n\nsdkbox import chartboost\n\n\n\n\nExtra steps\n\n\nModify \nYourGameName\n.java\n\n\n\n\nModify \nproj.android/src/\npackage identifier\n/\nYourGameName\n.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify the class to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. Example of what this might look like for you:\n\n\n\n\nprotected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (release, optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n-keep class com.chartboost.** { *; }\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.\n\n\nConfiguration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nsdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the Chartboost configuration, you need to replace \nCHARTBOOST ID\n and \nCHARTBOOST SIGNATURE\n items with your specific \nChartboost\n account information.\n\n\nChartboost\n:{\n    \nid\n:\nCHARTBOOST ID\n,\n    \nsignature\n:\nCHARTBOOST SIGNATURE\n,\n    \nads\n:{\n        \nDefault\n:{\n            \ntype\n:\ninterstitial\n\n        },\n        \nLevel Complete\n:{\n            \ntype\n:\nrewarded_video\n\n        },\n        \nMoreApp\n:{\n            \ntype\n:\nmore_app\n\n        }\n    }\n}\n\n\n\n\nUsage\n\n\nInitialize Chartboost\n\n\nInitialize the plugin where appropriate in your code. We recommend to do this in the \nAppDelegate::applicationDidFinishLaunching()\n or \nAppController:didFinishLaunchingWithOptions()\n. Make sure to include the appropriate headers:\n\n\n#include \nPluginChartboost/PluginChartboost.h\n\nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginChartboost::init();\n}\n\n\n\n\nShowing Ads\n\n\nDisplay an ad where ever you want from your code:\n\n\n// To use the Chartboost predefined locations\nsdkbox::PluginChartboost::show(sdkbox::CB_Location_Default);\n// To use customized location\nsdkbox::PluginChartboost::show(\nyour_ad_name\n);\n\n\n\n\nCatch Chartboost events (optional)\n\n\nThis allows you to catch the \nChartboost\n events so that you can perform operations such as providing player rewards for watching the video.\n\n\n\n\nAllow your class to extend \nsdkbox::ChartboostListener\n\n\n\n\n#include \nPluginChartboost/PluginChartboost.h\n\nclass MyClass : public sdkbox::ChartboostListener\n{\npublic:\n      void onChartboostCached(const std::string\n name);\n      void onChartboostShouldDisplay(const std::string\n name);\n      void onChartboostDisplay(const std::string\n name);\n      void onChartboostDismiss(const std::string\n name);\n      void onChartboostClose(const std::string\n name);\n      void onChartboostClick(const std::string\n name);\n      void onChartboostReward(const std::string\n name, int reward);\n      void onChartboostPauseClickForConfirmation();\n};\n\n\n\n\n\n\nCreate a \nlistener\n that handles callbacks:\n\n\n\n\nsdkbox::PluginChartboost::setListener(this);\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nstatic void init();\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nstatic void show(const std::string\n name);\n\n\n\n\n\n\nshow ad by specifying ad name.\n\n\n\n\nstatic void setListener(ChartboostListener* listener);\n\n\n\n\n\n\ncreates the an optional listener.\n\n\n\n\nstatic void removeListener();\n\n\n\n\n\n\nremoved the listener.\n\n\n\n\nstatic bool isAnyViewVisible();\n\n\n\n\n\n\ncheck to see if any views are visible.\n\n\n\n\nstatic bool isAvailable(const std::string\n name);\n\n\n\n\n\n\nis the specified ad available?\n\n\n\n\nstatic void setAutoCacheAds(bool shouldCache);\n\n\n\n\n\n\nset to enable and disable the auto cache feature (Enabled by default).\n\n\n\n\nstatic bool getAutoCacheAds();\n\n\n\n\n\n\nget the current auto cache behavior (Enabled by default).\n\n\n\n\nstatic void closeImpression();\n\n\n\n\n\n\nclose any visible Chartboost impressions (interstitials, more apps, rewarded\nvideo, etc..) and the loading view (if visible).\n\n\n\n\nstatic void setStatusBarBehavior(CB_StatusBarBehavior behavior);\n\n\n\n\n\n\nset to control how the fullscreen ad units should interact with the status bar. (CBStatusBarBehaviorIgnore by default).\n\n\n\n\nstatic void didPassAgeGate(bool pass);\n\n\n\n\n\n\nconfirm if an age gate passed or failed. When specified Chartboost will wait for\n this call before showing the IOS App Store.\n\n\n\n\nstatic void setShouldPauseClickForConfirmation(bool shouldPause);\n\n\n\n\n\n\ndecide if Chartboost SDK should block for an age gate.\n\n\n\n\nstatic bool handleOpenURL(const std::string\n url, const std::string\n sourceApp);\n\n\n\n\n\n\nopens a \"deep link\" URL for a Chartboost Custom Scheme.\n\n\n\n\nstatic void setCustomID(const std::string\n customID);\n\n\n\n\n\n\nset a custom identifier to send in the POST body for all Chartboost API server\nrequests.\n\n\n\n\nstatic std::string getCustomID();\n\n\n\n\n\n\nget the current custom identifier being sent in the POST body for all Chartboost\nAPI server requests.\n\n\n\n\nstatic void setShouldRequestInterstitialsInFirstSession(bool shouldRequest);\n\n\n\n\n\n\ndecide if Chartboost SDK should show interstitials in the first session.\n\n\n\n\nstatic void setShouldDisplayLoadingViewForMoreApps(bool shouldDisplay);\n\n\n\n\n\n\ndecide if Chartboost SDK should show a loading view while preparing to display\nthe \"more applications\" UI.\n\n\n\n\nstatic void setShouldPrefetchVideoContent(bool shouldPrefetch);\n\n\n\n\n\n\ndecide if Chartboost SDK will attempt to fetch videos from the Chartboost API\nservers.", 
            "title": "c++"
        }, 
        {
            "location": "/plugins/chartboost/v2-cpp/#chartboost", 
            "text": "", 
            "title": "Chartboost"
        }, 
        {
            "location": "/plugins/chartboost/v2-cpp/#integration", 
            "text": "Use the following command to install the SDKBOX Chartboost plugin, Make sure you setup SDKBOX installer correctly.  sdkbox import chartboost", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/chartboost/v2-cpp/#extra-steps", 
            "text": "Modify  YourGameName .java   Modify  proj.android/src/ package identifier / YourGameName .java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify the class to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . Example of what this might look like for you:   protected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }  Proguard (release, optional)   Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   Edit the file you specified to include the following:   -keep class com.chartboost.** { *; }  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Extra steps"
        }, 
        {
            "location": "/plugins/chartboost/v2-cpp/#configuration", 
            "text": "SDKBOX Installer will automatically inject a sample configuration to your  sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the Chartboost configuration, you need to replace  CHARTBOOST ID  and  CHARTBOOST SIGNATURE  items with your specific  Chartboost  account information.  Chartboost :{\n     id : CHARTBOOST ID ,\n     signature : CHARTBOOST SIGNATURE ,\n     ads :{\n         Default :{\n             type : interstitial \n        },\n         Level Complete :{\n             type : rewarded_video \n        },\n         MoreApp :{\n             type : more_app \n        }\n    }\n}", 
            "title": "Configuration"
        }, 
        {
            "location": "/plugins/chartboost/v2-cpp/#usage", 
            "text": "Initialize Chartboost  Initialize the plugin where appropriate in your code. We recommend to do this in the  AppDelegate::applicationDidFinishLaunching()  or  AppController:didFinishLaunchingWithOptions() . Make sure to include the appropriate headers:  #include  PluginChartboost/PluginChartboost.h \nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginChartboost::init();\n}  Showing Ads  Display an ad where ever you want from your code:  // To use the Chartboost predefined locations\nsdkbox::PluginChartboost::show(sdkbox::CB_Location_Default);\n// To use customized location\nsdkbox::PluginChartboost::show( your_ad_name );  Catch Chartboost events (optional)  This allows you to catch the  Chartboost  events so that you can perform operations such as providing player rewards for watching the video.   Allow your class to extend  sdkbox::ChartboostListener   #include  PluginChartboost/PluginChartboost.h \nclass MyClass : public sdkbox::ChartboostListener\n{\npublic:\n      void onChartboostCached(const std::string  name);\n      void onChartboostShouldDisplay(const std::string  name);\n      void onChartboostDisplay(const std::string  name);\n      void onChartboostDismiss(const std::string  name);\n      void onChartboostClose(const std::string  name);\n      void onChartboostClick(const std::string  name);\n      void onChartboostReward(const std::string  name, int reward);\n      void onChartboostPauseClickForConfirmation();\n};   Create a  listener  that handles callbacks:   sdkbox::PluginChartboost::setListener(this);", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/chartboost/v2-cpp/#api-reference", 
            "text": "Methods  static void init();   initialize the plugin instance.   static void show(const std::string  name);   show ad by specifying ad name.   static void setListener(ChartboostListener* listener);   creates the an optional listener.   static void removeListener();   removed the listener.   static bool isAnyViewVisible();   check to see if any views are visible.   static bool isAvailable(const std::string  name);   is the specified ad available?   static void setAutoCacheAds(bool shouldCache);   set to enable and disable the auto cache feature (Enabled by default).   static bool getAutoCacheAds();   get the current auto cache behavior (Enabled by default).   static void closeImpression();   close any visible Chartboost impressions (interstitials, more apps, rewarded\nvideo, etc..) and the loading view (if visible).   static void setStatusBarBehavior(CB_StatusBarBehavior behavior);   set to control how the fullscreen ad units should interact with the status bar. (CBStatusBarBehaviorIgnore by default).   static void didPassAgeGate(bool pass);   confirm if an age gate passed or failed. When specified Chartboost will wait for\n this call before showing the IOS App Store.   static void setShouldPauseClickForConfirmation(bool shouldPause);   decide if Chartboost SDK should block for an age gate.   static bool handleOpenURL(const std::string  url, const std::string  sourceApp);   opens a \"deep link\" URL for a Chartboost Custom Scheme.   static void setCustomID(const std::string  customID);   set a custom identifier to send in the POST body for all Chartboost API server\nrequests.   static std::string getCustomID();   get the current custom identifier being sent in the POST body for all Chartboost\nAPI server requests.   static void setShouldRequestInterstitialsInFirstSession(bool shouldRequest);   decide if Chartboost SDK should show interstitials in the first session.   static void setShouldDisplayLoadingViewForMoreApps(bool shouldDisplay);   decide if Chartboost SDK should show a loading view while preparing to display\nthe \"more applications\" UI.   static void setShouldPrefetchVideoContent(bool shouldPrefetch);   decide if Chartboost SDK will attempt to fetch videos from the Chartboost API\nservers.", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/chartboost/v2-js/", 
            "text": "Chartboost\n\n\nIntegration\n\n\nUse the following command to install the SDKBOX Chartboost plugin, Make sure you setup SDKBOX installer correctly.\n\n\nsdkbox import chartboost\n\n\n\n\nExtra steps\n\n\nModify \nYourGameName\n.java\n\n\n\n\nModify \nproj.android/src/\npackage identifier\n/\nYourGameName\n.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify the class to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. Example of what this might look like for you:\n\n\n\n\nprotected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (release, optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n-keep class com.chartboost.** { *; }\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.\n\n\nConfiguration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nsdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the Chartboost configuration, you need to replace \nCHARTBOOST ID\n and \nCHARTBOOST SIGNATURE\n items with your specific \nChartboost\n account information.\n\n\nChartboost\n:{\n    \nid\n:\nCHARTBOOST ID\n,\n    \nsignature\n:\nCHARTBOOST SIGNATURE\n,\n    \nads\n:{\n        \nDefault\n:{\n            \ntype\n:\ninterstitial\n\n        },\n        \nLevel Complete\n:{\n            \ntype\n:\nrewarded_video\n\n        },\n        \nMoreApp\n:{\n            \ntype\n:\nmore_app\n\n        }\n    }\n}\n\n\n\n\nUsage\n\n\nInitialize Chartboost\n\n\n\n\nInitialize the plugin by calling \ninit()\n where appropriate in your code. We\nrecommend to do this in the \napp.js\n. Example:\n\n\n\n\nsdkbox.PluginChartboost.init();\n\n\n\n\n\n\nModify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n to include the following headers:\n\n\n\n\n#include \nPluginChartboostJS.hpp\n\n#include \nPluginChartboostJSHelper.h\n\n\n\n\n\n\n\nModify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n make sure to call:\n\n\n\n\nsc-\naddRegisterCallback(register_all_PluginChartboostJS);\nsc-\naddRegisterCallback(register_PluginChartboostJs_helper);\n\n\n\n\nThis registers the Javascript callbacks.\n\n\nShowing Ads\n\n\nDisplay an ad where ever you want from your code:\n\n\n// To use the Chartboost predefined locations\nsdkbox.PluginChartboost.show(\nDefault\n);\n// To use customized location\nsdkbox.PluginChartboost.show(\nyour_ad_name\n);\n\n\n\n\nCatch Chartboost events (optional)\n\n\nThis allows you to catch the \nChartboost\n events so that you can perform operations such as providing player rewards for viewing ads.\n\n\n\n\nCreate a listener (demonstrated by logging events):\n\n\n\n\nsdkbox.PluginChartboost.setListener({\n    onChartboostCached : function (name) { cc.log(\nonChartboostCached \n + name) },\n    onChartboostShouldDisplay : function (name) { cc.log(\nonChartboostShouldDisplay \n + name) },\n    onChartboostDisplay : function (name) { cc.log(\nonChartboostDisplay \n + name) },\n    onChartboostDismiss : function (name) { cc.log(\nonChartboostDismiss \n + name) },\n    onChartboostClose : function (name) { cc.log(\nonChartboostClose \n + name) },\n    onChartboostClick : function (name) { cc.log(\nonChartboostClick \n + name) },\n    onChartboostReward : function (name, reward) { cc.log(\nonChartboostReward \n + name + \n reward \n + reward) },\n    onChartboostFailedToLoad : function (name, e) { cc.log(\nonChartboostFailedToLoad \n + name + \n load error \n + e) },\n    onChartboostFailToRecordClick : function (name, e) { cc.log(\nonChartboostFailToRecordClick \n + name + \n click error \n + e) },\n    onChartboostConfirmation : function () { cc.log(\nonChartboostConfirmation\n) },\n    onChartboostCompleteStore : function () { cc.log(\nonChartboostCompleteStore\n) },\n})\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginChartboost.init();\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nsdkbox.PluginChartboost.show(name);\n\n\n\n\n\n\nshow ad by specifying ad name.\n\n\n\n\nsdkbox.PluginChartboost.setListener(listener);\n\n\n\n\n\n\ncreates the an optional listener.\n\n\n\n\nsdkbox.PluginChartboost.removeListener();\n\n\n\n\n\n\nremoved the listener.\n\n\n\n\nsdkbox.PluginChartboost.isAnyViewVisible();\n\n\n\n\n\n\ncheck to see if any views are visible.\n\n\n\n\nsdkbox.PluginChartboost.isAvailable(name);\n\n\n\n\n\n\nis the specified ad available?\n\n\n\n\nsdkbox.PluginChartboost.setAutoCacheAds(shouldCache);\n\n\n\n\n\n\nset to enable and disable the auto cache feature (Enabled by default).\n\n\n\n\nsdkbox.PluginChartboost.getAutoCacheAds();\n\n\n\n\n\n\nget the current auto cache behavior (Enabled by default).\n\n\n\n\nsdkbox.PluginChartboost.closeImpression();\n\n\n\n\n\n\nclose any visible Chartboost impressions (interstitials, more apps, rewarded\nvideo, etc..) and the loading view (if visible).\n\n\n\n\nsdkbox.PluginChartboost.setStatusBarBehavior(behavior);\n\n\n\n\n\n\nset to control how the fullscreen ad units should interact with the status bar. (CBStatusBarBehaviorIgnore by default).\n\n\n\n\nsdkbox.PluginChartboost.didPassAgeGate(pass);\n\n\n\n\n\n\nconfirm if an age gate passed or failed. When specified Chartboost will wait for\n this call before showing the IOS App Store.\n\n\n\n\nsdkbox.PluginChartboost.setShouldPauseClickForConfirmation(shouldPause);\n\n\n\n\n\n\ndecide if Chartboost SDK should block for an age gate.\n\n\n\n\nsdkbox.PluginChartboost.handleOpenURL(url, sourceApp);\n\n\n\n\n\n\nopens a \"deep link\" URL for a Chartboost Custom Scheme.\n\n\n\n\nsdkbox.PluginChartboost.setCustomID(customID);\n\n\n\n\n\n\nset a custom identifier to send in the POST body for all Chartboost API server requests.\n\n\n\n\nsdkbox.PluginChartboost.getCustomID();\n\n\n\n\n\n\nget the current custom identifier being sent in the POST body for all Chartboost API server requests.\n\n\n\n\nsdkbox.PluginChartboost.setShouldRequestInterstitialsInFirstSession(shouldRequest);\n\n\n\n\n\n\ndecide if Chartboost SDK should show interstitials in the first session.\n\n\n\n\nsdkbox.PluginChartboost.setShouldDisplayLoadingViewForMoreApps(shouldDisplay);\n\n\n\n\n\n\ndecide if Chartboost SDK should show a loading view while preparing to display the \"more applications\" UI.\n\n\n\n\nsdkbox.PluginChartboost.setShouldPrefetchVideoContent(shouldPrefetch);\n\n\n\n\n\n\ndecide if Chartboost SDK will attempt to fetch videos from the Chartboost API servers.\n\n\n\n\nListeners\n\n\nonChartboostCached();\n\n\n\n\n\n\nthere is cached content\n\n\n\n\nonChartboostShouldDisplay();\n\n\n\n\n\n\nshould Chartboost display\n\n\n\n\nonChartboostDisplay();\n\n\n\n\n\n\nCharboost ad has displayed\n\n\n\n\nonChartboostDismiss();\n\n\n\n\n\n\nChartboost ad has been dismissed\n\n\n\n\nonChartboostClose();\n\n\n\n\n\n\nChartboost is not running\n\n\n\n\nonChartboostClick();\n\n\n\n\n\n\nChartboost ad was clicked on\n\n\n\n\nonChartboostReward();\n\n\n\n\n\n\nChartboost reward was given\n\n\n\n\nonChartboostFailedToLoad();\n\n\n\n\n\n\nChartboost failed to load\n\n\n\n\nonChartboostFailToRecordClick();\n\n\n\n\n\n\nChartboost failed to record click\n\n\n\n\nonChartboostConfirmation();\n\n\n\n\n\n\nChartboost confirmation\n\n\n\n\nonChartboostCompleteStore();\n\n\n\n\n\n\nChartboost complete store", 
            "title": "js"
        }, 
        {
            "location": "/plugins/chartboost/v2-js/#chartboost", 
            "text": "", 
            "title": "Chartboost"
        }, 
        {
            "location": "/plugins/chartboost/v2-js/#integration", 
            "text": "Use the following command to install the SDKBOX Chartboost plugin, Make sure you setup SDKBOX installer correctly.  sdkbox import chartboost", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/chartboost/v2-js/#extra-steps", 
            "text": "Modify  YourGameName .java   Modify  proj.android/src/ package identifier / YourGameName .java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify the class to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . Example of what this might look like for you:   protected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }  Proguard (release, optional)   Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   Edit the file you specified to include the following:   -keep class com.chartboost.** { *; }  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Extra steps"
        }, 
        {
            "location": "/plugins/chartboost/v2-js/#configuration", 
            "text": "SDKBOX Installer will automatically inject a sample configuration to your  sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the Chartboost configuration, you need to replace  CHARTBOOST ID  and  CHARTBOOST SIGNATURE  items with your specific  Chartboost  account information.  Chartboost :{\n     id : CHARTBOOST ID ,\n     signature : CHARTBOOST SIGNATURE ,\n     ads :{\n         Default :{\n             type : interstitial \n        },\n         Level Complete :{\n             type : rewarded_video \n        },\n         MoreApp :{\n             type : more_app \n        }\n    }\n}", 
            "title": "Configuration"
        }, 
        {
            "location": "/plugins/chartboost/v2-js/#usage", 
            "text": "Initialize Chartboost   Initialize the plugin by calling  init()  where appropriate in your code. We\nrecommend to do this in the  app.js . Example:   sdkbox.PluginChartboost.init();   Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  to include the following headers:   #include  PluginChartboostJS.hpp \n#include  PluginChartboostJSHelper.h    Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  make sure to call:   sc- addRegisterCallback(register_all_PluginChartboostJS);\nsc- addRegisterCallback(register_PluginChartboostJs_helper);  This registers the Javascript callbacks.  Showing Ads  Display an ad where ever you want from your code:  // To use the Chartboost predefined locations\nsdkbox.PluginChartboost.show( Default );\n// To use customized location\nsdkbox.PluginChartboost.show( your_ad_name );  Catch Chartboost events (optional)  This allows you to catch the  Chartboost  events so that you can perform operations such as providing player rewards for viewing ads.   Create a listener (demonstrated by logging events):   sdkbox.PluginChartboost.setListener({\n    onChartboostCached : function (name) { cc.log( onChartboostCached   + name) },\n    onChartboostShouldDisplay : function (name) { cc.log( onChartboostShouldDisplay   + name) },\n    onChartboostDisplay : function (name) { cc.log( onChartboostDisplay   + name) },\n    onChartboostDismiss : function (name) { cc.log( onChartboostDismiss   + name) },\n    onChartboostClose : function (name) { cc.log( onChartboostClose   + name) },\n    onChartboostClick : function (name) { cc.log( onChartboostClick   + name) },\n    onChartboostReward : function (name, reward) { cc.log( onChartboostReward   + name +   reward   + reward) },\n    onChartboostFailedToLoad : function (name, e) { cc.log( onChartboostFailedToLoad   + name +   load error   + e) },\n    onChartboostFailToRecordClick : function (name, e) { cc.log( onChartboostFailToRecordClick   + name +   click error   + e) },\n    onChartboostConfirmation : function () { cc.log( onChartboostConfirmation ) },\n    onChartboostCompleteStore : function () { cc.log( onChartboostCompleteStore ) },\n})", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/chartboost/v2-js/#api-reference", 
            "text": "Methods  sdkbox.PluginChartboost.init();   initialize the plugin instance.   sdkbox.PluginChartboost.show(name);   show ad by specifying ad name.   sdkbox.PluginChartboost.setListener(listener);   creates the an optional listener.   sdkbox.PluginChartboost.removeListener();   removed the listener.   sdkbox.PluginChartboost.isAnyViewVisible();   check to see if any views are visible.   sdkbox.PluginChartboost.isAvailable(name);   is the specified ad available?   sdkbox.PluginChartboost.setAutoCacheAds(shouldCache);   set to enable and disable the auto cache feature (Enabled by default).   sdkbox.PluginChartboost.getAutoCacheAds();   get the current auto cache behavior (Enabled by default).   sdkbox.PluginChartboost.closeImpression();   close any visible Chartboost impressions (interstitials, more apps, rewarded\nvideo, etc..) and the loading view (if visible).   sdkbox.PluginChartboost.setStatusBarBehavior(behavior);   set to control how the fullscreen ad units should interact with the status bar. (CBStatusBarBehaviorIgnore by default).   sdkbox.PluginChartboost.didPassAgeGate(pass);   confirm if an age gate passed or failed. When specified Chartboost will wait for\n this call before showing the IOS App Store.   sdkbox.PluginChartboost.setShouldPauseClickForConfirmation(shouldPause);   decide if Chartboost SDK should block for an age gate.   sdkbox.PluginChartboost.handleOpenURL(url, sourceApp);   opens a \"deep link\" URL for a Chartboost Custom Scheme.   sdkbox.PluginChartboost.setCustomID(customID);   set a custom identifier to send in the POST body for all Chartboost API server requests.   sdkbox.PluginChartboost.getCustomID();   get the current custom identifier being sent in the POST body for all Chartboost API server requests.   sdkbox.PluginChartboost.setShouldRequestInterstitialsInFirstSession(shouldRequest);   decide if Chartboost SDK should show interstitials in the first session.   sdkbox.PluginChartboost.setShouldDisplayLoadingViewForMoreApps(shouldDisplay);   decide if Chartboost SDK should show a loading view while preparing to display the \"more applications\" UI.   sdkbox.PluginChartboost.setShouldPrefetchVideoContent(shouldPrefetch);   decide if Chartboost SDK will attempt to fetch videos from the Chartboost API servers.   Listeners  onChartboostCached();   there is cached content   onChartboostShouldDisplay();   should Chartboost display   onChartboostDisplay();   Charboost ad has displayed   onChartboostDismiss();   Chartboost ad has been dismissed   onChartboostClose();   Chartboost is not running   onChartboostClick();   Chartboost ad was clicked on   onChartboostReward();   Chartboost reward was given   onChartboostFailedToLoad();   Chartboost failed to load   onChartboostFailToRecordClick();   Chartboost failed to record click   onChartboostConfirmation();   Chartboost confirmation   onChartboostCompleteStore();   Chartboost complete store", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/chartboost/v2-lua/", 
            "text": "Chartboost\n\n\nIntegration\n\n\nUse the following command to install the SDKBOX Chartboost plugin, Make sure you setup SDKBOX installer correctly.\n\n\nsdkbox import chartboost\n\n\n\n\nExtra steps\n\n\nModify \nYourGameName\n.java\n\n\n\n\nModify \nproj.android/src/\npackage identifier\n/\nYourGameName\n.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify the class to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. Example of what this might look like for you:\n\n\n\n\nprotected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (release, optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n-keep class com.chartboost.** { *; }\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.\n\n\nConfiguration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nsdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the Chartboost configuration, you need to replace \nCHARTBOOST ID\n and \nCHARTBOOST SIGNATURE\n items with your specific \nChartboost\n account information.\n\n\nChartboost\n:{\n    \nid\n:\nCHARTBOOST ID\n,\n    \nsignature\n:\nCHARTBOOST SIGNATURE\n,\n    \nads\n:{\n        \nDefault\n:{\n            \ntype\n:\ninterstitial\n\n        },\n        \nLevel Complete\n:{\n            \ntype\n:\nrewarded_video\n\n        },\n        \nMoreApp\n:{\n            \ntype\n:\nmore_app\n\n        }\n    }\n}\n\n\n\n\nUsage\n\n\nModify \nAppDelegate.cpp\n\n\n\n\nModify \nAppDelegate.cpp\n to include the following headers:\n\n\n\n\n#include \nPluginChartboostLua.hpp\n\n#include \nPluginChartboostLuaHelper.h\n\n\n\n\n\n\n\nSecond, We need to register the plugin with Lua. This is done by making a call to \nregister_all_PluginChartboostLua(\nlua_State*\n);\n. It is important to note that this call must be made after \nlua_State *tolua_s = pStack-\ngetLuaState();\n and before \ntolua_extensions_ccb_open(tolua_s);\n. Here is an example of what this might look like for you:\n\n\n\n\nlua_State *tolua_s = pStack-\ngetLuaState();\nregister_all_PluginChartboostLua(tolua_s);\nregister_PluginChartboostLua_helper(tolua_s);\ntolua_extensions_ccb_open(tolua_s);\n\n\n\n\nInitialize Chartboost\n\n\nModify your Lua code to \ninit()\n the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.\n\n\nsdkbox.PluginChartboost:init();\n\n\n\n\nShowing Ads\n\n\nDisplay an ad where ever you want from your code:\n\n\n// To use the Chartboost predefined locations\nsdkbox.PluginChartboost:show(\nDefault\n);\n// To use customized location\nsdkbox.PluginChartboost:show(\nyour_ad_name\n);\n\n\n\n\nCatch Chartboost events (optional)\n\n\nThis allows you to catch the \nChartboost\n events so that you can perform operations such as providing player rewards for viewing ads.\n\n\n\n\nCreate a listener (demonstrated by logging events):\n\n\n\n\nsdkbox.PluginChartboost:setListener(function(args)\n    if \nonChartboostCached\n == args.func then\n        local name = args.name -- string\n        print(\nonChartboostCached\n)\n        print(\nname:\n, args.name)\n    elseif \nonChartboostShouldDisplay\n == args.func then\n        local name = args.name -- string\n        print(\nonChartboostShouldDisplay\n)\n        print(\nname:\n, args.name)\n    elseif \nonChartboostDisplay\n == args.func then\n        local name = args.name -- string\n        print(\nonChartboostDisplay\n)\n        print(\nname:\n, args.name)\n    elseif \nonChartboostDismiss\n == args.func then\n        local name = args.name -- string\n        print(\nonChartboostDismiss\n)\n        print(\nname:\n, args.name)\n    elseif \nonChartboostClose\n == args.func then\n        local name = args.name -- string\n        print(\nonChartboostClose\n)\n        print(\nname:\n, args.name)\n    elseif \nonChartboostClick\n == args.func then\n        local name = args.name -- string\n        print(\nonChartboostClick\n)\n        print(\nname:\n, args.name)\n    elseif \nonChartboostReward\n == args.func then\n        local name = args.name -- string\n        local reward = args.reward -- int\n        print(\nonChartboostReward\n)\n        print(\nname:\n, args.name)\n        print(\nreward:\n, reward)\n    elseif \nonChartboostFailedToLoad\n == args.func then\n        local name = args.name -- string\n        local e = args.e -- int\n        print(\nonChartboostFailedToLoad\n)\n        print(\nname:\n, args.name)\n        print(\nerror:\n, e)\n    elseif \nonChartboostFailToRecordClick\n == args.func then\n        local name = args.name -- string\n        local e = args.e -- int\n        print(\nonChartboostFailToRecordClick\n)\n        print(\nname:\n, args.name)\n        print(\nerror:\n, e)\n    elseif \nonChartboostConfirmation\n == args.func then\n        local name = args.name -- string\n        print(\nonChartboostConfirmation\n)\n    elseif \nonChartboostCompleteStore\n == args.func then\n        local name = args.name -- string\n        print(\nonChartboostCompleteStore\n)\n    end\nend)\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginChartboost:init();\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nsdkbox.PluginChartboost:show(name);\n\n\n\n\n\n\nshow ad by specifying ad name.\n\n\n\n\nsdkbox.PluginChartboost:setListener(listener);\n\n\n\n\n\n\ncreates the an optional listener.\n\n\n\n\nsdkbox.PluginChartboost:removeListener();\n\n\n\n\n\n\nremoved the listener.\n\n\n\n\nsdkbox.PluginChartboost:isAnyViewVisible();\n\n\n\n\n\n\ncheck to see if any views are visible.\n\n\n\n\nsdkbox.PluginChartboost:isAvailable(name);\n\n\n\n\n\n\nis the specified ad available?\n\n\n\n\nsdkbox.PluginChartboost:setAutoCacheAds(shouldCache);\n\n\n\n\n\n\nset to enable and disable the auto cache feature (Enabled by default).\n\n\n\n\nsdkbox.PluginChartboost:getAutoCacheAds();\n\n\n\n\n\n\nget the current auto cache behavior (Enabled by default).\n\n\n\n\nsdkbox.PluginChartboost:closeImpression();\n\n\n\n\n\n\nclose any visible Chartboost impressions (interstitials, more apps, rewarded\nvideo, etc..) and the loading view (if visible).\n\n\n\n\nsdkbox.PluginChartboost:setStatusBarBehavior(behavior);\n\n\n\n\n\n\nset to control how the fullscreen ad units should interact with the status bar. (CBStatusBarBehaviorIgnore by default).\n\n\n\n\nsdkbox.PluginChartboost:didPassAgeGate(pass);\n\n\n\n\n\n\nconfirm if an age gate passed or failed. When specified Chartboost will wait for this call before showing the IOS App Store.\n\n\n\n\nsdkbox.PluginChartboost:setShouldPauseClickForConfirmation(shouldPause);\n\n\n\n\n\n\ndecide if Chartboost SDK should block for an age gate.\n\n\n\n\nsdkbox.PluginChartboost:handleOpenURL(url, sourceApp);\n\n\n\n\n\n\nopens a \"deep link\" URL for a Chartboost Custom Scheme.\n\n\n\n\nsdkbox.PluginChartboost:setCustomID(customID);\n\n\n\n\n\n\nset a custom identifier to send in the POST body for all Chartboost API server requests.\n\n\n\n\nsdkbox.PluginChartboost:getCustomID();\n\n\n\n\n\n\nget the current custom identifier being sent in the POST body for all Chartboost API server requests.\n\n\n\n\nsdkbox.PluginChartboost:setShouldRequestInterstitialsInFirstSession(shouldRequest);\n\n\n\n\n\n\ndecide if Chartboost SDK should show interstitials in the first session.\n\n\n\n\nsdkbox.PluginChartboost:setShouldDisplayLoadingViewForMoreApps(shouldDisplay);\n\n\n\n\n\n\ndecide if Chartboost SDK should show a loading view while preparing to display the \"more applications\" UI.\n\n\n\n\nsdkbox.PluginChartboost:setShouldPrefetchVideoContent(shouldPrefetch);\n\n\n\n\n\n\ndecide if Chartboost SDK will attempt to fetch videos from the Chartboost API servers.\n\n\n\n\nListeners\n\n\nonChartboostCached();\n\n\n\n\n\n\nthere is cached content\n\n\n\n\nonChartboostShouldDisplay();\n\n\n\n\n\n\nshould Chartboost display\n\n\n\n\nonChartboostDisplay();\n\n\n\n\n\n\nCharboost ad has displayed\n\n\n\n\nonChartboostDismiss();\n\n\n\n\n\n\nChartboost ad has been dismissed\n\n\n\n\nonChartboostClose();\n\n\n\n\n\n\nChartboost is not running\n\n\n\n\nonChartboostClick();\n\n\n\n\n\n\nChartboost ad was clicked on\n\n\n\n\nonChartboostReward();\n\n\n\n\n\n\nChartboost reward was given\n\n\n\n\nonChartboostFailedToLoad();\n\n\n\n\n\n\nChartboost failed to load\n\n\n\n\nonChartboostFailToRecordClick();\n\n\n\n\n\n\nChartboost failed to record click\n\n\n\n\nonChartboostConfirmation();\n\n\n\n\n\n\nChartboost confirmation\n\n\n\n\nonChartboostCompleteStore();\n\n\n\n\n\n\nChartboost complete store", 
            "title": "lua"
        }, 
        {
            "location": "/plugins/chartboost/v2-lua/#chartboost", 
            "text": "", 
            "title": "Chartboost"
        }, 
        {
            "location": "/plugins/chartboost/v2-lua/#integration", 
            "text": "Use the following command to install the SDKBOX Chartboost plugin, Make sure you setup SDKBOX installer correctly.  sdkbox import chartboost", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/chartboost/v2-lua/#extra-steps", 
            "text": "Modify  YourGameName .java   Modify  proj.android/src/ package identifier / YourGameName .java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify the class to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . Example of what this might look like for you:   protected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }  Proguard (release, optional)   Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   Edit the file you specified to include the following:   -keep class com.chartboost.** { *; }  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Extra steps"
        }, 
        {
            "location": "/plugins/chartboost/v2-lua/#configuration", 
            "text": "SDKBOX Installer will automatically inject a sample configuration to your  sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the Chartboost configuration, you need to replace  CHARTBOOST ID  and  CHARTBOOST SIGNATURE  items with your specific  Chartboost  account information.  Chartboost :{\n     id : CHARTBOOST ID ,\n     signature : CHARTBOOST SIGNATURE ,\n     ads :{\n         Default :{\n             type : interstitial \n        },\n         Level Complete :{\n             type : rewarded_video \n        },\n         MoreApp :{\n             type : more_app \n        }\n    }\n}", 
            "title": "Configuration"
        }, 
        {
            "location": "/plugins/chartboost/v2-lua/#usage", 
            "text": "Modify  AppDelegate.cpp   Modify  AppDelegate.cpp  to include the following headers:   #include  PluginChartboostLua.hpp \n#include  PluginChartboostLuaHelper.h    Second, We need to register the plugin with Lua. This is done by making a call to  register_all_PluginChartboostLua( lua_State* ); . It is important to note that this call must be made after  lua_State *tolua_s = pStack- getLuaState();  and before  tolua_extensions_ccb_open(tolua_s); . Here is an example of what this might look like for you:   lua_State *tolua_s = pStack- getLuaState();\nregister_all_PluginChartboostLua(tolua_s);\nregister_PluginChartboostLua_helper(tolua_s);\ntolua_extensions_ccb_open(tolua_s);  Initialize Chartboost  Modify your Lua code to  init()  the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.  sdkbox.PluginChartboost:init();  Showing Ads  Display an ad where ever you want from your code:  // To use the Chartboost predefined locations\nsdkbox.PluginChartboost:show( Default );\n// To use customized location\nsdkbox.PluginChartboost:show( your_ad_name );  Catch Chartboost events (optional)  This allows you to catch the  Chartboost  events so that you can perform operations such as providing player rewards for viewing ads.   Create a listener (demonstrated by logging events):   sdkbox.PluginChartboost:setListener(function(args)\n    if  onChartboostCached  == args.func then\n        local name = args.name -- string\n        print( onChartboostCached )\n        print( name: , args.name)\n    elseif  onChartboostShouldDisplay  == args.func then\n        local name = args.name -- string\n        print( onChartboostShouldDisplay )\n        print( name: , args.name)\n    elseif  onChartboostDisplay  == args.func then\n        local name = args.name -- string\n        print( onChartboostDisplay )\n        print( name: , args.name)\n    elseif  onChartboostDismiss  == args.func then\n        local name = args.name -- string\n        print( onChartboostDismiss )\n        print( name: , args.name)\n    elseif  onChartboostClose  == args.func then\n        local name = args.name -- string\n        print( onChartboostClose )\n        print( name: , args.name)\n    elseif  onChartboostClick  == args.func then\n        local name = args.name -- string\n        print( onChartboostClick )\n        print( name: , args.name)\n    elseif  onChartboostReward  == args.func then\n        local name = args.name -- string\n        local reward = args.reward -- int\n        print( onChartboostReward )\n        print( name: , args.name)\n        print( reward: , reward)\n    elseif  onChartboostFailedToLoad  == args.func then\n        local name = args.name -- string\n        local e = args.e -- int\n        print( onChartboostFailedToLoad )\n        print( name: , args.name)\n        print( error: , e)\n    elseif  onChartboostFailToRecordClick  == args.func then\n        local name = args.name -- string\n        local e = args.e -- int\n        print( onChartboostFailToRecordClick )\n        print( name: , args.name)\n        print( error: , e)\n    elseif  onChartboostConfirmation  == args.func then\n        local name = args.name -- string\n        print( onChartboostConfirmation )\n    elseif  onChartboostCompleteStore  == args.func then\n        local name = args.name -- string\n        print( onChartboostCompleteStore )\n    end\nend)", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/chartboost/v2-lua/#api-reference", 
            "text": "Methods  sdkbox.PluginChartboost:init();   initialize the plugin instance.   sdkbox.PluginChartboost:show(name);   show ad by specifying ad name.   sdkbox.PluginChartboost:setListener(listener);   creates the an optional listener.   sdkbox.PluginChartboost:removeListener();   removed the listener.   sdkbox.PluginChartboost:isAnyViewVisible();   check to see if any views are visible.   sdkbox.PluginChartboost:isAvailable(name);   is the specified ad available?   sdkbox.PluginChartboost:setAutoCacheAds(shouldCache);   set to enable and disable the auto cache feature (Enabled by default).   sdkbox.PluginChartboost:getAutoCacheAds();   get the current auto cache behavior (Enabled by default).   sdkbox.PluginChartboost:closeImpression();   close any visible Chartboost impressions (interstitials, more apps, rewarded\nvideo, etc..) and the loading view (if visible).   sdkbox.PluginChartboost:setStatusBarBehavior(behavior);   set to control how the fullscreen ad units should interact with the status bar. (CBStatusBarBehaviorIgnore by default).   sdkbox.PluginChartboost:didPassAgeGate(pass);   confirm if an age gate passed or failed. When specified Chartboost will wait for this call before showing the IOS App Store.   sdkbox.PluginChartboost:setShouldPauseClickForConfirmation(shouldPause);   decide if Chartboost SDK should block for an age gate.   sdkbox.PluginChartboost:handleOpenURL(url, sourceApp);   opens a \"deep link\" URL for a Chartboost Custom Scheme.   sdkbox.PluginChartboost:setCustomID(customID);   set a custom identifier to send in the POST body for all Chartboost API server requests.   sdkbox.PluginChartboost:getCustomID();   get the current custom identifier being sent in the POST body for all Chartboost API server requests.   sdkbox.PluginChartboost:setShouldRequestInterstitialsInFirstSession(shouldRequest);   decide if Chartboost SDK should show interstitials in the first session.   sdkbox.PluginChartboost:setShouldDisplayLoadingViewForMoreApps(shouldDisplay);   decide if Chartboost SDK should show a loading view while preparing to display the \"more applications\" UI.   sdkbox.PluginChartboost:setShouldPrefetchVideoContent(shouldPrefetch);   decide if Chartboost SDK will attempt to fetch videos from the Chartboost API servers.   Listeners  onChartboostCached();   there is cached content   onChartboostShouldDisplay();   should Chartboost display   onChartboostDisplay();   Charboost ad has displayed   onChartboostDismiss();   Chartboost ad has been dismissed   onChartboostClose();   Chartboost is not running   onChartboostClick();   Chartboost ad was clicked on   onChartboostReward();   Chartboost reward was given   onChartboostFailedToLoad();   Chartboost failed to load   onChartboostFailToRecordClick();   Chartboost failed to record click   onChartboostConfirmation();   Chartboost confirmation   onChartboostCompleteStore();   Chartboost complete store", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/flurryanalytics/v3-cpp/", 
            "text": "Flurry Analytics\n\n\nIntegration\n\n\nUse the following command to install the SDKBOX Flurry Analytics plugin, Make sure you setup SDKBOX installer correctly.\n\n\nsdkbox import flurryanalytics\n\n\n\n\nExtra steps\n\n\nModify \nCocos2dxActivity.java\n\n\n\n\n\n\nIf you're using cocos2d-x from source, assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java\n\n\n\n\n\n\nIf you're using the prebuilt cocos2d-x libraries assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n./src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nNote:\n When using Cocos2d-x from source, different versions have \nCocos2dxActivity.java\n in a different location. One way to find the location is to look in \nproj.android/project.properties\n. Example:\n\n\nandroid.library.reference.1=../../cocos2d-x/cocos/platform/android/java\n\n\n\n\nIn this case, \nCocos2dxActivity.java\n should be located at:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nModify \nCocos2dxActivity.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify \nCocos2dxActivity\n to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. The placement of this call is important. It must be done after the call to \nonLoadNativeLibraries();\n. Example:\n\n\n\n\nonLoadNativeLibraries();\nSDKBox.init(this);\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (release, optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n-dontwarn android.webkit.**\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.\n\n\nConfiguration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nsdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the Google Analytics configuration, you need to replace \nAPI KEY\n  with your specific \nFlurry Analytics ID\n account information.\nHere is an example adding \nFlurryAnalytics\n to iOS:\n\n\nFlurryAnalytics\n:{\n            \nAPIKey\n:\nAPI KEY\n,\n            \nAppVersion\n:\nV0.1\n,\n            \nDebug\n:false,\n            \nLevel\n:2,\n            \nSessionTimeout\n:10,\n            \nCrashReport\n:true\n}\n\n\n\n\nAdding \nFlurryAnalytics\n to Android is a bit different as it supports \nlocations\n, \npulse\n and \norigin\n settings. Here is an example adding \nFlurryAnalytics\n to Android:\n\n\nFlurryAnalytics\n:{\n            \nAPIKey\n:\nAPI KEY\n,\n            \nAppVersion\n:\nV0.1\n,\n            \nDebug\n:false,\n            \nLogEvent\n:true,\n            \nLevel\n:2,\n            \nSessionTimeout\n:10,\n            \nCrashReport\n:true,\n            \nLocationReport\n:true,\n            \nDefLocationLat\n:104.06,\n            \nDefLocationLon\n:30.67,\n            \nPulse\n:true,\n            \nOrigin\n:[\n                {\n                    \nOriginName\n:\nsdkbox\n,\n                    \nOriginVersion\n:\nv0.1\n,\n                    \nOriginParams\n:{\n                        \nKey1\n:\nVal1\n,\n                        \nKey2\n:\nVal2\n,\n                        \nKey3\n:\nVal3\n\n                    }\n                },\n                {\n                    \nOriginName\n:\nsdkbox\n,\n                    \nOriginVersion\n:\nv0.1\n\n                }\n            ]\n}\n\n\n\n\nUsage\n\n\nInitialize Flurry Analytics\n\n\nInitialize the plugin where appropriate in your code. We recommend to do this in the \nAppDelegate::applicationDidFinishLaunching()\n or \nAppController:didFinishLaunchingWithOptions()\n. Make sure to include the appropriate headers. \ninit()\n and \nstartSession()\n are required. Example:\n\n\n#include \nPluginFlurryAnalytics/PluginFlurryAnalytics.h\n\nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginFlurryAnalytics::init();\n     // start session\n     sdkbox::PluginFlurryAnalytics::startSession();\n}\n\n\n\n\nUsing Flurry Analytics\n\n\nAfter initialization you can begin to use the Flurry Analytics functionality. Use \nlogevent\n where ever you want from your code:\n\n\nstd::string eventName = \ntest event1\n;\nsdkbox::PluginFlurryAnalytics::logEvent(eventName);\n\n\n\n\nEnding Flurry Analytics (Android only)\n\n\nWhen you are finished using \nFlurryAnalytics\n or when your games ends. It is necessary to end the \nFlurryAnalytics\n session. This is a requirement for Android but optional on iOS. Example:\n\n\n// end session just valid on android, but it's ok to invoke it on iOS\nsdkbox::PluginFlurryAnalytics::endSession();\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nstatic bool init ( ) ;\n\n\n\n\n\n\ninit plugin, must be first invoke\n\n\n\n\nstatic void setAppVersion ( const std::string \n version ) ;\n\n\n\n\n\n\nExplicitly specifies the App Version that Flurry will use to group Analytics data.\n\n\n\n\nstatic std::string getFlurryAgentVersion ( ) ;\n\n\n\n\n\n\nRetrieves the Flurry Agent Build Version.\n\n\n\n\nstatic void setShowErrorInLogEnabled ( bool value ) ;\n\n\n\n\n\n\nDisplays an exception in the debug log if thrown during a Session.\n\n\n\n\nstatic void setDebugLogEnabled ( bool value ) ;\n\n\n\n\n\n\nGenerates debug logs to console.\n\n\n\n\nstatic void setLogLevel ( FA_FlurryLogLevel value ) ;\n\n\n\n\n\n\nGenerates debug logs to console.\n\n\n\n\nstatic void setSessionContinueSeconds ( float seconds ) ;\n\n\n\n\n\n\nSet the timeout for expiring a Flurry session.\n\n\n\n\nstatic void setCrashReportingEnabled ( bool value ) ;\n\n\n\n\n\n\nEnable automatic collection of crash reports.\n\n\n\n\nstatic void startSession ( ) ;\n\n\n\n\n\n\nStart a Flurry session for the project denoted by @c apiKey.\n\n\n\n\nstatic void endSession ( ) ;\n\n\n\n\n\n\nend session, just valid on android\n\n\n\n\nstatic bool activeSessionExists ( ) ;\n\n\n\n\n\n\nStart a Flurry session for the project denoted by @c apiKey.\n\n\n\n\nstatic std::string getSessionID ( ) ;\n\n\n\n\n\n\nStart a Flurry session for the project denoted by @c apiKey.\n\n\n\n\nstatic void pauseBackgroundSession ( ) ;\n\n\n\n\n\n\nPauses a Flurry session left running in background. on valid on ios\n\n\n\n\nstatic void addOrigin ( const std::string \n originName ,\n                        const std::string \n originVersion ) ;\n\n\n\n\n\n\nAdds an SDK origin specified by @c originName and @c originVersion.\n\n\n\n\nstatic void addOrigin ( const std::string \n originName ,\n                        const std::string \n originVersion ,\n                        std::map \nstd::string ,\n                        std::string\n \n parameters ) ;\n\n\n\n\n\n\nAdds a custom parameterized origin specified by @c originName with @c originVersion and @c parameters.\n\n\n\n\nstatic void addOrigin ( const std::string \n originName ,\n                        const std::string \n originVersion ,\n                        const std::string \n parameters ) ;\n\n\n\n\n\n\njust for lua, js binding, have the same function with addOrigin(string, string, map)\n\n\n\n\nstatic int logEvent ( const std::string \n eventName ) ;\n\n\n\n\n\n\nRecords a custom event specified by @c eventName.\n\n\n\n\nstatic int logEvent ( const std::string \n eventName ,\n                      std::map \nstd::string ,\n                      std::string\n \n parameters ) ;\n\n\n\n\n\n\nRecords a custom parameterized event specified by @c eventName with @c parameters.\n\n\n\n\nstatic int logEvent ( const std::string \n eventName ,\n                      const std::string \n parameters ) ;\n\n\n\n\n\n\njust for lua, js binding, have same function with logEvent(string, map)\n\n\n\n\nstatic int logEvent ( const std::string \n eventName , bool timed ) ;\n\n\n\n\n\n\nRecords a timed event specified by @c eventName.\n\n\n\n\nstatic int logEvent ( const std::string \n eventName ,\n                      std::map \nstd::string ,\n                      std::string\n \n parameters ,\n                      bool timed ) ;\n\n\n\n\n\n\nRecords a custom parameterized timed event specified by @c eventName with @c parameters.\n\n\n\n\nstatic int logEvent ( const std::string \n eventName ,\n                      const std::string \n parameters ,\n                      bool timed ) ;\n\n\n\n\n\n\njust for lua, js binding, have the same function with logEvent(string, map, bool)\n\n\n\n\nstatic void endTimedEvent ( const std::string \n eventId ) ;\n\n\n\n\n\n\nEnd a timed event\n\n\n\n\nstatic void endTimedEvent ( const std::string \n eventName ,\n                            std::map \nstd::string ,\n                            std::string\n \n parameters ) ;\n\n\n\n\n\n\nEnds a timed event specified by @c eventName and optionally updates parameters with @c parameters.\n\n\n\n\nstatic void endTimedEvent ( const std::string \n eventName ,\n                            const std::string \n parameters ) ;\n\n\n\n\n\n\njust for lua, js binding, have same function with endTimeEvent(string, map)\n\n\n\n\nstatic void logError ( const std::string \n errorID ,\n                       const std::string \n message ,\n                       const std::string \n info ) ;\n\n\n\n\n\n\nRecords an app exception. Commonly used to catch unhandled exceptions.\n\n\n\n\nstatic void logPageView ( ) ;\n\n\n\n\n\n\nExplicitly track a page view during a session.\n\n\n\n\nstatic void setUserID ( const std::string \n userID ) ;\n\n\n\n\n\n\nAssign a unique id for a user in your app.\n\n\n\n\nstatic void setAge ( int age ) ;\n\n\n\n\n\n\nSet your user's age in years.\n\n\n\n\nstatic void setGender ( const std::string \n gender ) ;\n\n\n\n\n\n\nSet your user's gender.\n\n\n\n\n     static void setReportLocation ( bool reportLocation ) ;\n\n\n\n\n\n\nSet whether Flurry should record location via GPS. Defaults to true. valid on android\n\n\n\n\nstatic void setLatitude ( double latitude ,\n                          double longitude ,\n                          float horizontalAccuracy ,\n                          float verticalAccuracy ) ;\n\n\n\n\n\n\nSet the location of the session.\n\n\n\n\nstatic void clearLocation ( ) ;\n\n\n\n\n\n\nclear the default location.valid on andriod\n\n\n\n\nstatic void setSessionReportsOnCloseEnabled ( bool sendSessionReportsOnClose ) ;\n\n\n\n\n\n\nSet session to report when app closes.valid on ios\n\n\n\n\nstatic void setSessionReportsOnPauseEnabled ( bool setSessionReportsOnPauseEnabled ) ;\n\n\n\n\n\n\nSet session to report when app is sent to the background.valid on ios\n\n\n\n\nstatic void setBackgroundSessionEnabled ( bool setBackgroundSessionEnabled ) ;\n\n\n\n\n\n\nSet session to support background execution.valid on ios\n\n\n\n\nstatic void setEventLoggingEnabled ( bool value ) ;\n\n\n\n\n\n\nEnable custom event logging.\n\n\n\n\nstatic void setPulseEnabled ( bool value ) ;\n\n\n\n\n\n\nEnables Flurry Pulse\n\n\n\n\nstatic void setListener ( FlurryAnalyticsListener * listener ) ;\n\n\n\n\n\n\nset listener for session callback\n\n\n\n\nstatic FlurryAnalyticsListener * getListener ( ) ;\n\n\n\n\n\n\nget listener\n\n\n\n\nstatic void removeListener ( ) ;\n\n\n\n\n\n\nremove listener, just set null, will not delete it\n        the user should delete listener self\n\n\n\n\nListeners\n\n\nvoid flurrySessionDidCreateWithInfo ( std::map \nstd::string ,\n                                      std::string\n \n info );\n\n\n\n\n\n\nInvoked when analytics session is created,", 
            "title": "c++"
        }, 
        {
            "location": "/plugins/flurryanalytics/v3-cpp/#flurry-analytics", 
            "text": "", 
            "title": "Flurry Analytics"
        }, 
        {
            "location": "/plugins/flurryanalytics/v3-cpp/#integration", 
            "text": "Use the following command to install the SDKBOX Flurry Analytics plugin, Make sure you setup SDKBOX installer correctly.  sdkbox import flurryanalytics", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/flurryanalytics/v3-cpp/#extra-steps", 
            "text": "Modify  Cocos2dxActivity.java    If you're using cocos2d-x from source, assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java    If you're using the prebuilt cocos2d-x libraries assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ./src/org/cocos2dx/lib/Cocos2dxActivity.java    Note:  When using Cocos2d-x from source, different versions have  Cocos2dxActivity.java  in a different location. One way to find the location is to look in  proj.android/project.properties . Example:  android.library.reference.1=../../cocos2d-x/cocos/platform/android/java  In this case,  Cocos2dxActivity.java  should be located at:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java   Modify  Cocos2dxActivity.java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify  Cocos2dxActivity  to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . The placement of this call is important. It must be done after the call to  onLoadNativeLibraries(); . Example:   onLoadNativeLibraries();\nSDKBox.init(this);    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }  Proguard (release, optional)   Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   Edit the file you specified to include the following:   -dontwarn android.webkit.**  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Extra steps"
        }, 
        {
            "location": "/plugins/flurryanalytics/v3-cpp/#configuration", 
            "text": "SDKBOX Installer will automatically inject a sample configuration to your  sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the Google Analytics configuration, you need to replace  API KEY   with your specific  Flurry Analytics ID  account information.\nHere is an example adding  FlurryAnalytics  to iOS:  FlurryAnalytics :{\n             APIKey : API KEY ,\n             AppVersion : V0.1 ,\n             Debug :false,\n             Level :2,\n             SessionTimeout :10,\n             CrashReport :true\n}  Adding  FlurryAnalytics  to Android is a bit different as it supports  locations ,  pulse  and  origin  settings. Here is an example adding  FlurryAnalytics  to Android:  FlurryAnalytics :{\n             APIKey : API KEY ,\n             AppVersion : V0.1 ,\n             Debug :false,\n             LogEvent :true,\n             Level :2,\n             SessionTimeout :10,\n             CrashReport :true,\n             LocationReport :true,\n             DefLocationLat :104.06,\n             DefLocationLon :30.67,\n             Pulse :true,\n             Origin :[\n                {\n                     OriginName : sdkbox ,\n                     OriginVersion : v0.1 ,\n                     OriginParams :{\n                         Key1 : Val1 ,\n                         Key2 : Val2 ,\n                         Key3 : Val3 \n                    }\n                },\n                {\n                     OriginName : sdkbox ,\n                     OriginVersion : v0.1 \n                }\n            ]\n}", 
            "title": "Configuration"
        }, 
        {
            "location": "/plugins/flurryanalytics/v3-cpp/#usage", 
            "text": "Initialize Flurry Analytics  Initialize the plugin where appropriate in your code. We recommend to do this in the  AppDelegate::applicationDidFinishLaunching()  or  AppController:didFinishLaunchingWithOptions() . Make sure to include the appropriate headers.  init()  and  startSession()  are required. Example:  #include  PluginFlurryAnalytics/PluginFlurryAnalytics.h \nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginFlurryAnalytics::init();\n     // start session\n     sdkbox::PluginFlurryAnalytics::startSession();\n}  Using Flurry Analytics  After initialization you can begin to use the Flurry Analytics functionality. Use  logevent  where ever you want from your code:  std::string eventName =  test event1 ;\nsdkbox::PluginFlurryAnalytics::logEvent(eventName);  Ending Flurry Analytics (Android only)  When you are finished using  FlurryAnalytics  or when your games ends. It is necessary to end the  FlurryAnalytics  session. This is a requirement for Android but optional on iOS. Example:  // end session just valid on android, but it's ok to invoke it on iOS\nsdkbox::PluginFlurryAnalytics::endSession();", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/flurryanalytics/v3-cpp/#api-reference", 
            "text": "Methods  static bool init ( ) ;   init plugin, must be first invoke   static void setAppVersion ( const std::string   version ) ;   Explicitly specifies the App Version that Flurry will use to group Analytics data.   static std::string getFlurryAgentVersion ( ) ;   Retrieves the Flurry Agent Build Version.   static void setShowErrorInLogEnabled ( bool value ) ;   Displays an exception in the debug log if thrown during a Session.   static void setDebugLogEnabled ( bool value ) ;   Generates debug logs to console.   static void setLogLevel ( FA_FlurryLogLevel value ) ;   Generates debug logs to console.   static void setSessionContinueSeconds ( float seconds ) ;   Set the timeout for expiring a Flurry session.   static void setCrashReportingEnabled ( bool value ) ;   Enable automatic collection of crash reports.   static void startSession ( ) ;   Start a Flurry session for the project denoted by @c apiKey.   static void endSession ( ) ;   end session, just valid on android   static bool activeSessionExists ( ) ;   Start a Flurry session for the project denoted by @c apiKey.   static std::string getSessionID ( ) ;   Start a Flurry session for the project denoted by @c apiKey.   static void pauseBackgroundSession ( ) ;   Pauses a Flurry session left running in background. on valid on ios   static void addOrigin ( const std::string   originName ,\n                        const std::string   originVersion ) ;   Adds an SDK origin specified by @c originName and @c originVersion.   static void addOrigin ( const std::string   originName ,\n                        const std::string   originVersion ,\n                        std::map  std::string ,\n                        std::string    parameters ) ;   Adds a custom parameterized origin specified by @c originName with @c originVersion and @c parameters.   static void addOrigin ( const std::string   originName ,\n                        const std::string   originVersion ,\n                        const std::string   parameters ) ;   just for lua, js binding, have the same function with addOrigin(string, string, map)   static int logEvent ( const std::string   eventName ) ;   Records a custom event specified by @c eventName.   static int logEvent ( const std::string   eventName ,\n                      std::map  std::string ,\n                      std::string    parameters ) ;   Records a custom parameterized event specified by @c eventName with @c parameters.   static int logEvent ( const std::string   eventName ,\n                      const std::string   parameters ) ;   just for lua, js binding, have same function with logEvent(string, map)   static int logEvent ( const std::string   eventName , bool timed ) ;   Records a timed event specified by @c eventName.   static int logEvent ( const std::string   eventName ,\n                      std::map  std::string ,\n                      std::string    parameters ,\n                      bool timed ) ;   Records a custom parameterized timed event specified by @c eventName with @c parameters.   static int logEvent ( const std::string   eventName ,\n                      const std::string   parameters ,\n                      bool timed ) ;   just for lua, js binding, have the same function with logEvent(string, map, bool)   static void endTimedEvent ( const std::string   eventId ) ;   End a timed event   static void endTimedEvent ( const std::string   eventName ,\n                            std::map  std::string ,\n                            std::string    parameters ) ;   Ends a timed event specified by @c eventName and optionally updates parameters with @c parameters.   static void endTimedEvent ( const std::string   eventName ,\n                            const std::string   parameters ) ;   just for lua, js binding, have same function with endTimeEvent(string, map)   static void logError ( const std::string   errorID ,\n                       const std::string   message ,\n                       const std::string   info ) ;   Records an app exception. Commonly used to catch unhandled exceptions.   static void logPageView ( ) ;   Explicitly track a page view during a session.   static void setUserID ( const std::string   userID ) ;   Assign a unique id for a user in your app.   static void setAge ( int age ) ;   Set your user's age in years.   static void setGender ( const std::string   gender ) ;   Set your user's gender.        static void setReportLocation ( bool reportLocation ) ;   Set whether Flurry should record location via GPS. Defaults to true. valid on android   static void setLatitude ( double latitude ,\n                          double longitude ,\n                          float horizontalAccuracy ,\n                          float verticalAccuracy ) ;   Set the location of the session.   static void clearLocation ( ) ;   clear the default location.valid on andriod   static void setSessionReportsOnCloseEnabled ( bool sendSessionReportsOnClose ) ;   Set session to report when app closes.valid on ios   static void setSessionReportsOnPauseEnabled ( bool setSessionReportsOnPauseEnabled ) ;   Set session to report when app is sent to the background.valid on ios   static void setBackgroundSessionEnabled ( bool setBackgroundSessionEnabled ) ;   Set session to support background execution.valid on ios   static void setEventLoggingEnabled ( bool value ) ;   Enable custom event logging.   static void setPulseEnabled ( bool value ) ;   Enables Flurry Pulse   static void setListener ( FlurryAnalyticsListener * listener ) ;   set listener for session callback   static FlurryAnalyticsListener * getListener ( ) ;   get listener   static void removeListener ( ) ;   remove listener, just set null, will not delete it\n        the user should delete listener self   Listeners  void flurrySessionDidCreateWithInfo ( std::map  std::string ,\n                                      std::string    info );   Invoked when analytics session is created,", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/flurryanalytics/v3-js/", 
            "text": "Flurry Analytics\n\n\nIntegration\n\n\nUse the following command to install the SDKBOX Flurry Analytics plugin, Make sure you setup SDKBOX installer correctly.\n\n\nsdkbox import flurryanalytics\n\n\n\n\nExtra steps\n\n\nModify \nCocos2dxActivity.java\n\n\n\n\n\n\nIf you're using cocos2d-x from source, assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java\n\n\n\n\n\n\nIf you're using the prebuilt cocos2d-x libraries assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n./src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nNote:\n When using Cocos2d-x from source, different versions have \nCocos2dxActivity.java\n in a different location. One way to find the location is to look in \nproj.android/project.properties\n. Example:\n\n\nandroid.library.reference.1=../../cocos2d-x/cocos/platform/android/java\n\n\n\n\nIn this case, \nCocos2dxActivity.java\n should be located at:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nModify \nCocos2dxActivity.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify \nCocos2dxActivity\n to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. The placement of this call is important. It must be done after the call to \nonLoadNativeLibraries();\n. Example:\n\n\n\n\nonLoadNativeLibraries();\nSDKBox.init(this);\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (release, optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n-dontwarn android.webkit.**\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.\n\n\nConfiguration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nsdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the Google Analytics configuration, you need to replace \nAPI KEY\n  with your specific \nFlurry Analytics ID\n account information.\nHere is an example adding \nFlurryAnalytics\n to iOS:\n\n\nFlurryAnalytics\n:{\n            \nAPIKey\n:\nAPI KEY\n,\n            \nAppVersion\n:\nV0.1\n,\n            \nDebug\n:false,\n            \nLevel\n:2,\n            \nSessionTimeout\n:10,\n            \nCrashReport\n:true\n}\n\n\n\n\nAdding \nFlurryAnalytics\n to Android is a bit different as it supports \nlocations\n, \npulse\n and \norigin\n settings. Here is an example adding \nFlurryAnalytics\n to Android:\n\n\nFlurryAnalytics\n:{\n            \nAPIKey\n:\nAPI KEY\n,\n            \nAppVersion\n:\nV0.1\n,\n            \nDebug\n:false,\n            \nLogEvent\n:true,\n            \nLevel\n:2,\n            \nSessionTimeout\n:10,\n            \nCrashReport\n:true,\n            \nLocationReport\n:true,\n            \nDefLocationLat\n:104.06,\n            \nDefLocationLon\n:30.67,\n            \nPulse\n:true,\n            \nOrigin\n:[\n                {\n                    \nOriginName\n:\nsdkbox\n,\n                    \nOriginVersion\n:\nv0.1\n,\n                    \nOriginParams\n:{\n                        \nKey1\n:\nVal1\n,\n                        \nKey2\n:\nVal2\n,\n                        \nKey3\n:\nVal3\n\n                    }\n                },\n                {\n                    \nOriginName\n:\nsdkbox\n,\n                    \nOriginVersion\n:\nv0.1\n\n                }\n            ]\n}\n\n\n\n\nUsage\n\n\nInitialize Flurry Analytics\n\n\n\n\nInitialize the plugin by calling \ninit()\n where appropriate in your code. We\nrecommend to do this in the \napp.js\n. Example:\n\n\n\n\nsdkbox.PluginFlurryAnalytics.init();\n\n\n\n\n\n\nModify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n to include the following headers:\n\n\n\n\n#include \nPluginFlurryAnalyticsJS.hpp\n\n#include \nPluginFlurryAnalyticsJSHelper.h\n\n\n\n\n\n\n\nModify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n make sure to call:\n\n\n\n\nsc-\naddRegisterCallback(register_all_PluginFlurryAnalyticsJS);\nsc-\naddRegisterCallback(register_PluginFlurryAnalyticsJs_helper);\n\n\n\n\nThis registers the Javascript callbacks.\n\n\nUsing Flurry Analytics\n\n\nAfter initialization you can begin to use the Flurry Analytics functionality. Use \nlogevent\n where ever you want from your code:\n\n\nsdkbox.PluginFlurryAnalytics.logEvent(\ntest event2 js\n, JSON.stringify({\neKey1\n:\neVal1\n, \neKey2\n:\neVal2\n}));\n\n\n\n\nCatch Flurry Analytics events (optional)\n\n\nThis allows you to catch the \nFlurryAnalytics\n events so that you can perform operations based upon responses. A simple example might look like this:\n\n\nsdkbox.PluginFlurryAnalytics.init();\nsdkbox.PluginFlurryAnalytics.setListener({\n    flurrySessionDidCreateWithInfo:function(info) {\n        var jsonInfo = JSON.parse(info)\n        console.log(\nsession started\n)\n        console.log(\nAPIKey :\n + jsonInfo.apiKey + \n session id :\n + jsonInfo.sessionId);\n        sdkbox.PluginFlurryAnalytics.logEvent(\ntest event2 js\n, JSON.stringify({\neKey1\n:\neVal1\n, \neKey2\n:\neVal2\n}));\n    }\n});\nsdkbox.PluginFlurryAnalytics.startSession();\n\n\n\n\nEnding Flurry Analytics (Android only)\n\n\nWhen you are finished using \nFlurryAnalytics\n or when your games ends. It is necessary to end the \nFlurryAnalytics\n session. This is a requirement for Android but optional on iOS. Example:\n\n\n// end session just valid on android, but it's ok to invoke it on iOS\nsdkbox.PluginFlurryAnalytics.endSession();\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginFlurryAnalytics.init();\n\n\n\n\n\n\ninit plugin, must be first invoke\n\n\n\n\nsdkbox.PluginFlurryAnalytics.setAppVersion(version);\n\n\n\n\n\n\nExplicitly specifies the App Version that Flurry will use to group Analytics data.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.getFlurryAgentVersion();\n\n\n\n\n\n\nRetrieves the Flurry Agent Build Version.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.setShowErrorInLogEnabled(value);\n\n\n\n\n\n\nDisplays an exception in the debug log if thrown during a Session.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.setDebugLogEnabled(value);\n\n\n\n\n\n\nGenerates debug logs to console.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.setLogLevel(value);\n\n\n\n\n\n\nGenerates debug logs to console.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.setSessionContinueSeconds(seconds);\n\n\n\n\n\n\nSet the timeout for expiring a Flurry session.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.setCrashReportingEnabled(value);\n\n\n\n\n\n\nEnable automatic collection of crash reports.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.startSession();\n\n\n\n\n\n\nStart a Flurry session for the project denoted by @c apiKey.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.endSession();\n\n\n\n\n\n\nend session, just valid on android\n\n\n\n\nsdkbox.PluginFlurryAnalytics.activeSessionExists();\n\n\n\n\n\n\nStart a Flurry session for the project denoted by @c apiKey.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.getSessionID();\n\n\n\n\n\n\nStart a Flurry session for the project denoted by @c apiKey.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.pauseBackgroundSession();\n\n\n\n\n\n\nPauses a Flurry session left running in background. on valid on ios\n\n\n\n\nsdkbox.PluginFlurryAnalytics.addOrigin(originName, originVersion);\n\n\n\n\n\n\nAdds an SDK origin specified by @c originName and @c originVersion.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.addOrigin(originName, originVersion, parameters);\n\n\n\n\n\n\nAdds a custom parameterized origin specified by @c originName with @c originVersion and @c parameters.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.addOrigin(originName, originVersion, parameters);\n\n\n\n\n\n\njust for lua, js binding, have the same function with addOrigin(string, string, map)\n\n\n\n\nsdkbox.PluginFlurryAnalytics.logEvent(eventName);\n\n\n\n\n\n\nRecords a custom event specified by @c eventName.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.logEvent(eventName, parameters);\n\n\n\n\n\n\nRecords a custom parameterized event specified by @c eventName with @c parameters.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.logEvent(eventName, parameters);\n\n\n\n\n\n\njust for lua, js binding, have same function with logEvent(string, map)\n\n\n\n\nsdkbox.PluginFlurryAnalytics.logEvent(eventName, timed);\n\n\n\n\n\n\nRecords a timed event specified by @c eventName.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.logEvent(eventName, parameters, timed);\n\n\n\n\n\n\nRecords a custom parameterized timed event specified by @c eventName with @c parameters.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.logEvent(eventName, parameters, timed);\n\n\n\n\n\n\njust for lua, js binding, have the same function with logEvent(string, map, bool)\n\n\n\n\nsdkbox.PluginFlurryAnalytics.endTimedEvent(eventId);\n\n\n\n\n\n\nEnd a timed event\n\n\n\n\nsdkbox.PluginFlurryAnalytics.endTimedEvent(eventName, parameters);\n\n\n\n\n\n\nEnds a timed event specified by @c eventName and optionally updates parameters with @c parameters.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.endTimedEvent(eventName, parameters);\n\n\n\n\n\n\njust for lua, js binding, have same function with endTimeEvent(string, map)\n\n\n\n\nsdkbox.PluginFlurryAnalytics.logError(errorID, message, info);\n\n\n\n\n\n\nRecords an app exception. Commonly used to catch unhandled exceptions.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.logPageView();\n\n\n\n\n\n\nExplicitly track a page view during a session.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.setUserID(userID);\n\n\n\n\n\n\nAssign a unique id for a user in your app.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.setAge(age);\n\n\n\n\n\n\nSet your user's age in years.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.setGender(gender);\n\n\n\n\n\n\nSet your user's gender.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.setReportLocation(reportLocation);\n\n\n\n\n\n\nSet whether Flurry should record location via GPS. Defaults to true. valid on android\n\n\n\n\nsdkbox.PluginFlurryAnalytics.setLatitude(latitude,\n                                          longitude,\n                                          horizontalAccuracy,\n                                          verticalAccuracy);\n\n\n\n\n\n\nSet the location of the session.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.clearLocation();\n\n\n\n\n\n\nclear the default location.valid on andriod\n\n\n\n\nsdkbox.PluginFlurryAnalytics.setSessionReportsOnCloseEnabled(sendSessionReportsOnClose);\n\n\n\n\n\n\nSet session to report when app closes.valid on ios\n\n\n\n\nsdkbox.PluginFlurryAnalytics.setSessionReportsOnPauseEnabled(setSessionReportsOnPauseEnabled);\n\n\n\n\n\n\nSet session to report when app is sent to the background.valid on ios\n\n\n\n\nsdkbox.PluginFlurryAnalytics.setBackgroundSessionEnabled(setBackgroundSessionEnabled);\n\n\n\n\n\n\nSet session to support background execution.valid on ios\n\n\n\n\nsdkbox.PluginFlurryAnalytics.setEventLoggingEnabled(value);\n\n\n\n\n\n\nEnable custom event logging.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.setPulseEnabled(value);\n\n\n\n\n\n\nEnables Flurry Pulse\n\n\n\n\nsdkbox.PluginFlurryAnalytics.setListener(listener);\n\n\n\n\n\n\nset listener for session callback\n\n\n\n\nListeners\n\n\nflurrySessionDidCreateWithInfo(info);\n\n\n\n\n\n\nInvoked when analytics session is created,", 
            "title": "js"
        }, 
        {
            "location": "/plugins/flurryanalytics/v3-js/#flurry-analytics", 
            "text": "", 
            "title": "Flurry Analytics"
        }, 
        {
            "location": "/plugins/flurryanalytics/v3-js/#integration", 
            "text": "Use the following command to install the SDKBOX Flurry Analytics plugin, Make sure you setup SDKBOX installer correctly.  sdkbox import flurryanalytics", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/flurryanalytics/v3-js/#extra-steps", 
            "text": "Modify  Cocos2dxActivity.java    If you're using cocos2d-x from source, assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java    If you're using the prebuilt cocos2d-x libraries assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ./src/org/cocos2dx/lib/Cocos2dxActivity.java    Note:  When using Cocos2d-x from source, different versions have  Cocos2dxActivity.java  in a different location. One way to find the location is to look in  proj.android/project.properties . Example:  android.library.reference.1=../../cocos2d-x/cocos/platform/android/java  In this case,  Cocos2dxActivity.java  should be located at:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java   Modify  Cocos2dxActivity.java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify  Cocos2dxActivity  to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . The placement of this call is important. It must be done after the call to  onLoadNativeLibraries(); . Example:   onLoadNativeLibraries();\nSDKBox.init(this);    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }  Proguard (release, optional)   Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   Edit the file you specified to include the following:   -dontwarn android.webkit.**  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Extra steps"
        }, 
        {
            "location": "/plugins/flurryanalytics/v3-js/#configuration", 
            "text": "SDKBOX Installer will automatically inject a sample configuration to your  sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the Google Analytics configuration, you need to replace  API KEY   with your specific  Flurry Analytics ID  account information.\nHere is an example adding  FlurryAnalytics  to iOS:  FlurryAnalytics :{\n             APIKey : API KEY ,\n             AppVersion : V0.1 ,\n             Debug :false,\n             Level :2,\n             SessionTimeout :10,\n             CrashReport :true\n}  Adding  FlurryAnalytics  to Android is a bit different as it supports  locations ,  pulse  and  origin  settings. Here is an example adding  FlurryAnalytics  to Android:  FlurryAnalytics :{\n             APIKey : API KEY ,\n             AppVersion : V0.1 ,\n             Debug :false,\n             LogEvent :true,\n             Level :2,\n             SessionTimeout :10,\n             CrashReport :true,\n             LocationReport :true,\n             DefLocationLat :104.06,\n             DefLocationLon :30.67,\n             Pulse :true,\n             Origin :[\n                {\n                     OriginName : sdkbox ,\n                     OriginVersion : v0.1 ,\n                     OriginParams :{\n                         Key1 : Val1 ,\n                         Key2 : Val2 ,\n                         Key3 : Val3 \n                    }\n                },\n                {\n                     OriginName : sdkbox ,\n                     OriginVersion : v0.1 \n                }\n            ]\n}", 
            "title": "Configuration"
        }, 
        {
            "location": "/plugins/flurryanalytics/v3-js/#usage", 
            "text": "Initialize Flurry Analytics   Initialize the plugin by calling  init()  where appropriate in your code. We\nrecommend to do this in the  app.js . Example:   sdkbox.PluginFlurryAnalytics.init();   Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  to include the following headers:   #include  PluginFlurryAnalyticsJS.hpp \n#include  PluginFlurryAnalyticsJSHelper.h    Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  make sure to call:   sc- addRegisterCallback(register_all_PluginFlurryAnalyticsJS);\nsc- addRegisterCallback(register_PluginFlurryAnalyticsJs_helper);  This registers the Javascript callbacks.  Using Flurry Analytics  After initialization you can begin to use the Flurry Analytics functionality. Use  logevent  where ever you want from your code:  sdkbox.PluginFlurryAnalytics.logEvent( test event2 js , JSON.stringify({ eKey1 : eVal1 ,  eKey2 : eVal2 }));  Catch Flurry Analytics events (optional)  This allows you to catch the  FlurryAnalytics  events so that you can perform operations based upon responses. A simple example might look like this:  sdkbox.PluginFlurryAnalytics.init();\nsdkbox.PluginFlurryAnalytics.setListener({\n    flurrySessionDidCreateWithInfo:function(info) {\n        var jsonInfo = JSON.parse(info)\n        console.log( session started )\n        console.log( APIKey :  + jsonInfo.apiKey +   session id :  + jsonInfo.sessionId);\n        sdkbox.PluginFlurryAnalytics.logEvent( test event2 js , JSON.stringify({ eKey1 : eVal1 ,  eKey2 : eVal2 }));\n    }\n});\nsdkbox.PluginFlurryAnalytics.startSession();  Ending Flurry Analytics (Android only)  When you are finished using  FlurryAnalytics  or when your games ends. It is necessary to end the  FlurryAnalytics  session. This is a requirement for Android but optional on iOS. Example:  // end session just valid on android, but it's ok to invoke it on iOS\nsdkbox.PluginFlurryAnalytics.endSession();", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/flurryanalytics/v3-js/#api-reference", 
            "text": "Methods  sdkbox.PluginFlurryAnalytics.init();   init plugin, must be first invoke   sdkbox.PluginFlurryAnalytics.setAppVersion(version);   Explicitly specifies the App Version that Flurry will use to group Analytics data.   sdkbox.PluginFlurryAnalytics.getFlurryAgentVersion();   Retrieves the Flurry Agent Build Version.   sdkbox.PluginFlurryAnalytics.setShowErrorInLogEnabled(value);   Displays an exception in the debug log if thrown during a Session.   sdkbox.PluginFlurryAnalytics.setDebugLogEnabled(value);   Generates debug logs to console.   sdkbox.PluginFlurryAnalytics.setLogLevel(value);   Generates debug logs to console.   sdkbox.PluginFlurryAnalytics.setSessionContinueSeconds(seconds);   Set the timeout for expiring a Flurry session.   sdkbox.PluginFlurryAnalytics.setCrashReportingEnabled(value);   Enable automatic collection of crash reports.   sdkbox.PluginFlurryAnalytics.startSession();   Start a Flurry session for the project denoted by @c apiKey.   sdkbox.PluginFlurryAnalytics.endSession();   end session, just valid on android   sdkbox.PluginFlurryAnalytics.activeSessionExists();   Start a Flurry session for the project denoted by @c apiKey.   sdkbox.PluginFlurryAnalytics.getSessionID();   Start a Flurry session for the project denoted by @c apiKey.   sdkbox.PluginFlurryAnalytics.pauseBackgroundSession();   Pauses a Flurry session left running in background. on valid on ios   sdkbox.PluginFlurryAnalytics.addOrigin(originName, originVersion);   Adds an SDK origin specified by @c originName and @c originVersion.   sdkbox.PluginFlurryAnalytics.addOrigin(originName, originVersion, parameters);   Adds a custom parameterized origin specified by @c originName with @c originVersion and @c parameters.   sdkbox.PluginFlurryAnalytics.addOrigin(originName, originVersion, parameters);   just for lua, js binding, have the same function with addOrigin(string, string, map)   sdkbox.PluginFlurryAnalytics.logEvent(eventName);   Records a custom event specified by @c eventName.   sdkbox.PluginFlurryAnalytics.logEvent(eventName, parameters);   Records a custom parameterized event specified by @c eventName with @c parameters.   sdkbox.PluginFlurryAnalytics.logEvent(eventName, parameters);   just for lua, js binding, have same function with logEvent(string, map)   sdkbox.PluginFlurryAnalytics.logEvent(eventName, timed);   Records a timed event specified by @c eventName.   sdkbox.PluginFlurryAnalytics.logEvent(eventName, parameters, timed);   Records a custom parameterized timed event specified by @c eventName with @c parameters.   sdkbox.PluginFlurryAnalytics.logEvent(eventName, parameters, timed);   just for lua, js binding, have the same function with logEvent(string, map, bool)   sdkbox.PluginFlurryAnalytics.endTimedEvent(eventId);   End a timed event   sdkbox.PluginFlurryAnalytics.endTimedEvent(eventName, parameters);   Ends a timed event specified by @c eventName and optionally updates parameters with @c parameters.   sdkbox.PluginFlurryAnalytics.endTimedEvent(eventName, parameters);   just for lua, js binding, have same function with endTimeEvent(string, map)   sdkbox.PluginFlurryAnalytics.logError(errorID, message, info);   Records an app exception. Commonly used to catch unhandled exceptions.   sdkbox.PluginFlurryAnalytics.logPageView();   Explicitly track a page view during a session.   sdkbox.PluginFlurryAnalytics.setUserID(userID);   Assign a unique id for a user in your app.   sdkbox.PluginFlurryAnalytics.setAge(age);   Set your user's age in years.   sdkbox.PluginFlurryAnalytics.setGender(gender);   Set your user's gender.   sdkbox.PluginFlurryAnalytics.setReportLocation(reportLocation);   Set whether Flurry should record location via GPS. Defaults to true. valid on android   sdkbox.PluginFlurryAnalytics.setLatitude(latitude,\n                                          longitude,\n                                          horizontalAccuracy,\n                                          verticalAccuracy);   Set the location of the session.   sdkbox.PluginFlurryAnalytics.clearLocation();   clear the default location.valid on andriod   sdkbox.PluginFlurryAnalytics.setSessionReportsOnCloseEnabled(sendSessionReportsOnClose);   Set session to report when app closes.valid on ios   sdkbox.PluginFlurryAnalytics.setSessionReportsOnPauseEnabled(setSessionReportsOnPauseEnabled);   Set session to report when app is sent to the background.valid on ios   sdkbox.PluginFlurryAnalytics.setBackgroundSessionEnabled(setBackgroundSessionEnabled);   Set session to support background execution.valid on ios   sdkbox.PluginFlurryAnalytics.setEventLoggingEnabled(value);   Enable custom event logging.   sdkbox.PluginFlurryAnalytics.setPulseEnabled(value);   Enables Flurry Pulse   sdkbox.PluginFlurryAnalytics.setListener(listener);   set listener for session callback   Listeners  flurrySessionDidCreateWithInfo(info);   Invoked when analytics session is created,", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/flurryanalytics/v3-lua/", 
            "text": "Flurry Analytics\n\n\nIntegration\n\n\nUse the following command to install the SDKBOX Flurry Analytics plugin, Make sure you setup SDKBOX installer correctly.\n\n\nsdkbox import flurryanalytics\n\n\n\n\nExtra steps\n\n\nModify \nCocos2dxActivity.java\n\n\n\n\n\n\nIf you're using cocos2d-x from source, assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java\n\n\n\n\n\n\nIf you're using the prebuilt cocos2d-x libraries assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n./src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nNote:\n When using Cocos2d-x from source, different versions have \nCocos2dxActivity.java\n in a different location. One way to find the location is to look in \nproj.android/project.properties\n. Example:\n\n\nandroid.library.reference.1=../../cocos2d-x/cocos/platform/android/java\n\n\n\n\nIn this case, \nCocos2dxActivity.java\n should be located at:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nModify \nCocos2dxActivity.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify \nCocos2dxActivity\n to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. The placement of this call is important. It must be done after the call to \nonLoadNativeLibraries();\n. Example:\n\n\n\n\nonLoadNativeLibraries();\nSDKBox.init(this);\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (release, optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n-dontwarn android.webkit.**\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.\n\n\nConfiguration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nsdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the Google Analytics configuration, you need to replace \nAPI KEY\n  with your specific \nFlurry Analytics ID\n account information.\nHere is an example adding \nFlurryAnalytics\n to iOS:\n\n\nFlurryAnalytics\n:{\n            \nAPIKey\n:\nAPI KEY\n,\n            \nAppVersion\n:\nV0.1\n,\n            \nDebug\n:false,\n            \nLevel\n:2,\n            \nSessionTimeout\n:10,\n            \nCrashReport\n:true\n}\n\n\n\n\nAdding \nFlurryAnalytics\n to Android is a bit different as it supports \nlocations\n, \npulse\n and \norigin\n settings. Here is an example adding \nFlurryAnalytics\n to Android:\n\n\nFlurryAnalytics\n:{\n            \nAPIKey\n:\nAPI KEY\n,\n            \nAppVersion\n:\nV0.1\n,\n            \nDebug\n:false,\n            \nLogEvent\n:true,\n            \nLevel\n:2,\n            \nSessionTimeout\n:10,\n            \nCrashReport\n:true,\n            \nLocationReport\n:true,\n            \nDefLocationLat\n:104.06,\n            \nDefLocationLon\n:30.67,\n            \nPulse\n:true,\n            \nOrigin\n:[\n                {\n                    \nOriginName\n:\nsdkbox\n,\n                    \nOriginVersion\n:\nv0.1\n,\n                    \nOriginParams\n:{\n                        \nKey1\n:\nVal1\n,\n                        \nKey2\n:\nVal2\n,\n                        \nKey3\n:\nVal3\n\n                    }\n                },\n                {\n                    \nOriginName\n:\nsdkbox\n,\n                    \nOriginVersion\n:\nv0.1\n\n                }\n            ]\n}\n\n\n\n\nUsage\n\n\nModify Lua Code\n\n\nModify \n./frameworks/runtime-src/Classes/lua_module_register.h\n to include the necessary headers and calls to register \nFlurryAnalytics\n with Lua. Note this takes a parameter of \nlua_State*\n:\n\n\n#include \nPluginFlurryAnalyticsLua.hpp\n\n#include \nPluginFlurryAnalyticsLuaHelper.h\n\n\n\n\n\nstatic int lua_module_register(lua_State* L)\n{\n  register_all_PluginFlurryAnalyticsLua(L);\n  register_PluginFlurryAnalyticsLua_helper(L);\n}\n\n\n\n\nInitialize Flurry Analytics\n\n\n\n\nmodify your Lua code to \ninit()\n the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:init()\n\n\n\n\nUsing Flurry Analytics\n\n\nAfter initialization you can begin to use the Flurry Analytics functionality. Use \nlogevent\n where ever you want from your code:\n\n\nlocal eventName = \ntest event1\n\nsdkbox.PluginFlurryAnalytics:logEvent(eventName)\n\n\n\n\nCatch Flurry Analytics events (optional)\n\n\nThis allows you to catch the \nFlurryAnalytics\n events so that you can perform operations based upon responses. A simple example might look like this:\n\n\nsdkbox.PluginFlurryAnalytics:init()\nsdkbox.PluginFlurryAnalytics:setListener(function(data)\n        local ret = json.decode(data)\n        print(\napiKey:\n, ret.apiKey, \nsessionId:\n, ret.sessionId)\n        -- check session state\n        print(\nFlurry analytics session exist: \n, f:activeSessionExists())\n        print(\nFlurry analytics session: \n, f:getSessionID())\n        local eventName = \ntest event1\n\n        sdkbox.PluginFlurryAnalytics:logEvent(eventName)\n    end)\nsdkbox.PluginFlurryAnalytics:startSession()\n\n\n\n\nEnding Flurry Analytics (Android only)\n\n\nWhen you are finished using \nFlurryAnalytics\n or when your games ends. It is necessary to end the \nFlurryAnalytics\n session. This is a requirement for Android but optional on iOS. Example:\n\n\n// end session just valid on android, but it's ok to invoke it on iOS\nsdkbox.PluginFlurryAnalytics:endSession()\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginFlurryAnalytics:init();\n\n\n\n\n\n\ninit plugin, must be first invoke\n\n\n\n\nsdkbox.PluginFlurryAnalytics:setAppVersion(version);\n\n\n\n\n\n\nExplicitly specifies the App Version that Flurry will use to group Analytics data.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:getFlurryAgentVersion();\n\n\n\n\n\n\nRetrieves the Flurry Agent Build Version.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:setShowErrorInLogEnabled(value);\n\n\n\n\n\n\nDisplays an exception in the debug log if thrown during a Session.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:setDebugLogEnabled(value);\n\n\n\n\n\n\nGenerates debug logs to console.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:setLogLevel(value);\n\n\n\n\n\n\nGenerates debug logs to console.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:setSessionContinueSeconds(seconds);\n\n\n\n\n\n\nSet the timeout for expiring a Flurry session.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:setCrashReportingEnabled(value);\n\n\n\n\n\n\nEnable automatic collection of crash reports.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:startSession();\n\n\n\n\n\n\nStart a Flurry session for the project denoted by @c apiKey.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:endSession();\n\n\n\n\n\n\nend session, just valid on android\n\n\n\n\nsdkbox.PluginFlurryAnalytics:activeSessionExists();\n\n\n\n\n\n\nStart a Flurry session for the project denoted by @c apiKey.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:getSessionID();\n\n\n\n\n\n\nStart a Flurry session for the project denoted by @c apiKey.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:pauseBackgroundSession();\n\n\n\n\n\n\nPauses a Flurry session left running in background. on valid on ios\n\n\n\n\nsdkbox.PluginFlurryAnalytics:addOrigin(originName, originVersion);\n\n\n\n\n\n\nAdds an SDK origin specified by @c originName and @c originVersion.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:addOrigin(originName, originVersion, parameters);\n\n\n\n\n\n\nAdds a custom parameterized origin specified by @c originName with @c originVersion and @c parameters.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:addOrigin(originName, originVersion, parameters);\n\n\n\n\n\n\njust for lua, js binding, have the same function with addOrigin(string, string, map)\n\n\n\n\nsdkbox.PluginFlurryAnalytics:logEvent(eventName);\n\n\n\n\n\n\nRecords a custom event specified by @c eventName.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:logEvent(eventName, parameters);\n\n\n\n\n\n\nRecords a custom parameterized event specified by @c eventName with @c parameters.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:logEvent(eventName, parameters);\n\n\n\n\n\n\njust for lua, js binding, have same function with logEvent(string, map)\n\n\n\n\nsdkbox.PluginFlurryAnalytics:logEvent(eventName, timed);\n\n\n\n\n\n\nRecords a timed event specified by @c eventName.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:logEvent(eventName, parameters, timed);\n\n\n\n\n\n\nRecords a custom parameterized timed event specified by @c eventName with @c parameters.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:logEvent(eventName, parameters, timed);\n\n\n\n\n\n\njust for lua, js binding, have the same function with logEvent(string, map, bool)\n\n\n\n\nsdkbox.PluginFlurryAnalytics:endTimedEvent(eventId);\n\n\n\n\n\n\nEnd a timed event\n\n\n\n\nsdkbox.PluginFlurryAnalytics:endTimedEvent(eventName, parameters);\n\n\n\n\n\n\nEnds a timed event specified by @c eventName and optionally updates parameters with @c parameters.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:endTimedEvent(eventName, parameters);\n\n\n\n\n\n\njust for lua, js binding, have same function with endTimeEvent(string, map)\n\n\n\n\nsdkbox.PluginFlurryAnalytics:logError(errorID, message, info);\n\n\n\n\n\n\nRecords an app exception. Commonly used to catch unhandled exceptions.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:logPageView();\n\n\n\n\n\n\nExplicitly track a page view during a session.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:setUserID(userID);\n\n\n\n\n\n\nAssign a unique id for a user in your app.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:setAge(age);\n\n\n\n\n\n\nSet your user's age in years.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:setGender(gender);\n\n\n\n\n\n\nSet your user's gender.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:setReportLocation(reportLocation);\n\n\n\n\n\n\nSet whether Flurry should record location via GPS. Defaults to true. valid on android\n\n\n\n\nsdkbox.PluginFlurryAnalytics:setLatitude(latitude,\n                                          longitude,\n                                          horizontalAccuracy,\n                                          verticalAccuracy);\n\n\n\n\n\n\nSet the location of the session.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:clearLocation();\n\n\n\n\n\n\nclear the default location.valid on andriod\n\n\n\n\nsdkbox.PluginFlurryAnalytics:setSessionReportsOnCloseEnabled(sendSessionReportsOnClose);\n\n\n\n\n\n\nSet session to report when app closes.valid on ios\n\n\n\n\nsdkbox.PluginFlurryAnalytics:setSessionReportsOnPauseEnabled(setSessionReportsOnPauseEnabled);\n\n\n\n\n\n\nSet session to report when app is sent to the background.valid on ios\n\n\n\n\nsdkbox.PluginFlurryAnalytics:setBackgroundSessionEnabled(setBackgroundSessionEnabled);\n\n\n\n\n\n\nSet session to support background execution.valid on ios\n\n\n\n\nsdkbox.PluginFlurryAnalytics:setEventLoggingEnabled(value);\n\n\n\n\n\n\nEnable custom event logging.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:setPulseEnabled(value);\n\n\n\n\n\n\nEnables Flurry Pulse\n\n\n\n\nsdkbox.PluginFlurryAnalytics:setListener(listener);\n\n\n\n\n\n\nset listener for session callback\n\n\n\n\nListeners\n\n\nflurrySessionDidCreateWithInfo(info);\n\n\n\n\n\n\nInvoked when analytics session is created,", 
            "title": "lua"
        }, 
        {
            "location": "/plugins/flurryanalytics/v3-lua/#flurry-analytics", 
            "text": "", 
            "title": "Flurry Analytics"
        }, 
        {
            "location": "/plugins/flurryanalytics/v3-lua/#integration", 
            "text": "Use the following command to install the SDKBOX Flurry Analytics plugin, Make sure you setup SDKBOX installer correctly.  sdkbox import flurryanalytics", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/flurryanalytics/v3-lua/#extra-steps", 
            "text": "Modify  Cocos2dxActivity.java    If you're using cocos2d-x from source, assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java    If you're using the prebuilt cocos2d-x libraries assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ./src/org/cocos2dx/lib/Cocos2dxActivity.java    Note:  When using Cocos2d-x from source, different versions have  Cocos2dxActivity.java  in a different location. One way to find the location is to look in  proj.android/project.properties . Example:  android.library.reference.1=../../cocos2d-x/cocos/platform/android/java  In this case,  Cocos2dxActivity.java  should be located at:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java   Modify  Cocos2dxActivity.java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify  Cocos2dxActivity  to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . The placement of this call is important. It must be done after the call to  onLoadNativeLibraries(); . Example:   onLoadNativeLibraries();\nSDKBox.init(this);    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }  Proguard (release, optional)   Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   Edit the file you specified to include the following:   -dontwarn android.webkit.**  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Extra steps"
        }, 
        {
            "location": "/plugins/flurryanalytics/v3-lua/#configuration", 
            "text": "SDKBOX Installer will automatically inject a sample configuration to your  sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the Google Analytics configuration, you need to replace  API KEY   with your specific  Flurry Analytics ID  account information.\nHere is an example adding  FlurryAnalytics  to iOS:  FlurryAnalytics :{\n             APIKey : API KEY ,\n             AppVersion : V0.1 ,\n             Debug :false,\n             Level :2,\n             SessionTimeout :10,\n             CrashReport :true\n}  Adding  FlurryAnalytics  to Android is a bit different as it supports  locations ,  pulse  and  origin  settings. Here is an example adding  FlurryAnalytics  to Android:  FlurryAnalytics :{\n             APIKey : API KEY ,\n             AppVersion : V0.1 ,\n             Debug :false,\n             LogEvent :true,\n             Level :2,\n             SessionTimeout :10,\n             CrashReport :true,\n             LocationReport :true,\n             DefLocationLat :104.06,\n             DefLocationLon :30.67,\n             Pulse :true,\n             Origin :[\n                {\n                     OriginName : sdkbox ,\n                     OriginVersion : v0.1 ,\n                     OriginParams :{\n                         Key1 : Val1 ,\n                         Key2 : Val2 ,\n                         Key3 : Val3 \n                    }\n                },\n                {\n                     OriginName : sdkbox ,\n                     OriginVersion : v0.1 \n                }\n            ]\n}", 
            "title": "Configuration"
        }, 
        {
            "location": "/plugins/flurryanalytics/v3-lua/#usage", 
            "text": "Modify Lua Code  Modify  ./frameworks/runtime-src/Classes/lua_module_register.h  to include the necessary headers and calls to register  FlurryAnalytics  with Lua. Note this takes a parameter of  lua_State* :  #include  PluginFlurryAnalyticsLua.hpp \n#include  PluginFlurryAnalyticsLuaHelper.h   static int lua_module_register(lua_State* L)\n{\n  register_all_PluginFlurryAnalyticsLua(L);\n  register_PluginFlurryAnalyticsLua_helper(L);\n}  Initialize Flurry Analytics   modify your Lua code to  init()  the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.   sdkbox.PluginFlurryAnalytics:init()  Using Flurry Analytics  After initialization you can begin to use the Flurry Analytics functionality. Use  logevent  where ever you want from your code:  local eventName =  test event1 \nsdkbox.PluginFlurryAnalytics:logEvent(eventName)  Catch Flurry Analytics events (optional)  This allows you to catch the  FlurryAnalytics  events so that you can perform operations based upon responses. A simple example might look like this:  sdkbox.PluginFlurryAnalytics:init()\nsdkbox.PluginFlurryAnalytics:setListener(function(data)\n        local ret = json.decode(data)\n        print( apiKey: , ret.apiKey,  sessionId: , ret.sessionId)\n        -- check session state\n        print( Flurry analytics session exist:  , f:activeSessionExists())\n        print( Flurry analytics session:  , f:getSessionID())\n        local eventName =  test event1 \n        sdkbox.PluginFlurryAnalytics:logEvent(eventName)\n    end)\nsdkbox.PluginFlurryAnalytics:startSession()  Ending Flurry Analytics (Android only)  When you are finished using  FlurryAnalytics  or when your games ends. It is necessary to end the  FlurryAnalytics  session. This is a requirement for Android but optional on iOS. Example:  // end session just valid on android, but it's ok to invoke it on iOS\nsdkbox.PluginFlurryAnalytics:endSession()", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/flurryanalytics/v3-lua/#api-reference", 
            "text": "Methods  sdkbox.PluginFlurryAnalytics:init();   init plugin, must be first invoke   sdkbox.PluginFlurryAnalytics:setAppVersion(version);   Explicitly specifies the App Version that Flurry will use to group Analytics data.   sdkbox.PluginFlurryAnalytics:getFlurryAgentVersion();   Retrieves the Flurry Agent Build Version.   sdkbox.PluginFlurryAnalytics:setShowErrorInLogEnabled(value);   Displays an exception in the debug log if thrown during a Session.   sdkbox.PluginFlurryAnalytics:setDebugLogEnabled(value);   Generates debug logs to console.   sdkbox.PluginFlurryAnalytics:setLogLevel(value);   Generates debug logs to console.   sdkbox.PluginFlurryAnalytics:setSessionContinueSeconds(seconds);   Set the timeout for expiring a Flurry session.   sdkbox.PluginFlurryAnalytics:setCrashReportingEnabled(value);   Enable automatic collection of crash reports.   sdkbox.PluginFlurryAnalytics:startSession();   Start a Flurry session for the project denoted by @c apiKey.   sdkbox.PluginFlurryAnalytics:endSession();   end session, just valid on android   sdkbox.PluginFlurryAnalytics:activeSessionExists();   Start a Flurry session for the project denoted by @c apiKey.   sdkbox.PluginFlurryAnalytics:getSessionID();   Start a Flurry session for the project denoted by @c apiKey.   sdkbox.PluginFlurryAnalytics:pauseBackgroundSession();   Pauses a Flurry session left running in background. on valid on ios   sdkbox.PluginFlurryAnalytics:addOrigin(originName, originVersion);   Adds an SDK origin specified by @c originName and @c originVersion.   sdkbox.PluginFlurryAnalytics:addOrigin(originName, originVersion, parameters);   Adds a custom parameterized origin specified by @c originName with @c originVersion and @c parameters.   sdkbox.PluginFlurryAnalytics:addOrigin(originName, originVersion, parameters);   just for lua, js binding, have the same function with addOrigin(string, string, map)   sdkbox.PluginFlurryAnalytics:logEvent(eventName);   Records a custom event specified by @c eventName.   sdkbox.PluginFlurryAnalytics:logEvent(eventName, parameters);   Records a custom parameterized event specified by @c eventName with @c parameters.   sdkbox.PluginFlurryAnalytics:logEvent(eventName, parameters);   just for lua, js binding, have same function with logEvent(string, map)   sdkbox.PluginFlurryAnalytics:logEvent(eventName, timed);   Records a timed event specified by @c eventName.   sdkbox.PluginFlurryAnalytics:logEvent(eventName, parameters, timed);   Records a custom parameterized timed event specified by @c eventName with @c parameters.   sdkbox.PluginFlurryAnalytics:logEvent(eventName, parameters, timed);   just for lua, js binding, have the same function with logEvent(string, map, bool)   sdkbox.PluginFlurryAnalytics:endTimedEvent(eventId);   End a timed event   sdkbox.PluginFlurryAnalytics:endTimedEvent(eventName, parameters);   Ends a timed event specified by @c eventName and optionally updates parameters with @c parameters.   sdkbox.PluginFlurryAnalytics:endTimedEvent(eventName, parameters);   just for lua, js binding, have same function with endTimeEvent(string, map)   sdkbox.PluginFlurryAnalytics:logError(errorID, message, info);   Records an app exception. Commonly used to catch unhandled exceptions.   sdkbox.PluginFlurryAnalytics:logPageView();   Explicitly track a page view during a session.   sdkbox.PluginFlurryAnalytics:setUserID(userID);   Assign a unique id for a user in your app.   sdkbox.PluginFlurryAnalytics:setAge(age);   Set your user's age in years.   sdkbox.PluginFlurryAnalytics:setGender(gender);   Set your user's gender.   sdkbox.PluginFlurryAnalytics:setReportLocation(reportLocation);   Set whether Flurry should record location via GPS. Defaults to true. valid on android   sdkbox.PluginFlurryAnalytics:setLatitude(latitude,\n                                          longitude,\n                                          horizontalAccuracy,\n                                          verticalAccuracy);   Set the location of the session.   sdkbox.PluginFlurryAnalytics:clearLocation();   clear the default location.valid on andriod   sdkbox.PluginFlurryAnalytics:setSessionReportsOnCloseEnabled(sendSessionReportsOnClose);   Set session to report when app closes.valid on ios   sdkbox.PluginFlurryAnalytics:setSessionReportsOnPauseEnabled(setSessionReportsOnPauseEnabled);   Set session to report when app is sent to the background.valid on ios   sdkbox.PluginFlurryAnalytics:setBackgroundSessionEnabled(setBackgroundSessionEnabled);   Set session to support background execution.valid on ios   sdkbox.PluginFlurryAnalytics:setEventLoggingEnabled(value);   Enable custom event logging.   sdkbox.PluginFlurryAnalytics:setPulseEnabled(value);   Enables Flurry Pulse   sdkbox.PluginFlurryAnalytics:setListener(listener);   set listener for session callback   Listeners  flurrySessionDidCreateWithInfo(info);   Invoked when analytics session is created,", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/flurryanalytics/v2-cpp/", 
            "text": "Flurry Analytics\n\n\nIntegration\n\n\nUse the following command to install the SDKBOX Flurry Analytics plugin, Make sure you setup SDKBOX installer correctly.\n\n\nsdkbox import flurryanalytics\n\n\n\n\nExtra steps\n\n\nModify \nYourGameName\n.java\n\n\n\n\nModify \nproj.android/src/\npackage identifier\n/\nYourGameName\n.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify the class to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. Example of what this might look like for you:\n\n\n\n\nprotected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (release, optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n-dontwarn android.webkit.**\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.\n\n\nConfiguration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nsdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the Google Analytics configuration, you need to replace \nAPI KEY\n  with your specific \nFlurry Analytics ID\n account information.\nHere is an example adding \nFlurryAnalytics\n to iOS:\n\n\nFlurryAnalytics\n:{\n            \nAPIKey\n:\nAPI KEY\n,\n            \nAppVersion\n:\nV0.1\n,\n            \nDebug\n:false,\n            \nLevel\n:2,\n            \nSessionTimeout\n:10,\n            \nCrashReport\n:true\n}\n\n\n\n\nAdding \nFlurryAnalytics\n to Android is a bit different as it supports \nlocations\n, \npulse\n and \norigin\n settings. Here is an example adding \nFlurryAnalytics\n to Android:\n\n\nFlurryAnalytics\n:{\n            \nAPIKey\n:\nAPI KEY\n,\n            \nAppVersion\n:\nV0.1\n,\n            \nDebug\n:false,\n            \nLogEvent\n:true,\n            \nLevel\n:2,\n            \nSessionTimeout\n:10,\n            \nCrashReport\n:true,\n            \nLocationReport\n:true,\n            \nDefLocationLat\n:104.06,\n            \nDefLocationLon\n:30.67,\n            \nPulse\n:true,\n            \nOrigin\n:[\n                {\n                    \nOriginName\n:\nsdkbox\n,\n                    \nOriginVersion\n:\nv0.1\n,\n                    \nOriginParams\n:{\n                        \nKey1\n:\nVal1\n,\n                        \nKey2\n:\nVal2\n,\n                        \nKey3\n:\nVal3\n\n                    }\n                },\n                {\n                    \nOriginName\n:\nsdkbox\n,\n                    \nOriginVersion\n:\nv0.1\n\n                }\n            ]\n}\n\n\n\n\nUsage\n\n\nInitialize Flurry Analytics\n\n\nInitialize the plugin where appropriate in your code. We recommend to do this in the \nAppDelegate::applicationDidFinishLaunching()\n or \nAppController:didFinishLaunchingWithOptions()\n. Make sure to include the appropriate headers. \ninit()\n and \nstartSession()\n are required. Example:\n\n\n#include \nPluginFlurryAnalytics/PluginFlurryAnalytics.h\n\nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginFlurryAnalytics::init();\n     // start session\n     sdkbox::PluginFlurryAnalytics::startSession();\n}\n\n\n\n\nUsing Flurry Analytics\n\n\nAfter initialization you can begin to use the Flurry Analytics functionality. Use \nlogevent\n where ever you want from your code:\n\n\nstd::string eventName = \ntest event1\n;\nsdkbox::PluginFlurryAnalytics::logEvent(eventName);\n\n\n\n\nEnding Flurry Analytics (Android only)\n\n\nWhen you are finished using \nFlurryAnalytics\n or when your games ends. It is necessary to end the \nFlurryAnalytics\n session. This is a requirement for Android but optional on iOS. Example:\n\n\n// end session just valid on android, but it's ok to invoke it on iOS\nsdkbox::PluginFlurryAnalytics::endSession();\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nstatic bool init ( ) ;\n\n\n\n\n\n\ninit plugin, must be first invoke\n\n\n\n\nstatic void setAppVersion ( const std::string \n version ) ;\n\n\n\n\n\n\nExplicitly specifies the App Version that Flurry will use to group Analytics data.\n\n\n\n\nstatic std::string getFlurryAgentVersion ( ) ;\n\n\n\n\n\n\nRetrieves the Flurry Agent Build Version.\n\n\n\n\nstatic void setShowErrorInLogEnabled ( bool value ) ;\n\n\n\n\n\n\nDisplays an exception in the debug log if thrown during a Session.\n\n\n\n\nstatic void setDebugLogEnabled ( bool value ) ;\n\n\n\n\n\n\nGenerates debug logs to console.\n\n\n\n\nstatic void setLogLevel ( FA_FlurryLogLevel value ) ;\n\n\n\n\n\n\nGenerates debug logs to console.\n\n\n\n\nstatic void setSessionContinueSeconds ( float seconds ) ;\n\n\n\n\n\n\nSet the timeout for expiring a Flurry session.\n\n\n\n\nstatic void setCrashReportingEnabled ( bool value ) ;\n\n\n\n\n\n\nEnable automatic collection of crash reports.\n\n\n\n\nstatic void startSession ( ) ;\n\n\n\n\n\n\nStart a Flurry session for the project denoted by @c apiKey.\n\n\n\n\nstatic void endSession ( ) ;\n\n\n\n\n\n\nend session, just valid on android\n\n\n\n\nstatic bool activeSessionExists ( ) ;\n\n\n\n\n\n\nStart a Flurry session for the project denoted by @c apiKey.\n\n\n\n\nstatic std::string getSessionID ( ) ;\n\n\n\n\n\n\nStart a Flurry session for the project denoted by @c apiKey.\n\n\n\n\nstatic void pauseBackgroundSession ( ) ;\n\n\n\n\n\n\nPauses a Flurry session left running in background. on valid on ios\n\n\n\n\nstatic void addOrigin ( const std::string \n originName ,\n                        const std::string \n originVersion ) ;\n\n\n\n\n\n\nAdds an SDK origin specified by @c originName and @c originVersion.\n\n\n\n\nstatic void addOrigin ( const std::string \n originName ,\n                        const std::string \n originVersion ,\n                        std::map \nstd::string ,\n                        std::string\n \n parameters ) ;\n\n\n\n\n\n\nAdds a custom parameterized origin specified by @c originName with @c originVersion and @c parameters.\n\n\n\n\nstatic void addOrigin ( const std::string \n originName ,\n                        const std::string \n originVersion ,\n                        const std::string \n parameters ) ;\n\n\n\n\n\n\njust for lua, js binding, have the same function with addOrigin(string, string, map)\n\n\n\n\nstatic int logEvent ( const std::string \n eventName ) ;\n\n\n\n\n\n\nRecords a custom event specified by @c eventName.\n\n\n\n\nstatic int logEvent ( const std::string \n eventName ,\n                      std::map \nstd::string ,\n                      std::string\n \n parameters ) ;\n\n\n\n\n\n\nRecords a custom parameterized event specified by @c eventName with @c parameters.\n\n\n\n\nstatic int logEvent ( const std::string \n eventName ,\n                      const std::string \n parameters ) ;\n\n\n\n\n\n\njust for lua, js binding, have same function with logEvent(string, map)\n\n\n\n\nstatic int logEvent ( const std::string \n eventName , bool timed ) ;\n\n\n\n\n\n\nRecords a timed event specified by @c eventName.\n\n\n\n\nstatic int logEvent ( const std::string \n eventName ,\n                      std::map \nstd::string ,\n                      std::string\n \n parameters ,\n                      bool timed ) ;\n\n\n\n\n\n\nRecords a custom parameterized timed event specified by @c eventName with @c parameters.\n\n\n\n\nstatic int logEvent ( const std::string \n eventName ,\n                      const std::string \n parameters ,\n                      bool timed ) ;\n\n\n\n\n\n\njust for lua, js binding, have the same function with logEvent(string, map, bool)\n\n\n\n\nstatic void endTimedEvent ( const std::string \n eventId ) ;\n\n\n\n\n\n\nEnd a timed event\n\n\n\n\nstatic void endTimedEvent ( const std::string \n eventName ,\n                            std::map \nstd::string ,\n                            std::string\n \n parameters ) ;\n\n\n\n\n\n\nEnds a timed event specified by @c eventName and optionally updates parameters with @c parameters.\n\n\n\n\nstatic void endTimedEvent ( const std::string \n eventName ,\n                            const std::string \n parameters ) ;\n\n\n\n\n\n\njust for lua, js binding, have same function with endTimeEvent(string, map)\n\n\n\n\nstatic void logError ( const std::string \n errorID ,\n                       const std::string \n message ,\n                       const std::string \n info ) ;\n\n\n\n\n\n\nRecords an app exception. Commonly used to catch unhandled exceptions.\n\n\n\n\nstatic void logPageView ( ) ;\n\n\n\n\n\n\nExplicitly track a page view during a session.\n\n\n\n\nstatic void setUserID ( const std::string \n userID ) ;\n\n\n\n\n\n\nAssign a unique id for a user in your app.\n\n\n\n\nstatic void setAge ( int age ) ;\n\n\n\n\n\n\nSet your user's age in years.\n\n\n\n\nstatic void setGender ( const std::string \n gender ) ;\n\n\n\n\n\n\nSet your user's gender.\n\n\n\n\n     static void setReportLocation ( bool reportLocation ) ;\n\n\n\n\n\n\nSet whether Flurry should record location via GPS. Defaults to true. valid on android\n\n\n\n\nstatic void setLatitude ( double latitude ,\n                          double longitude ,\n                          float horizontalAccuracy ,\n                          float verticalAccuracy ) ;\n\n\n\n\n\n\nSet the location of the session.\n\n\n\n\nstatic void clearLocation ( ) ;\n\n\n\n\n\n\nclear the default location.valid on andriod\n\n\n\n\nstatic void setSessionReportsOnCloseEnabled ( bool sendSessionReportsOnClose ) ;\n\n\n\n\n\n\nSet session to report when app closes.valid on ios\n\n\n\n\nstatic void setSessionReportsOnPauseEnabled ( bool setSessionReportsOnPauseEnabled ) ;\n\n\n\n\n\n\nSet session to report when app is sent to the background.valid on ios\n\n\n\n\nstatic void setBackgroundSessionEnabled ( bool setBackgroundSessionEnabled ) ;\n\n\n\n\n\n\nSet session to support background execution.valid on ios\n\n\n\n\nstatic void setEventLoggingEnabled ( bool value ) ;\n\n\n\n\n\n\nEnable custom event logging.\n\n\n\n\nstatic void setPulseEnabled ( bool value ) ;\n\n\n\n\n\n\nEnables Flurry Pulse\n\n\n\n\nstatic void setListener ( FlurryAnalyticsListener * listener ) ;\n\n\n\n\n\n\nset listener for session callback\n\n\n\n\nstatic FlurryAnalyticsListener * getListener ( ) ;\n\n\n\n\n\n\nget listener\n\n\n\n\nstatic void removeListener ( ) ;\n\n\n\n\n\n\nremove listener, just set null, will not delete it\n        the user should delete listener self\n\n\n\n\nListeners\n\n\nvoid flurrySessionDidCreateWithInfo ( std::map \nstd::string ,\n                                      std::string\n \n info );\n\n\n\n\n\n\nInvoked when analytics session is created,", 
            "title": "c++"
        }, 
        {
            "location": "/plugins/flurryanalytics/v2-cpp/#flurry-analytics", 
            "text": "", 
            "title": "Flurry Analytics"
        }, 
        {
            "location": "/plugins/flurryanalytics/v2-cpp/#integration", 
            "text": "Use the following command to install the SDKBOX Flurry Analytics plugin, Make sure you setup SDKBOX installer correctly.  sdkbox import flurryanalytics", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/flurryanalytics/v2-cpp/#extra-steps", 
            "text": "Modify  YourGameName .java   Modify  proj.android/src/ package identifier / YourGameName .java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify the class to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . Example of what this might look like for you:   protected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }  Proguard (release, optional)   Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   Edit the file you specified to include the following:   -dontwarn android.webkit.**  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Extra steps"
        }, 
        {
            "location": "/plugins/flurryanalytics/v2-cpp/#configuration", 
            "text": "SDKBOX Installer will automatically inject a sample configuration to your  sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the Google Analytics configuration, you need to replace  API KEY   with your specific  Flurry Analytics ID  account information.\nHere is an example adding  FlurryAnalytics  to iOS:  FlurryAnalytics :{\n             APIKey : API KEY ,\n             AppVersion : V0.1 ,\n             Debug :false,\n             Level :2,\n             SessionTimeout :10,\n             CrashReport :true\n}  Adding  FlurryAnalytics  to Android is a bit different as it supports  locations ,  pulse  and  origin  settings. Here is an example adding  FlurryAnalytics  to Android:  FlurryAnalytics :{\n             APIKey : API KEY ,\n             AppVersion : V0.1 ,\n             Debug :false,\n             LogEvent :true,\n             Level :2,\n             SessionTimeout :10,\n             CrashReport :true,\n             LocationReport :true,\n             DefLocationLat :104.06,\n             DefLocationLon :30.67,\n             Pulse :true,\n             Origin :[\n                {\n                     OriginName : sdkbox ,\n                     OriginVersion : v0.1 ,\n                     OriginParams :{\n                         Key1 : Val1 ,\n                         Key2 : Val2 ,\n                         Key3 : Val3 \n                    }\n                },\n                {\n                     OriginName : sdkbox ,\n                     OriginVersion : v0.1 \n                }\n            ]\n}", 
            "title": "Configuration"
        }, 
        {
            "location": "/plugins/flurryanalytics/v2-cpp/#usage", 
            "text": "Initialize Flurry Analytics  Initialize the plugin where appropriate in your code. We recommend to do this in the  AppDelegate::applicationDidFinishLaunching()  or  AppController:didFinishLaunchingWithOptions() . Make sure to include the appropriate headers.  init()  and  startSession()  are required. Example:  #include  PluginFlurryAnalytics/PluginFlurryAnalytics.h \nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginFlurryAnalytics::init();\n     // start session\n     sdkbox::PluginFlurryAnalytics::startSession();\n}  Using Flurry Analytics  After initialization you can begin to use the Flurry Analytics functionality. Use  logevent  where ever you want from your code:  std::string eventName =  test event1 ;\nsdkbox::PluginFlurryAnalytics::logEvent(eventName);  Ending Flurry Analytics (Android only)  When you are finished using  FlurryAnalytics  or when your games ends. It is necessary to end the  FlurryAnalytics  session. This is a requirement for Android but optional on iOS. Example:  // end session just valid on android, but it's ok to invoke it on iOS\nsdkbox::PluginFlurryAnalytics::endSession();", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/flurryanalytics/v2-cpp/#api-reference", 
            "text": "Methods  static bool init ( ) ;   init plugin, must be first invoke   static void setAppVersion ( const std::string   version ) ;   Explicitly specifies the App Version that Flurry will use to group Analytics data.   static std::string getFlurryAgentVersion ( ) ;   Retrieves the Flurry Agent Build Version.   static void setShowErrorInLogEnabled ( bool value ) ;   Displays an exception in the debug log if thrown during a Session.   static void setDebugLogEnabled ( bool value ) ;   Generates debug logs to console.   static void setLogLevel ( FA_FlurryLogLevel value ) ;   Generates debug logs to console.   static void setSessionContinueSeconds ( float seconds ) ;   Set the timeout for expiring a Flurry session.   static void setCrashReportingEnabled ( bool value ) ;   Enable automatic collection of crash reports.   static void startSession ( ) ;   Start a Flurry session for the project denoted by @c apiKey.   static void endSession ( ) ;   end session, just valid on android   static bool activeSessionExists ( ) ;   Start a Flurry session for the project denoted by @c apiKey.   static std::string getSessionID ( ) ;   Start a Flurry session for the project denoted by @c apiKey.   static void pauseBackgroundSession ( ) ;   Pauses a Flurry session left running in background. on valid on ios   static void addOrigin ( const std::string   originName ,\n                        const std::string   originVersion ) ;   Adds an SDK origin specified by @c originName and @c originVersion.   static void addOrigin ( const std::string   originName ,\n                        const std::string   originVersion ,\n                        std::map  std::string ,\n                        std::string    parameters ) ;   Adds a custom parameterized origin specified by @c originName with @c originVersion and @c parameters.   static void addOrigin ( const std::string   originName ,\n                        const std::string   originVersion ,\n                        const std::string   parameters ) ;   just for lua, js binding, have the same function with addOrigin(string, string, map)   static int logEvent ( const std::string   eventName ) ;   Records a custom event specified by @c eventName.   static int logEvent ( const std::string   eventName ,\n                      std::map  std::string ,\n                      std::string    parameters ) ;   Records a custom parameterized event specified by @c eventName with @c parameters.   static int logEvent ( const std::string   eventName ,\n                      const std::string   parameters ) ;   just for lua, js binding, have same function with logEvent(string, map)   static int logEvent ( const std::string   eventName , bool timed ) ;   Records a timed event specified by @c eventName.   static int logEvent ( const std::string   eventName ,\n                      std::map  std::string ,\n                      std::string    parameters ,\n                      bool timed ) ;   Records a custom parameterized timed event specified by @c eventName with @c parameters.   static int logEvent ( const std::string   eventName ,\n                      const std::string   parameters ,\n                      bool timed ) ;   just for lua, js binding, have the same function with logEvent(string, map, bool)   static void endTimedEvent ( const std::string   eventId ) ;   End a timed event   static void endTimedEvent ( const std::string   eventName ,\n                            std::map  std::string ,\n                            std::string    parameters ) ;   Ends a timed event specified by @c eventName and optionally updates parameters with @c parameters.   static void endTimedEvent ( const std::string   eventName ,\n                            const std::string   parameters ) ;   just for lua, js binding, have same function with endTimeEvent(string, map)   static void logError ( const std::string   errorID ,\n                       const std::string   message ,\n                       const std::string   info ) ;   Records an app exception. Commonly used to catch unhandled exceptions.   static void logPageView ( ) ;   Explicitly track a page view during a session.   static void setUserID ( const std::string   userID ) ;   Assign a unique id for a user in your app.   static void setAge ( int age ) ;   Set your user's age in years.   static void setGender ( const std::string   gender ) ;   Set your user's gender.        static void setReportLocation ( bool reportLocation ) ;   Set whether Flurry should record location via GPS. Defaults to true. valid on android   static void setLatitude ( double latitude ,\n                          double longitude ,\n                          float horizontalAccuracy ,\n                          float verticalAccuracy ) ;   Set the location of the session.   static void clearLocation ( ) ;   clear the default location.valid on andriod   static void setSessionReportsOnCloseEnabled ( bool sendSessionReportsOnClose ) ;   Set session to report when app closes.valid on ios   static void setSessionReportsOnPauseEnabled ( bool setSessionReportsOnPauseEnabled ) ;   Set session to report when app is sent to the background.valid on ios   static void setBackgroundSessionEnabled ( bool setBackgroundSessionEnabled ) ;   Set session to support background execution.valid on ios   static void setEventLoggingEnabled ( bool value ) ;   Enable custom event logging.   static void setPulseEnabled ( bool value ) ;   Enables Flurry Pulse   static void setListener ( FlurryAnalyticsListener * listener ) ;   set listener for session callback   static FlurryAnalyticsListener * getListener ( ) ;   get listener   static void removeListener ( ) ;   remove listener, just set null, will not delete it\n        the user should delete listener self   Listeners  void flurrySessionDidCreateWithInfo ( std::map  std::string ,\n                                      std::string    info );   Invoked when analytics session is created,", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/flurryanalytics/v2-js/", 
            "text": "Flurry Analytics\n\n\nIntegration\n\n\nUse the following command to install the SDKBOX Flurry Analytics plugin, Make sure you setup SDKBOX installer correctly.\n\n\nsdkbox import flurryanalytics\n\n\n\n\nExtra steps\n\n\nModify \nYourGameName\n.java\n\n\n\n\nModify \nproj.android/src/\npackage identifier\n/\nYourGameName\n.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify the class to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. Example of what this might look like for you:\n\n\n\n\nprotected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (release, optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n-dontwarn android.webkit.**\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.\n\n\nConfiguration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nsdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the Google Analytics configuration, you need to replace \nAPI KEY\n  with your specific \nFlurry Analytics ID\n account information.\nHere is an example adding \nFlurryAnalytics\n to iOS:\n\n\nFlurryAnalytics\n:{\n            \nAPIKey\n:\nAPI KEY\n,\n            \nAppVersion\n:\nV0.1\n,\n            \nDebug\n:false,\n            \nLevel\n:2,\n            \nSessionTimeout\n:10,\n            \nCrashReport\n:true\n}\n\n\n\n\nAdding \nFlurryAnalytics\n to Android is a bit different as it supports \nlocations\n, \npulse\n and \norigin\n settings. Here is an example adding \nFlurryAnalytics\n to Android:\n\n\nFlurryAnalytics\n:{\n            \nAPIKey\n:\nAPI KEY\n,\n            \nAppVersion\n:\nV0.1\n,\n            \nDebug\n:false,\n            \nLogEvent\n:true,\n            \nLevel\n:2,\n            \nSessionTimeout\n:10,\n            \nCrashReport\n:true,\n            \nLocationReport\n:true,\n            \nDefLocationLat\n:104.06,\n            \nDefLocationLon\n:30.67,\n            \nPulse\n:true,\n            \nOrigin\n:[\n                {\n                    \nOriginName\n:\nsdkbox\n,\n                    \nOriginVersion\n:\nv0.1\n,\n                    \nOriginParams\n:{\n                        \nKey1\n:\nVal1\n,\n                        \nKey2\n:\nVal2\n,\n                        \nKey3\n:\nVal3\n\n                    }\n                },\n                {\n                    \nOriginName\n:\nsdkbox\n,\n                    \nOriginVersion\n:\nv0.1\n\n                }\n            ]\n}\n\n\n\n\nUsage\n\n\nInitialize Flurry Analytics\n\n\n\n\nInitialize the plugin by calling \ninit()\n where appropriate in your code. We\nrecommend to do this in the \napp.js\n. Example:\n\n\n\n\nsdkbox.PluginFlurryAnalytics.init();\n\n\n\n\n\n\nModify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n to include the following headers:\n\n\n\n\n#include \nPluginFlurryAnalyticsJS.hpp\n\n#include \nPluginFlurryAnalyticsJSHelper.h\n\n\n\n\n\n\n\nModify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n make sure to call:\n\n\n\n\nsc-\naddRegisterCallback(register_all_PluginFlurryAnalyticsJS);\nsc-\naddRegisterCallback(register_PluginFlurryAnalyticsJs_helper);\n\n\n\n\nThis registers the Javascript callbacks.\n\n\nUsing Flurry Analytics\n\n\nAfter initialization you can begin to use the Flurry Analytics functionality. Use \nlogevent\n where ever you want from your code:\n\n\nsdkbox.PluginFlurryAnalytics.logEvent(\ntest event2 js\n, JSON.stringify({\neKey1\n:\neVal1\n, \neKey2\n:\neVal2\n}));\n\n\n\n\nCatch Flurry Analytics events (optional)\n\n\nThis allows you to catch the \nFlurryAnalytics\n events so that you can perform operations based upon responses. A simple example might look like this:\n\n\nsdkbox.PluginFlurryAnalytics.init();\nsdkbox.PluginFlurryAnalytics.setListener({\n    flurrySessionDidCreateWithInfo:function(info) {\n        var jsonInfo = JSON.parse(info)\n        console.log(\nsession started\n)\n        console.log(\nAPIKey :\n + jsonInfo.apiKey + \n session id :\n + jsonInfo.sessionId);\n        sdkbox.PluginFlurryAnalytics.logEvent(\ntest event2 js\n, JSON.stringify({\neKey1\n:\neVal1\n, \neKey2\n:\neVal2\n}));\n    }\n});\nsdkbox.PluginFlurryAnalytics.startSession();\n\n\n\n\nEnding Flurry Analytics (Android only)\n\n\nWhen you are finished using \nFlurryAnalytics\n or when your games ends. It is necessary to end the \nFlurryAnalytics\n session. This is a requirement for Android but optional on iOS. Example:\n\n\n// end session just valid on android, but it's ok to invoke it on iOS\nsdkbox.PluginFlurryAnalytics.endSession();\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginFlurryAnalytics.init();\n\n\n\n\n\n\ninit plugin, must be first invoke\n\n\n\n\nsdkbox.PluginFlurryAnalytics.setAppVersion(version);\n\n\n\n\n\n\nExplicitly specifies the App Version that Flurry will use to group Analytics data.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.getFlurryAgentVersion();\n\n\n\n\n\n\nRetrieves the Flurry Agent Build Version.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.setShowErrorInLogEnabled(value);\n\n\n\n\n\n\nDisplays an exception in the debug log if thrown during a Session.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.setDebugLogEnabled(value);\n\n\n\n\n\n\nGenerates debug logs to console.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.setLogLevel(value);\n\n\n\n\n\n\nGenerates debug logs to console.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.setSessionContinueSeconds(seconds);\n\n\n\n\n\n\nSet the timeout for expiring a Flurry session.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.setCrashReportingEnabled(value);\n\n\n\n\n\n\nEnable automatic collection of crash reports.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.startSession();\n\n\n\n\n\n\nStart a Flurry session for the project denoted by @c apiKey.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.endSession();\n\n\n\n\n\n\nend session, just valid on android\n\n\n\n\nsdkbox.PluginFlurryAnalytics.activeSessionExists();\n\n\n\n\n\n\nStart a Flurry session for the project denoted by @c apiKey.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.getSessionID();\n\n\n\n\n\n\nStart a Flurry session for the project denoted by @c apiKey.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.pauseBackgroundSession();\n\n\n\n\n\n\nPauses a Flurry session left running in background. on valid on ios\n\n\n\n\nsdkbox.PluginFlurryAnalytics.addOrigin(originName, originVersion);\n\n\n\n\n\n\nAdds an SDK origin specified by @c originName and @c originVersion.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.addOrigin(originName, originVersion, parameters);\n\n\n\n\n\n\nAdds a custom parameterized origin specified by @c originName with @c originVersion and @c parameters.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.addOrigin(originName, originVersion, parameters);\n\n\n\n\n\n\njust for lua, js binding, have the same function with addOrigin(string, string, map)\n\n\n\n\nsdkbox.PluginFlurryAnalytics.logEvent(eventName);\n\n\n\n\n\n\nRecords a custom event specified by @c eventName.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.logEvent(eventName, parameters);\n\n\n\n\n\n\nRecords a custom parameterized event specified by @c eventName with @c parameters.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.logEvent(eventName, parameters);\n\n\n\n\n\n\njust for lua, js binding, have same function with logEvent(string, map)\n\n\n\n\nsdkbox.PluginFlurryAnalytics.logEvent(eventName, timed);\n\n\n\n\n\n\nRecords a timed event specified by @c eventName.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.logEvent(eventName, parameters, timed);\n\n\n\n\n\n\nRecords a custom parameterized timed event specified by @c eventName with @c parameters.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.logEvent(eventName, parameters, timed);\n\n\n\n\n\n\njust for lua, js binding, have the same function with logEvent(string, map, bool)\n\n\n\n\nsdkbox.PluginFlurryAnalytics.endTimedEvent(eventId);\n\n\n\n\n\n\nEnd a timed event\n\n\n\n\nsdkbox.PluginFlurryAnalytics.endTimedEvent(eventName, parameters);\n\n\n\n\n\n\nEnds a timed event specified by @c eventName and optionally updates parameters with @c parameters.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.endTimedEvent(eventName, parameters);\n\n\n\n\n\n\njust for lua, js binding, have same function with endTimeEvent(string, map)\n\n\n\n\nsdkbox.PluginFlurryAnalytics.logError(errorID, message, info);\n\n\n\n\n\n\nRecords an app exception. Commonly used to catch unhandled exceptions.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.logPageView();\n\n\n\n\n\n\nExplicitly track a page view during a session.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.setUserID(userID);\n\n\n\n\n\n\nAssign a unique id for a user in your app.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.setAge(age);\n\n\n\n\n\n\nSet your user's age in years.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.setGender(gender);\n\n\n\n\n\n\nSet your user's gender.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.setReportLocation(reportLocation);\n\n\n\n\n\n\nSet whether Flurry should record location via GPS. Defaults to true. valid on android\n\n\n\n\nsdkbox.PluginFlurryAnalytics.setLatitude(latitude,\n                                          longitude,\n                                          horizontalAccuracy,\n                                          verticalAccuracy);\n\n\n\n\n\n\nSet the location of the session.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.clearLocation();\n\n\n\n\n\n\nclear the default location.valid on andriod\n\n\n\n\nsdkbox.PluginFlurryAnalytics.setSessionReportsOnCloseEnabled(sendSessionReportsOnClose);\n\n\n\n\n\n\nSet session to report when app closes.valid on ios\n\n\n\n\nsdkbox.PluginFlurryAnalytics.setSessionReportsOnPauseEnabled(setSessionReportsOnPauseEnabled);\n\n\n\n\n\n\nSet session to report when app is sent to the background.valid on ios\n\n\n\n\nsdkbox.PluginFlurryAnalytics.setBackgroundSessionEnabled(setBackgroundSessionEnabled);\n\n\n\n\n\n\nSet session to support background execution.valid on ios\n\n\n\n\nsdkbox.PluginFlurryAnalytics.setEventLoggingEnabled(value);\n\n\n\n\n\n\nEnable custom event logging.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.setPulseEnabled(value);\n\n\n\n\n\n\nEnables Flurry Pulse\n\n\n\n\nsdkbox.PluginFlurryAnalytics.setListener(listener);\n\n\n\n\n\n\nset listener for session callback\n\n\n\n\nListeners\n\n\nflurrySessionDidCreateWithInfo(info);\n\n\n\n\n\n\nInvoked when analytics session is created,", 
            "title": "js"
        }, 
        {
            "location": "/plugins/flurryanalytics/v2-js/#flurry-analytics", 
            "text": "", 
            "title": "Flurry Analytics"
        }, 
        {
            "location": "/plugins/flurryanalytics/v2-js/#integration", 
            "text": "Use the following command to install the SDKBOX Flurry Analytics plugin, Make sure you setup SDKBOX installer correctly.  sdkbox import flurryanalytics", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/flurryanalytics/v2-js/#extra-steps", 
            "text": "Modify  YourGameName .java   Modify  proj.android/src/ package identifier / YourGameName .java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify the class to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . Example of what this might look like for you:   protected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }  Proguard (release, optional)   Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   Edit the file you specified to include the following:   -dontwarn android.webkit.**  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Extra steps"
        }, 
        {
            "location": "/plugins/flurryanalytics/v2-js/#configuration", 
            "text": "SDKBOX Installer will automatically inject a sample configuration to your  sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the Google Analytics configuration, you need to replace  API KEY   with your specific  Flurry Analytics ID  account information.\nHere is an example adding  FlurryAnalytics  to iOS:  FlurryAnalytics :{\n             APIKey : API KEY ,\n             AppVersion : V0.1 ,\n             Debug :false,\n             Level :2,\n             SessionTimeout :10,\n             CrashReport :true\n}  Adding  FlurryAnalytics  to Android is a bit different as it supports  locations ,  pulse  and  origin  settings. Here is an example adding  FlurryAnalytics  to Android:  FlurryAnalytics :{\n             APIKey : API KEY ,\n             AppVersion : V0.1 ,\n             Debug :false,\n             LogEvent :true,\n             Level :2,\n             SessionTimeout :10,\n             CrashReport :true,\n             LocationReport :true,\n             DefLocationLat :104.06,\n             DefLocationLon :30.67,\n             Pulse :true,\n             Origin :[\n                {\n                     OriginName : sdkbox ,\n                     OriginVersion : v0.1 ,\n                     OriginParams :{\n                         Key1 : Val1 ,\n                         Key2 : Val2 ,\n                         Key3 : Val3 \n                    }\n                },\n                {\n                     OriginName : sdkbox ,\n                     OriginVersion : v0.1 \n                }\n            ]\n}", 
            "title": "Configuration"
        }, 
        {
            "location": "/plugins/flurryanalytics/v2-js/#usage", 
            "text": "Initialize Flurry Analytics   Initialize the plugin by calling  init()  where appropriate in your code. We\nrecommend to do this in the  app.js . Example:   sdkbox.PluginFlurryAnalytics.init();   Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  to include the following headers:   #include  PluginFlurryAnalyticsJS.hpp \n#include  PluginFlurryAnalyticsJSHelper.h    Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  make sure to call:   sc- addRegisterCallback(register_all_PluginFlurryAnalyticsJS);\nsc- addRegisterCallback(register_PluginFlurryAnalyticsJs_helper);  This registers the Javascript callbacks.  Using Flurry Analytics  After initialization you can begin to use the Flurry Analytics functionality. Use  logevent  where ever you want from your code:  sdkbox.PluginFlurryAnalytics.logEvent( test event2 js , JSON.stringify({ eKey1 : eVal1 ,  eKey2 : eVal2 }));  Catch Flurry Analytics events (optional)  This allows you to catch the  FlurryAnalytics  events so that you can perform operations based upon responses. A simple example might look like this:  sdkbox.PluginFlurryAnalytics.init();\nsdkbox.PluginFlurryAnalytics.setListener({\n    flurrySessionDidCreateWithInfo:function(info) {\n        var jsonInfo = JSON.parse(info)\n        console.log( session started )\n        console.log( APIKey :  + jsonInfo.apiKey +   session id :  + jsonInfo.sessionId);\n        sdkbox.PluginFlurryAnalytics.logEvent( test event2 js , JSON.stringify({ eKey1 : eVal1 ,  eKey2 : eVal2 }));\n    }\n});\nsdkbox.PluginFlurryAnalytics.startSession();  Ending Flurry Analytics (Android only)  When you are finished using  FlurryAnalytics  or when your games ends. It is necessary to end the  FlurryAnalytics  session. This is a requirement for Android but optional on iOS. Example:  // end session just valid on android, but it's ok to invoke it on iOS\nsdkbox.PluginFlurryAnalytics.endSession();", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/flurryanalytics/v2-js/#api-reference", 
            "text": "Methods  sdkbox.PluginFlurryAnalytics.init();   init plugin, must be first invoke   sdkbox.PluginFlurryAnalytics.setAppVersion(version);   Explicitly specifies the App Version that Flurry will use to group Analytics data.   sdkbox.PluginFlurryAnalytics.getFlurryAgentVersion();   Retrieves the Flurry Agent Build Version.   sdkbox.PluginFlurryAnalytics.setShowErrorInLogEnabled(value);   Displays an exception in the debug log if thrown during a Session.   sdkbox.PluginFlurryAnalytics.setDebugLogEnabled(value);   Generates debug logs to console.   sdkbox.PluginFlurryAnalytics.setLogLevel(value);   Generates debug logs to console.   sdkbox.PluginFlurryAnalytics.setSessionContinueSeconds(seconds);   Set the timeout for expiring a Flurry session.   sdkbox.PluginFlurryAnalytics.setCrashReportingEnabled(value);   Enable automatic collection of crash reports.   sdkbox.PluginFlurryAnalytics.startSession();   Start a Flurry session for the project denoted by @c apiKey.   sdkbox.PluginFlurryAnalytics.endSession();   end session, just valid on android   sdkbox.PluginFlurryAnalytics.activeSessionExists();   Start a Flurry session for the project denoted by @c apiKey.   sdkbox.PluginFlurryAnalytics.getSessionID();   Start a Flurry session for the project denoted by @c apiKey.   sdkbox.PluginFlurryAnalytics.pauseBackgroundSession();   Pauses a Flurry session left running in background. on valid on ios   sdkbox.PluginFlurryAnalytics.addOrigin(originName, originVersion);   Adds an SDK origin specified by @c originName and @c originVersion.   sdkbox.PluginFlurryAnalytics.addOrigin(originName, originVersion, parameters);   Adds a custom parameterized origin specified by @c originName with @c originVersion and @c parameters.   sdkbox.PluginFlurryAnalytics.addOrigin(originName, originVersion, parameters);   just for lua, js binding, have the same function with addOrigin(string, string, map)   sdkbox.PluginFlurryAnalytics.logEvent(eventName);   Records a custom event specified by @c eventName.   sdkbox.PluginFlurryAnalytics.logEvent(eventName, parameters);   Records a custom parameterized event specified by @c eventName with @c parameters.   sdkbox.PluginFlurryAnalytics.logEvent(eventName, parameters);   just for lua, js binding, have same function with logEvent(string, map)   sdkbox.PluginFlurryAnalytics.logEvent(eventName, timed);   Records a timed event specified by @c eventName.   sdkbox.PluginFlurryAnalytics.logEvent(eventName, parameters, timed);   Records a custom parameterized timed event specified by @c eventName with @c parameters.   sdkbox.PluginFlurryAnalytics.logEvent(eventName, parameters, timed);   just for lua, js binding, have the same function with logEvent(string, map, bool)   sdkbox.PluginFlurryAnalytics.endTimedEvent(eventId);   End a timed event   sdkbox.PluginFlurryAnalytics.endTimedEvent(eventName, parameters);   Ends a timed event specified by @c eventName and optionally updates parameters with @c parameters.   sdkbox.PluginFlurryAnalytics.endTimedEvent(eventName, parameters);   just for lua, js binding, have same function with endTimeEvent(string, map)   sdkbox.PluginFlurryAnalytics.logError(errorID, message, info);   Records an app exception. Commonly used to catch unhandled exceptions.   sdkbox.PluginFlurryAnalytics.logPageView();   Explicitly track a page view during a session.   sdkbox.PluginFlurryAnalytics.setUserID(userID);   Assign a unique id for a user in your app.   sdkbox.PluginFlurryAnalytics.setAge(age);   Set your user's age in years.   sdkbox.PluginFlurryAnalytics.setGender(gender);   Set your user's gender.   sdkbox.PluginFlurryAnalytics.setReportLocation(reportLocation);   Set whether Flurry should record location via GPS. Defaults to true. valid on android   sdkbox.PluginFlurryAnalytics.setLatitude(latitude,\n                                          longitude,\n                                          horizontalAccuracy,\n                                          verticalAccuracy);   Set the location of the session.   sdkbox.PluginFlurryAnalytics.clearLocation();   clear the default location.valid on andriod   sdkbox.PluginFlurryAnalytics.setSessionReportsOnCloseEnabled(sendSessionReportsOnClose);   Set session to report when app closes.valid on ios   sdkbox.PluginFlurryAnalytics.setSessionReportsOnPauseEnabled(setSessionReportsOnPauseEnabled);   Set session to report when app is sent to the background.valid on ios   sdkbox.PluginFlurryAnalytics.setBackgroundSessionEnabled(setBackgroundSessionEnabled);   Set session to support background execution.valid on ios   sdkbox.PluginFlurryAnalytics.setEventLoggingEnabled(value);   Enable custom event logging.   sdkbox.PluginFlurryAnalytics.setPulseEnabled(value);   Enables Flurry Pulse   sdkbox.PluginFlurryAnalytics.setListener(listener);   set listener for session callback   Listeners  flurrySessionDidCreateWithInfo(info);   Invoked when analytics session is created,", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/flurryanalytics/v2-lua/", 
            "text": "Flurry Analytics\n\n\nIntegration\n\n\nUse the following command to install the SDKBOX Flurry Analytics plugin, Make sure you setup SDKBOX installer correctly.\n\n\nsdkbox import flurryanalytics\n\n\n\n\nExtra steps\n\n\nModify \nYourGameName\n.java\n\n\n\n\nModify \nproj.android/src/\npackage identifier\n/\nYourGameName\n.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify the class to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. Example of what this might look like for you:\n\n\n\n\nprotected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (release, optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n-dontwarn android.webkit.**\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.\n\n\nConfiguration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nsdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the Google Analytics configuration, you need to replace \nAPI KEY\n  with your specific \nFlurry Analytics ID\n account information.\nHere is an example adding \nFlurryAnalytics\n to iOS:\n\n\nFlurryAnalytics\n:{\n            \nAPIKey\n:\nAPI KEY\n,\n            \nAppVersion\n:\nV0.1\n,\n            \nDebug\n:false,\n            \nLevel\n:2,\n            \nSessionTimeout\n:10,\n            \nCrashReport\n:true\n}\n\n\n\n\nAdding \nFlurryAnalytics\n to Android is a bit different as it supports \nlocations\n, \npulse\n and \norigin\n settings. Here is an example adding \nFlurryAnalytics\n to Android:\n\n\nFlurryAnalytics\n:{\n            \nAPIKey\n:\nAPI KEY\n,\n            \nAppVersion\n:\nV0.1\n,\n            \nDebug\n:false,\n            \nLogEvent\n:true,\n            \nLevel\n:2,\n            \nSessionTimeout\n:10,\n            \nCrashReport\n:true,\n            \nLocationReport\n:true,\n            \nDefLocationLat\n:104.06,\n            \nDefLocationLon\n:30.67,\n            \nPulse\n:true,\n            \nOrigin\n:[\n                {\n                    \nOriginName\n:\nsdkbox\n,\n                    \nOriginVersion\n:\nv0.1\n,\n                    \nOriginParams\n:{\n                        \nKey1\n:\nVal1\n,\n                        \nKey2\n:\nVal2\n,\n                        \nKey3\n:\nVal3\n\n                    }\n                },\n                {\n                    \nOriginName\n:\nsdkbox\n,\n                    \nOriginVersion\n:\nv0.1\n\n                }\n            ]\n}\n\n\n\n\nUsage\n\n\nModify Lua Code\n\n\n\n\nmodify \nAppDelegate.cpp\n to include the following headers:\n\n\n\n\n#include \nPluginFlurryAnalyticsLua.hpp\n\n#include \nPluginFlurryAnalyticsLuaHelper.h\n\n\n\n\n\n\n\nWe need to register the plugin with Lua. This is done by making a call to \nregister_all_PluginFlurryAnalyticsLua(\nlua_State*\n);\n. It is important to note that this call must be made after \nlua_State *tolua_s = pStack-\ngetLuaState();\n and before \ntolua_extensions_ccb_open(tolua_s);\n. Here is an example of what this might look like for you:\n\n\n\n\nlua_State *tolua_s = pStack-\ngetLuaState();\nregister_all_PluginFlurryAnalyticsLua(tolua_s);\nregister_PluginFlurryAnalyticsLua_helper(tolua_s);\ntolua_extensions_ccb_open(tolua_s);\n\n\n\n\nInitialize Flurry Analytics\n\n\n\n\nmodify your Lua code to \ninit()\n the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:init();\n\n\n\n\nUsing Flurry Analytics\n\n\nAfter initialization you can begin to use the Flurry Analytics functionality. Use \nlogevent\n where ever you want from your code:\n\n\nlocal eventName = \ntest event1\n\nsdkbox.PluginFlurryAnalytics:logEvent(eventName);\n\n\n\n\nCatch Flurry Analytics events (optional)\n\n\nThis allows you to catch the \nFlurryAnalytics\n events so that you can perform operations based upon responses. A simple example might look like this:\n\n\nsdkbox.PluginFlurryAnalytics:init()\nsdkbox.PluginFlurryAnalytics:setListener(function(data)\n        local ret = json.decode(data)\n        print(\napiKey:\n, ret.apiKey, \nsessionId:\n, ret.sessionId)\n        -- check session state\n        print(\nFlurry analytics session exist: \n, f:activeSessionExists())\n        print(\nFlurry analytics session: \n, f:getSessionID())\n        local eventName = \ntest event1\n\n        sdkbox.PluginFlurryAnalytics:logEvent(eventName);\n    end)\nsdkbox.PluginFlurryAnalytics:startSession()\n\n\n\n\nEnding Flurry Analytics (Android only)\n\n\nWhen you are finished using \nFlurryAnalytics\n or when your games ends. It is necessary to end the \nFlurryAnalytics\n session. This is a requirement for Android but optional on iOS. Example:\n\n\n// end session just valid on android, but it's ok to invoke it on iOS\nsdkbox.PluginFlurryAnalytics:endSession();\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginFlurryAnalytics:init();\n\n\n\n\n\n\ninit plugin, must be first invoke\n\n\n\n\nsdkbox.PluginFlurryAnalytics:setAppVersion(version);\n\n\n\n\n\n\nExplicitly specifies the App Version that Flurry will use to group Analytics data.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:getFlurryAgentVersion();\n\n\n\n\n\n\nRetrieves the Flurry Agent Build Version.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:setShowErrorInLogEnabled(value);\n\n\n\n\n\n\nDisplays an exception in the debug log if thrown during a Session.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:setDebugLogEnabled(value);\n\n\n\n\n\n\nGenerates debug logs to console.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:setLogLevel(value);\n\n\n\n\n\n\nGenerates debug logs to console.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:setSessionContinueSeconds(seconds);\n\n\n\n\n\n\nSet the timeout for expiring a Flurry session.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:setCrashReportingEnabled(value);\n\n\n\n\n\n\nEnable automatic collection of crash reports.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:startSession();\n\n\n\n\n\n\nStart a Flurry session for the project denoted by @c apiKey.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:endSession();\n\n\n\n\n\n\nend session, just valid on android\n\n\n\n\nsdkbox.PluginFlurryAnalytics:activeSessionExists();\n\n\n\n\n\n\nStart a Flurry session for the project denoted by @c apiKey.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:getSessionID();\n\n\n\n\n\n\nStart a Flurry session for the project denoted by @c apiKey.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:pauseBackgroundSession();\n\n\n\n\n\n\nPauses a Flurry session left running in background. on valid on ios\n\n\n\n\nsdkbox.PluginFlurryAnalytics:addOrigin(originName, originVersion);\n\n\n\n\n\n\nAdds an SDK origin specified by @c originName and @c originVersion.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:addOrigin(originName, originVersion, parameters);\n\n\n\n\n\n\nAdds a custom parameterized origin specified by @c originName with @c originVersion and @c parameters.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:addOrigin(originName, originVersion, parameters);\n\n\n\n\n\n\njust for lua, js binding, have the same function with addOrigin(string, string, map)\n\n\n\n\nsdkbox.PluginFlurryAnalytics:logEvent(eventName);\n\n\n\n\n\n\nRecords a custom event specified by @c eventName.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:logEvent(eventName, parameters);\n\n\n\n\n\n\nRecords a custom parameterized event specified by @c eventName with @c parameters.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:logEvent(eventName, parameters);\n\n\n\n\n\n\njust for lua, js binding, have same function with logEvent(string, map)\n\n\n\n\nsdkbox.PluginFlurryAnalytics:logEvent(eventName, timed);\n\n\n\n\n\n\nRecords a timed event specified by @c eventName.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:logEvent(eventName, parameters, timed);\n\n\n\n\n\n\nRecords a custom parameterized timed event specified by @c eventName with @c parameters.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:logEvent(eventName, parameters, timed);\n\n\n\n\n\n\njust for lua, js binding, have the same function with logEvent(string, map, bool)\n\n\n\n\nsdkbox.PluginFlurryAnalytics:endTimedEvent(eventId);\n\n\n\n\n\n\nEnd a timed event\n\n\n\n\nsdkbox.PluginFlurryAnalytics:endTimedEvent(eventName, parameters);\n\n\n\n\n\n\nEnds a timed event specified by @c eventName and optionally updates parameters with @c parameters.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:endTimedEvent(eventName, parameters);\n\n\n\n\n\n\njust for lua, js binding, have same function with endTimeEvent(string, map)\n\n\n\n\nsdkbox.PluginFlurryAnalytics:logError(errorID, message, info);\n\n\n\n\n\n\nRecords an app exception. Commonly used to catch unhandled exceptions.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:logPageView();\n\n\n\n\n\n\nExplicitly track a page view during a session.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:setUserID(userID);\n\n\n\n\n\n\nAssign a unique id for a user in your app.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:setAge(age);\n\n\n\n\n\n\nSet your user's age in years.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:setGender(gender);\n\n\n\n\n\n\nSet your user's gender.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:setReportLocation(reportLocation);\n\n\n\n\n\n\nSet whether Flurry should record location via GPS. Defaults to true. valid on android\n\n\n\n\nsdkbox.PluginFlurryAnalytics:setLatitude(latitude,\n                                          longitude,\n                                          horizontalAccuracy,\n                                          verticalAccuracy);\n\n\n\n\n\n\nSet the location of the session.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:clearLocation();\n\n\n\n\n\n\nclear the default location.valid on andriod\n\n\n\n\nsdkbox.PluginFlurryAnalytics:setSessionReportsOnCloseEnabled(sendSessionReportsOnClose);\n\n\n\n\n\n\nSet session to report when app closes.valid on ios\n\n\n\n\nsdkbox.PluginFlurryAnalytics:setSessionReportsOnPauseEnabled(setSessionReportsOnPauseEnabled);\n\n\n\n\n\n\nSet session to report when app is sent to the background.valid on ios\n\n\n\n\nsdkbox.PluginFlurryAnalytics:setBackgroundSessionEnabled(setBackgroundSessionEnabled);\n\n\n\n\n\n\nSet session to support background execution.valid on ios\n\n\n\n\nsdkbox.PluginFlurryAnalytics:setEventLoggingEnabled(value);\n\n\n\n\n\n\nEnable custom event logging.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:setPulseEnabled(value);\n\n\n\n\n\n\nEnables Flurry Pulse\n\n\n\n\nsdkbox.PluginFlurryAnalytics:setListener(listener);\n\n\n\n\n\n\nset listener for session callback\n\n\n\n\nListeners\n\n\nflurrySessionDidCreateWithInfo(info);\n\n\n\n\n\n\nInvoked when analytics session is created,", 
            "title": "lua"
        }, 
        {
            "location": "/plugins/flurryanalytics/v2-lua/#flurry-analytics", 
            "text": "", 
            "title": "Flurry Analytics"
        }, 
        {
            "location": "/plugins/flurryanalytics/v2-lua/#integration", 
            "text": "Use the following command to install the SDKBOX Flurry Analytics plugin, Make sure you setup SDKBOX installer correctly.  sdkbox import flurryanalytics", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/flurryanalytics/v2-lua/#extra-steps", 
            "text": "Modify  YourGameName .java   Modify  proj.android/src/ package identifier / YourGameName .java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify the class to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . Example of what this might look like for you:   protected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }  Proguard (release, optional)   Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   Edit the file you specified to include the following:   -dontwarn android.webkit.**  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Extra steps"
        }, 
        {
            "location": "/plugins/flurryanalytics/v2-lua/#configuration", 
            "text": "SDKBOX Installer will automatically inject a sample configuration to your  sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the Google Analytics configuration, you need to replace  API KEY   with your specific  Flurry Analytics ID  account information.\nHere is an example adding  FlurryAnalytics  to iOS:  FlurryAnalytics :{\n             APIKey : API KEY ,\n             AppVersion : V0.1 ,\n             Debug :false,\n             Level :2,\n             SessionTimeout :10,\n             CrashReport :true\n}  Adding  FlurryAnalytics  to Android is a bit different as it supports  locations ,  pulse  and  origin  settings. Here is an example adding  FlurryAnalytics  to Android:  FlurryAnalytics :{\n             APIKey : API KEY ,\n             AppVersion : V0.1 ,\n             Debug :false,\n             LogEvent :true,\n             Level :2,\n             SessionTimeout :10,\n             CrashReport :true,\n             LocationReport :true,\n             DefLocationLat :104.06,\n             DefLocationLon :30.67,\n             Pulse :true,\n             Origin :[\n                {\n                     OriginName : sdkbox ,\n                     OriginVersion : v0.1 ,\n                     OriginParams :{\n                         Key1 : Val1 ,\n                         Key2 : Val2 ,\n                         Key3 : Val3 \n                    }\n                },\n                {\n                     OriginName : sdkbox ,\n                     OriginVersion : v0.1 \n                }\n            ]\n}", 
            "title": "Configuration"
        }, 
        {
            "location": "/plugins/flurryanalytics/v2-lua/#usage", 
            "text": "Modify Lua Code   modify  AppDelegate.cpp  to include the following headers:   #include  PluginFlurryAnalyticsLua.hpp \n#include  PluginFlurryAnalyticsLuaHelper.h    We need to register the plugin with Lua. This is done by making a call to  register_all_PluginFlurryAnalyticsLua( lua_State* ); . It is important to note that this call must be made after  lua_State *tolua_s = pStack- getLuaState();  and before  tolua_extensions_ccb_open(tolua_s); . Here is an example of what this might look like for you:   lua_State *tolua_s = pStack- getLuaState();\nregister_all_PluginFlurryAnalyticsLua(tolua_s);\nregister_PluginFlurryAnalyticsLua_helper(tolua_s);\ntolua_extensions_ccb_open(tolua_s);  Initialize Flurry Analytics   modify your Lua code to  init()  the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.   sdkbox.PluginFlurryAnalytics:init();  Using Flurry Analytics  After initialization you can begin to use the Flurry Analytics functionality. Use  logevent  where ever you want from your code:  local eventName =  test event1 \nsdkbox.PluginFlurryAnalytics:logEvent(eventName);  Catch Flurry Analytics events (optional)  This allows you to catch the  FlurryAnalytics  events so that you can perform operations based upon responses. A simple example might look like this:  sdkbox.PluginFlurryAnalytics:init()\nsdkbox.PluginFlurryAnalytics:setListener(function(data)\n        local ret = json.decode(data)\n        print( apiKey: , ret.apiKey,  sessionId: , ret.sessionId)\n        -- check session state\n        print( Flurry analytics session exist:  , f:activeSessionExists())\n        print( Flurry analytics session:  , f:getSessionID())\n        local eventName =  test event1 \n        sdkbox.PluginFlurryAnalytics:logEvent(eventName);\n    end)\nsdkbox.PluginFlurryAnalytics:startSession()  Ending Flurry Analytics (Android only)  When you are finished using  FlurryAnalytics  or when your games ends. It is necessary to end the  FlurryAnalytics  session. This is a requirement for Android but optional on iOS. Example:  // end session just valid on android, but it's ok to invoke it on iOS\nsdkbox.PluginFlurryAnalytics:endSession();", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/flurryanalytics/v2-lua/#api-reference", 
            "text": "Methods  sdkbox.PluginFlurryAnalytics:init();   init plugin, must be first invoke   sdkbox.PluginFlurryAnalytics:setAppVersion(version);   Explicitly specifies the App Version that Flurry will use to group Analytics data.   sdkbox.PluginFlurryAnalytics:getFlurryAgentVersion();   Retrieves the Flurry Agent Build Version.   sdkbox.PluginFlurryAnalytics:setShowErrorInLogEnabled(value);   Displays an exception in the debug log if thrown during a Session.   sdkbox.PluginFlurryAnalytics:setDebugLogEnabled(value);   Generates debug logs to console.   sdkbox.PluginFlurryAnalytics:setLogLevel(value);   Generates debug logs to console.   sdkbox.PluginFlurryAnalytics:setSessionContinueSeconds(seconds);   Set the timeout for expiring a Flurry session.   sdkbox.PluginFlurryAnalytics:setCrashReportingEnabled(value);   Enable automatic collection of crash reports.   sdkbox.PluginFlurryAnalytics:startSession();   Start a Flurry session for the project denoted by @c apiKey.   sdkbox.PluginFlurryAnalytics:endSession();   end session, just valid on android   sdkbox.PluginFlurryAnalytics:activeSessionExists();   Start a Flurry session for the project denoted by @c apiKey.   sdkbox.PluginFlurryAnalytics:getSessionID();   Start a Flurry session for the project denoted by @c apiKey.   sdkbox.PluginFlurryAnalytics:pauseBackgroundSession();   Pauses a Flurry session left running in background. on valid on ios   sdkbox.PluginFlurryAnalytics:addOrigin(originName, originVersion);   Adds an SDK origin specified by @c originName and @c originVersion.   sdkbox.PluginFlurryAnalytics:addOrigin(originName, originVersion, parameters);   Adds a custom parameterized origin specified by @c originName with @c originVersion and @c parameters.   sdkbox.PluginFlurryAnalytics:addOrigin(originName, originVersion, parameters);   just for lua, js binding, have the same function with addOrigin(string, string, map)   sdkbox.PluginFlurryAnalytics:logEvent(eventName);   Records a custom event specified by @c eventName.   sdkbox.PluginFlurryAnalytics:logEvent(eventName, parameters);   Records a custom parameterized event specified by @c eventName with @c parameters.   sdkbox.PluginFlurryAnalytics:logEvent(eventName, parameters);   just for lua, js binding, have same function with logEvent(string, map)   sdkbox.PluginFlurryAnalytics:logEvent(eventName, timed);   Records a timed event specified by @c eventName.   sdkbox.PluginFlurryAnalytics:logEvent(eventName, parameters, timed);   Records a custom parameterized timed event specified by @c eventName with @c parameters.   sdkbox.PluginFlurryAnalytics:logEvent(eventName, parameters, timed);   just for lua, js binding, have the same function with logEvent(string, map, bool)   sdkbox.PluginFlurryAnalytics:endTimedEvent(eventId);   End a timed event   sdkbox.PluginFlurryAnalytics:endTimedEvent(eventName, parameters);   Ends a timed event specified by @c eventName and optionally updates parameters with @c parameters.   sdkbox.PluginFlurryAnalytics:endTimedEvent(eventName, parameters);   just for lua, js binding, have same function with endTimeEvent(string, map)   sdkbox.PluginFlurryAnalytics:logError(errorID, message, info);   Records an app exception. Commonly used to catch unhandled exceptions.   sdkbox.PluginFlurryAnalytics:logPageView();   Explicitly track a page view during a session.   sdkbox.PluginFlurryAnalytics:setUserID(userID);   Assign a unique id for a user in your app.   sdkbox.PluginFlurryAnalytics:setAge(age);   Set your user's age in years.   sdkbox.PluginFlurryAnalytics:setGender(gender);   Set your user's gender.   sdkbox.PluginFlurryAnalytics:setReportLocation(reportLocation);   Set whether Flurry should record location via GPS. Defaults to true. valid on android   sdkbox.PluginFlurryAnalytics:setLatitude(latitude,\n                                          longitude,\n                                          horizontalAccuracy,\n                                          verticalAccuracy);   Set the location of the session.   sdkbox.PluginFlurryAnalytics:clearLocation();   clear the default location.valid on andriod   sdkbox.PluginFlurryAnalytics:setSessionReportsOnCloseEnabled(sendSessionReportsOnClose);   Set session to report when app closes.valid on ios   sdkbox.PluginFlurryAnalytics:setSessionReportsOnPauseEnabled(setSessionReportsOnPauseEnabled);   Set session to report when app is sent to the background.valid on ios   sdkbox.PluginFlurryAnalytics:setBackgroundSessionEnabled(setBackgroundSessionEnabled);   Set session to support background execution.valid on ios   sdkbox.PluginFlurryAnalytics:setEventLoggingEnabled(value);   Enable custom event logging.   sdkbox.PluginFlurryAnalytics:setPulseEnabled(value);   Enables Flurry Pulse   sdkbox.PluginFlurryAnalytics:setListener(listener);   set listener for session callback   Listeners  flurrySessionDidCreateWithInfo(info);   Invoked when analytics session is created,", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/googleanalytics/v3-cpp/", 
            "text": "Google Analytics\n\n\nIntegration\n\n\nUse the following command to install the SDKBOX Google Analytics plugin, Make sure you setup SDKBOX installer correctly.\n\n\nsdkbox import googleanalytics\n\n\n\n\nExtra steps\n\n\nModify \nCocos2dxActivity.java\n\n\n\n\n\n\nIf you're using cocos2d-x from source, assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java\n\n\n\n\n\n\nIf you're using the prebuilt cocos2d-x libraries assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n./src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nNote:\n When using Cocos2d-x from source, different versions have \nCocos2dxActivity.java\n in a different location. One way to find the location is to look in \nproj.android/project.properties\n. Example:\n\n\nandroid.library.reference.1=../../cocos2d-x/cocos/platform/android/java\n\n\n\n\nIn this case, \nCocos2dxActivity.java\n should be located at:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nModify \nCocos2dxActivity.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify \nCocos2dxActivity\n to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. The placement of this call is important. It must be done after the call to \nonLoadNativeLibraries();\n. Example:\n\n\n\n\nonLoadNativeLibraries();\nSDKBox.init(this);\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (release, optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n-libraryjars libs/android-support-v4.jar\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.\n\n\nConfiguration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nres/sdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the Google Analytics configuration, you need to replace \nTRACKING_CODE\n  with your specific \nGoogle Analytics Tracking Code\n account information.\n\n\nGoogleAnalytics\n : {\n    \ntrackingCode\n : \nTRACKING_CODE\n\n}\n\n\n\n\nUsage\n\n\nInitialize Google Analytics\n\n\nInitialize the plugin where appropriate in your code. We recommend to do this in the \nAppDelegate::applicationDidFinishLaunching()\n or \nAppController:didFinishLaunchingWithOptions()\n. Make sure to include the appropriate headers:\n\n\n#include \nPluginGoogleAnalytics/PluginGoogleAnalytics.h\n\nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginGoogleAnalytics::init();\n}\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nDispatch Methods. Dispatches hits (view, events, etc.) to Google Analytics if a network connection is available.\n\n\nstatic void init();\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nstatic void dispatchHits();\n\n\n\n\n\n\nManually request dispatch of hits. By default, data is dispatched from the\nGoogle Analytics SDK for Android every 5 minutes.\n\n\n\n\nstatic void dispatchPeriodically(int numberOfSeconds);\n\n\n\n\n\n\nChange the dispatch info time period to the desired amount of seconds.\n\n\n\n\nstatic void stopPeriodicalDispatch();\n\n\n\n\n\n\nStop periodically sending info. Then manually the \ndispatchPeridically\n\nor \ndispatchHits\n should be called.\n\n\n\n\nSession control.  A session represents a single period of user interaction with your game. Sessions serve as useful containers of measured activity, which includes screen views, events, and ecommerce transactions.\n\n\nstatic void startSession();\n\n\n\n\n\n\nThe analytics session is being explicitly started at plugin initialization time.\n\n\n\n\nstatic void stopSession();\n\n\n\n\n\n\nYou normally will never stop a session manually.\n\n\n\n\nScreens. Screens in Google Analytics represent content users are viewing within your game. A screen view consists of a single string field that will be used as the screen name in your Google Analytics reports.\n\n\nstatic void logScreen(std::string title);\n\n\n\n\n\n\nLog screen info. title is the title of a screen. Screens are logical units\ninside your app you'd like to identify at analytics panel.\n\n\n\n\nEvents. Events are a useful way to collect data about a user's interaction with interactive components of your game, like the use of a particular item. An event consists of four fields that you can use to describe a user's interaction with your game.\n\n\nstatic void logEvent(std::string eventCategory,\n                      std::string eventAction,\n                      std::string eventLabel,\n                      long value);\n\n\n\n\n\n\nsdkbox::PluginGoogleAnalytics::logEvent(\"Achievement\", \"Unlocked\", \"Slay 10 dragons\", 5);\n\n\n\n\nCrashes and Exceptions. Crash and exception measurement allows you to measure the number and type of caught and uncaught crashes and exceptions that occur in your game.\n\n\nstatic void logException(std::string exceptionDescription, bool isFatal);\n\n\n\n\n\n\nLog an exception. It is a basic support for in-app events.\n\n\n\n\nUser timing. Measuring user timings provides a native way to measure a period of time in Google Analytics. For example, this can be useful to measure resource load times.\n\n\nstatic void logTiming(std::string timingCategory,\n                        int timingInterval,\n                        std::string timingName,\n                        std::string timingLabel);\n\n\n\n\n\n\nMeasure a time inside the application.\n\n\n\n\nSocial. Social interaction measurement allows you to measure a user's interactions with various social network sharing and recommendation widgets embedded in your content.\n\n\nstatic void logSocial(std::string socialNetwork,\n                        std::string socialAction,\n                        std::string socialTarget);\n\n\n\n\n\n\nLog a social event.\n\n\n\n\nGeneral purpose methods.\n\n\nstatic void setDryRun(bool dr);\n\n\n\n\n\n\nWhile running on dry run, the tracked events won't be sent to the actual\nanalytics account.\n\n\n\n\nstatic void enableAdvertisingTracking(bool e);\n\n\n\n\n\n\nEnable advertising tracking when in google's ad vendors.\n\n\n\n\nstatic void createTracker(std::string trackerId);\n\n\n\n\n\n\nCreate a tracker identified by the google analytics tracker id XX-YYYYYYYY-Z.\nIf the tracker already existed, no new tracker will be created. In any case, the\ntracker associated with tracker id will be set as default tracker for  analytics\noperations.\n\n\n\n\nstatic void enableTracker(std::string trackerId);\n\n\n\n\n\n\nEnable a tracker identified by a trackerId. If the tracker does not exist,\nnothing will happen.", 
            "title": "c++"
        }, 
        {
            "location": "/plugins/googleanalytics/v3-cpp/#google-analytics", 
            "text": "", 
            "title": "Google Analytics"
        }, 
        {
            "location": "/plugins/googleanalytics/v3-cpp/#integration", 
            "text": "Use the following command to install the SDKBOX Google Analytics plugin, Make sure you setup SDKBOX installer correctly.  sdkbox import googleanalytics", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/googleanalytics/v3-cpp/#extra-steps", 
            "text": "Modify  Cocos2dxActivity.java    If you're using cocos2d-x from source, assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java    If you're using the prebuilt cocos2d-x libraries assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ./src/org/cocos2dx/lib/Cocos2dxActivity.java    Note:  When using Cocos2d-x from source, different versions have  Cocos2dxActivity.java  in a different location. One way to find the location is to look in  proj.android/project.properties . Example:  android.library.reference.1=../../cocos2d-x/cocos/platform/android/java  In this case,  Cocos2dxActivity.java  should be located at:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java   Modify  Cocos2dxActivity.java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify  Cocos2dxActivity  to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . The placement of this call is important. It must be done after the call to  onLoadNativeLibraries(); . Example:   onLoadNativeLibraries();\nSDKBox.init(this);    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }  Proguard (release, optional)   Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   Edit the file you specified to include the following:   -libraryjars libs/android-support-v4.jar\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Extra steps"
        }, 
        {
            "location": "/plugins/googleanalytics/v3-cpp/#configuration", 
            "text": "SDKBOX Installer will automatically inject a sample configuration to your  res/sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the Google Analytics configuration, you need to replace  TRACKING_CODE   with your specific  Google Analytics Tracking Code  account information.  GoogleAnalytics  : {\n     trackingCode  :  TRACKING_CODE \n}", 
            "title": "Configuration"
        }, 
        {
            "location": "/plugins/googleanalytics/v3-cpp/#usage", 
            "text": "Initialize Google Analytics  Initialize the plugin where appropriate in your code. We recommend to do this in the  AppDelegate::applicationDidFinishLaunching()  or  AppController:didFinishLaunchingWithOptions() . Make sure to include the appropriate headers:  #include  PluginGoogleAnalytics/PluginGoogleAnalytics.h \nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginGoogleAnalytics::init();\n}", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/googleanalytics/v3-cpp/#api-reference", 
            "text": "Methods  Dispatch Methods. Dispatches hits (view, events, etc.) to Google Analytics if a network connection is available.  static void init();   initialize the plugin instance.   static void dispatchHits();   Manually request dispatch of hits. By default, data is dispatched from the\nGoogle Analytics SDK for Android every 5 minutes.   static void dispatchPeriodically(int numberOfSeconds);   Change the dispatch info time period to the desired amount of seconds.   static void stopPeriodicalDispatch();   Stop periodically sending info. Then manually the  dispatchPeridically \nor  dispatchHits  should be called.   Session control.  A session represents a single period of user interaction with your game. Sessions serve as useful containers of measured activity, which includes screen views, events, and ecommerce transactions.  static void startSession();   The analytics session is being explicitly started at plugin initialization time.   static void stopSession();   You normally will never stop a session manually.   Screens. Screens in Google Analytics represent content users are viewing within your game. A screen view consists of a single string field that will be used as the screen name in your Google Analytics reports.  static void logScreen(std::string title);   Log screen info. title is the title of a screen. Screens are logical units\ninside your app you'd like to identify at analytics panel.   Events. Events are a useful way to collect data about a user's interaction with interactive components of your game, like the use of a particular item. An event consists of four fields that you can use to describe a user's interaction with your game.  static void logEvent(std::string eventCategory,\n                      std::string eventAction,\n                      std::string eventLabel,\n                      long value);   sdkbox::PluginGoogleAnalytics::logEvent(\"Achievement\", \"Unlocked\", \"Slay 10 dragons\", 5);   Crashes and Exceptions. Crash and exception measurement allows you to measure the number and type of caught and uncaught crashes and exceptions that occur in your game.  static void logException(std::string exceptionDescription, bool isFatal);   Log an exception. It is a basic support for in-app events.   User timing. Measuring user timings provides a native way to measure a period of time in Google Analytics. For example, this can be useful to measure resource load times.  static void logTiming(std::string timingCategory,\n                        int timingInterval,\n                        std::string timingName,\n                        std::string timingLabel);   Measure a time inside the application.   Social. Social interaction measurement allows you to measure a user's interactions with various social network sharing and recommendation widgets embedded in your content.  static void logSocial(std::string socialNetwork,\n                        std::string socialAction,\n                        std::string socialTarget);   Log a social event.   General purpose methods.  static void setDryRun(bool dr);   While running on dry run, the tracked events won't be sent to the actual\nanalytics account.   static void enableAdvertisingTracking(bool e);   Enable advertising tracking when in google's ad vendors.   static void createTracker(std::string trackerId);   Create a tracker identified by the google analytics tracker id XX-YYYYYYYY-Z.\nIf the tracker already existed, no new tracker will be created. In any case, the\ntracker associated with tracker id will be set as default tracker for  analytics\noperations.   static void enableTracker(std::string trackerId);   Enable a tracker identified by a trackerId. If the tracker does not exist,\nnothing will happen.", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/googleanalytics/v3-js/", 
            "text": "Google Analytics\n\n\nIntegration\n\n\nUse the following command to install the SDKBOX Google Analytics plugin, Make sure you setup SDKBOX installer correctly.\n\n\nsdkbox import googleanalytics\n\n\n\n\nExtra steps\n\n\nModify \nCocos2dxActivity.java\n\n\n\n\n\n\nIf you're using cocos2d-x from source, assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java\n\n\n\n\n\n\nIf you're using the prebuilt cocos2d-x libraries assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n./src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nNote:\n When using Cocos2d-x from source, different versions have \nCocos2dxActivity.java\n in a different location. One way to find the location is to look in \nproj.android/project.properties\n. Example:\n\n\nandroid.library.reference.1=../../cocos2d-x/cocos/platform/android/java\n\n\n\n\nIn this case, \nCocos2dxActivity.java\n should be located at:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nModify \nCocos2dxActivity.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify \nCocos2dxActivity\n to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. The placement of this call is important. It must be done after the call to \nonLoadNativeLibraries();\n. Example:\n\n\n\n\nonLoadNativeLibraries();\nSDKBox.init(this);\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (release, optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n-libraryjars libs/android-support-v4.jar\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.\n\n\nConfiguration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nres/sdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the Google Analytics configuration, you need to replace \nTRACKING_CODE\n  with your specific \nGoogle Analytics Tracking Code\n account information.\n\n\nGoogleAnalytics\n : {\n    \ntrackingCode\n : \nTRACKING_CODE\n\n}\n\n\n\n\nUsage\n\n\nInitialize Google Analytics\n\n\n\n\nInitialize the plugin by calling \ninit()\n where appropriate in your code. We\nrecommend to do this in the \napp.js\n. Example:\n\n\n\n\nsdkbox.PluginGoogleAnalytics.init();\n\n\n\n\n\n\nmodify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n to include the following headers:\n\n\n\n\n#include \nPluginGoogleAnalyticsJS.hpp\n\n\n\n\n\n\n\nModify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n make sure to call:\n\n\n\n\nsc-\naddRegisterCallback(register_all_PluginGoogleAnalyticsJS);\n\n\n\n\nThis registers the Javascript callbacks.\n\n\nAPI Reference\n\n\nMethods\n\n\nDispatch Methods. Dispatches hits (view, events, etc.) to Google Analytics if a network connection is available.\n\n\nsdkbox.PluginGoogleAnalytics.init();\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nsdkbox.PluginGoogleAnalytics.dispatchHits();\n\n\n\n\n\n\nManually request dispatch of hits. By default, data is dispatched from the\nGoogle Analytics SDK for Android every 5 minutes.\n\n\n\n\nsdkbox.PluginGoogleAnalytics.dispatchPeriodically(numberOfSeconds);\n\n\n\n\n\n\nChange the dispatch info time period to the desired amount of seconds.\n\n\n\n\nsdkbox.PluginGoogleAnalytics.stopPeriodicalDispatch();\n\n\n\n\n\n\nStop periodically sending info. Then manually the \ndispatchPeridically\n\nor \ndispatchHits\n should be called.\n\n\n\n\nSession control.  A session represents a single period of user interaction with your game. Sessions serve as useful containers of measured activity, which includes screen views, events, and ecommerce transactions.\n\n\nsdkbox.PluginGoogleAnalytics.startSession();\n\n\n\n\n\n\nThe analytics session is being explicitly started at plugin initialization time.\n\n\n\n\nsdkbox.PluginGoogleAnalytics.stopSession();\n\n\n\n\n\n\nYou normally will never stop a session manually.\n\n\n\n\nScreens. Screens in Google Analytics represent content users are viewing within your game. A screen view consists of a single string field that will be used as the screen name in your Google Analytics reports.\n\n\nsdkbox.PluginGoogleAnalytics.logScreen(title);\n\n\n\n\n\n\nLog screen info. title is the title of a screen. Screens are logical units\ninside your app you'd like to identify at analytics panel.\n\n\n\n\nEvents. Events are a useful way to collect data about a user's interaction with interactive components of your game, like the use of a particular item. An event consists of four fields that you can use to describe a user's interaction with your game.\n\n\nsdkbox.PluginGoogleAnalytics.logEvent(eventCategory, eventAction, eventLabel, value);\n\n\n\n\n\n\nsdkbox.PluginGoogleAnalytics.logEvent(\"Achievement\", \"Unlocked\", \"Slay 10 dragons\", 5);\n\n\n\n\nCrashes and Exceptions. Crash and exception measurement allows you to measure the number and type of caught and uncaught crashes and exceptions that occur in your game.\n\n\nsdkbox.PluginGoogleAnalytics.logException(exceptionDescription, isFatal);\n\n\n\n\n\n\nLog an exception. It is a basic support for in-app events.\n\n\n\n\nUser timing. Measuring user timings provides a native way to measure a period of time in Google Analytics. For example, this can be useful to measure resource load times.\n\n\nsdkbox.PluginGoogleAnalytics.logTiming(timingCategory, timingInterval, timingName, timingLabel);\n\n\n\n\n\n\nMeasure a time inside the application.\n\n\n\n\nSocial. Social interaction measurement allows you to measure a user's interactions with various social network sharing and recommendation widgets embedded in your content.\n\n\nsdkbox.PluginGoogleAnalytics.logSocial(socialNetwork, socialAction, socialTarget);\n\n\n\n\n\n\nLog a social event.\n\n\n\n\nGeneral purpose methods.\n\n\nsdkbox.PluginGoogleAnalytics.setDryRun(dr);\n\n\n\n\n\n\nWhile running on dry run, the tracked events won't be sent to the actual\nanalytics account.\n\n\n\n\nsdkbox.PluginGoogleAnalytics.enableAdvertisingTracking(e);\n\n\n\n\n\n\nEnable advertising tracking when in google's ad vendors.\n\n\n\n\nsdkbox.PluginGoogleAnalytics.createTracker(trackerId);\n\n\n\n\n\n\nCreate a tracker identified by the google analytics tracker id XX-YYYYYYYY-Z.\nIf the tracker already existed, no new tracker will be created. In any case, the\ntracker associated with tracker id will be set as default tracker for  analytics\noperations.\n\n\n\n\nsdkbox.PluginGoogleAnalytics.enableTracker(trackerId);\n\n\n\n\n\n\nEnable a tracker identified by a trackerId. If the tracker does not exist,\nnothing will happen.", 
            "title": "js"
        }, 
        {
            "location": "/plugins/googleanalytics/v3-js/#google-analytics", 
            "text": "", 
            "title": "Google Analytics"
        }, 
        {
            "location": "/plugins/googleanalytics/v3-js/#integration", 
            "text": "Use the following command to install the SDKBOX Google Analytics plugin, Make sure you setup SDKBOX installer correctly.  sdkbox import googleanalytics", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/googleanalytics/v3-js/#extra-steps", 
            "text": "Modify  Cocos2dxActivity.java    If you're using cocos2d-x from source, assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java    If you're using the prebuilt cocos2d-x libraries assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ./src/org/cocos2dx/lib/Cocos2dxActivity.java    Note:  When using Cocos2d-x from source, different versions have  Cocos2dxActivity.java  in a different location. One way to find the location is to look in  proj.android/project.properties . Example:  android.library.reference.1=../../cocos2d-x/cocos/platform/android/java  In this case,  Cocos2dxActivity.java  should be located at:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java   Modify  Cocos2dxActivity.java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify  Cocos2dxActivity  to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . The placement of this call is important. It must be done after the call to  onLoadNativeLibraries(); . Example:   onLoadNativeLibraries();\nSDKBox.init(this);    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }  Proguard (release, optional)   Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   Edit the file you specified to include the following:   -libraryjars libs/android-support-v4.jar\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Extra steps"
        }, 
        {
            "location": "/plugins/googleanalytics/v3-js/#configuration", 
            "text": "SDKBOX Installer will automatically inject a sample configuration to your  res/sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the Google Analytics configuration, you need to replace  TRACKING_CODE   with your specific  Google Analytics Tracking Code  account information.  GoogleAnalytics  : {\n     trackingCode  :  TRACKING_CODE \n}", 
            "title": "Configuration"
        }, 
        {
            "location": "/plugins/googleanalytics/v3-js/#usage", 
            "text": "Initialize Google Analytics   Initialize the plugin by calling  init()  where appropriate in your code. We\nrecommend to do this in the  app.js . Example:   sdkbox.PluginGoogleAnalytics.init();   modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  to include the following headers:   #include  PluginGoogleAnalyticsJS.hpp    Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  make sure to call:   sc- addRegisterCallback(register_all_PluginGoogleAnalyticsJS);  This registers the Javascript callbacks.", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/googleanalytics/v3-js/#api-reference", 
            "text": "Methods  Dispatch Methods. Dispatches hits (view, events, etc.) to Google Analytics if a network connection is available.  sdkbox.PluginGoogleAnalytics.init();   initialize the plugin instance.   sdkbox.PluginGoogleAnalytics.dispatchHits();   Manually request dispatch of hits. By default, data is dispatched from the\nGoogle Analytics SDK for Android every 5 minutes.   sdkbox.PluginGoogleAnalytics.dispatchPeriodically(numberOfSeconds);   Change the dispatch info time period to the desired amount of seconds.   sdkbox.PluginGoogleAnalytics.stopPeriodicalDispatch();   Stop periodically sending info. Then manually the  dispatchPeridically \nor  dispatchHits  should be called.   Session control.  A session represents a single period of user interaction with your game. Sessions serve as useful containers of measured activity, which includes screen views, events, and ecommerce transactions.  sdkbox.PluginGoogleAnalytics.startSession();   The analytics session is being explicitly started at plugin initialization time.   sdkbox.PluginGoogleAnalytics.stopSession();   You normally will never stop a session manually.   Screens. Screens in Google Analytics represent content users are viewing within your game. A screen view consists of a single string field that will be used as the screen name in your Google Analytics reports.  sdkbox.PluginGoogleAnalytics.logScreen(title);   Log screen info. title is the title of a screen. Screens are logical units\ninside your app you'd like to identify at analytics panel.   Events. Events are a useful way to collect data about a user's interaction with interactive components of your game, like the use of a particular item. An event consists of four fields that you can use to describe a user's interaction with your game.  sdkbox.PluginGoogleAnalytics.logEvent(eventCategory, eventAction, eventLabel, value);   sdkbox.PluginGoogleAnalytics.logEvent(\"Achievement\", \"Unlocked\", \"Slay 10 dragons\", 5);   Crashes and Exceptions. Crash and exception measurement allows you to measure the number and type of caught and uncaught crashes and exceptions that occur in your game.  sdkbox.PluginGoogleAnalytics.logException(exceptionDescription, isFatal);   Log an exception. It is a basic support for in-app events.   User timing. Measuring user timings provides a native way to measure a period of time in Google Analytics. For example, this can be useful to measure resource load times.  sdkbox.PluginGoogleAnalytics.logTiming(timingCategory, timingInterval, timingName, timingLabel);   Measure a time inside the application.   Social. Social interaction measurement allows you to measure a user's interactions with various social network sharing and recommendation widgets embedded in your content.  sdkbox.PluginGoogleAnalytics.logSocial(socialNetwork, socialAction, socialTarget);   Log a social event.   General purpose methods.  sdkbox.PluginGoogleAnalytics.setDryRun(dr);   While running on dry run, the tracked events won't be sent to the actual\nanalytics account.   sdkbox.PluginGoogleAnalytics.enableAdvertisingTracking(e);   Enable advertising tracking when in google's ad vendors.   sdkbox.PluginGoogleAnalytics.createTracker(trackerId);   Create a tracker identified by the google analytics tracker id XX-YYYYYYYY-Z.\nIf the tracker already existed, no new tracker will be created. In any case, the\ntracker associated with tracker id will be set as default tracker for  analytics\noperations.   sdkbox.PluginGoogleAnalytics.enableTracker(trackerId);   Enable a tracker identified by a trackerId. If the tracker does not exist,\nnothing will happen.", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/googleanalytics/v3-lua/", 
            "text": "Google Analytics\n\n\nIntegration\n\n\nUse the following command to install the SDKBOX Google Analytics plugin, Make sure you setup SDKBOX installer correctly.\n\n\nsdkbox import googleanalytics\n\n\n\n\nExtra steps\n\n\nModify \nCocos2dxActivity.java\n\n\n\n\n\n\nIf you're using cocos2d-x from source, assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java\n\n\n\n\n\n\nIf you're using the prebuilt cocos2d-x libraries assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n./src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nNote:\n When using Cocos2d-x from source, different versions have \nCocos2dxActivity.java\n in a different location. One way to find the location is to look in \nproj.android/project.properties\n. Example:\n\n\nandroid.library.reference.1=../../cocos2d-x/cocos/platform/android/java\n\n\n\n\nIn this case, \nCocos2dxActivity.java\n should be located at:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nModify \nCocos2dxActivity.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify \nCocos2dxActivity\n to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. The placement of this call is important. It must be done after the call to \nonLoadNativeLibraries();\n. Example:\n\n\n\n\nonLoadNativeLibraries();\nSDKBox.init(this);\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (release, optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n-libraryjars libs/android-support-v4.jar\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.\n\n\nConfiguration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nres/sdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the Google Analytics configuration, you need to replace \nTRACKING_CODE\n  with your specific \nGoogle Analytics Tracking Code\n account information.\n\n\nGoogleAnalytics\n : {\n    \ntrackingCode\n : \nTRACKING_CODE\n\n}\n\n\n\n\nUsage\n\n\nModify Lua Code\n\n\nModify \n./frameworks/runtime-src/Classes/lua_module_register.h\n to include the necessary headers and calls to register \nGoogleAnalytics\n with Lua. Note this takes a parameter of \nlua_State*\n:\n\n\n#include \nPluginGoogleAnalyticsLua.hpp\n\n\n\n\n\nstatic int lua_module_register(lua_State* L)\n{\n  register_all_PluginGoogleAnalyticsLua(L);\n}\n\n\n\n\nInitialize Google Analytics\n\n\n\n\nModify your Lua code to \ninit()\n the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.\n\n\n\n\nsdkbox.PluginGoogleAnalytics:init();\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nDispatch Methods. Dispatches hits (view, events, etc.) to Google Analytics if a network connection is available.\n\n\nsdkbox.PluginGoogleAnalytics:init();\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nsdkbox.PluginGoogleAnalytics:dispatchHits();\n\n\n\n\n\n\nManually request dispatch of hits. By default, data is dispatched from the\nGoogle Analytics SDK for Android every 5 minutes.\n\n\n\n\nsdkbox.PluginGoogleAnalytics:dispatchPeriodically(numberOfSeconds);\n\n\n\n\n\n\nChange the dispatch info time period to the desired amount of seconds.\n\n\n\n\nsdkbox.PluginGoogleAnalytics:stopPeriodicalDispatch();\n\n\n\n\n\n\nStop periodically sending info. Then manually the \ndispatchPeridically\n\nor \ndispatchHits\n should be called.\n\n\n\n\nSession control.  A session represents a single period of user interaction with your game. Sessions serve as useful containers of measured activity, which includes screen views, events, and ecommerce transactions.\n\n\nsdkbox.PluginGoogleAnalytics:startSession();\n\n\n\n\n\n\nThe analytics session is being explicitly started at plugin initialization time.\n\n\n\n\nsdkbox.PluginGoogleAnalytics:stopSession();\n\n\n\n\n\n\nYou normally will never stop a session manually.\n\n\n\n\nScreens. Screens in Google Analytics represent content users are viewing within your game. A screen view consists of a single string field that will be used as the screen name in your Google Analytics reports.\n\n\nsdkbox.PluginGoogleAnalytics:logScreen(title);\n\n\n\n\n\n\nLog screen info. title is the title of a screen. Screens are logical units\ninside your app you'd like to identify at analytics panel.\n\n\n\n\nEvents. Events are a useful way to collect data about a user's interaction with interactive components of your game, like the use of a particular item. An event consists of four fields that you can use to describe a user's interaction with your game.\n\n\nsdkbox.PluginGoogleAnalytics:logEvent(eventCategory, eventAction, eventLabel, value);\n\n\n\n\n\n\nsdkbox.PluginGoogleAnalytics:logEvent(\"Achievement\", \"Unlocked\", \"Slay 10 dragons\", 5);;\n\n\n\n\nCrashes and Exceptions. Crash and exception measurement allows you to measure the number and type of caught and uncaught crashes and exceptions that occur in your game.\n\n\nsdkbox.PluginGoogleAnalytics:logException(exceptionDescription, isFatal);\n\n\n\n\n\n\nLog an exception. It is a basic support for in-app events.\n\n\n\n\nUser timing. Measuring user timings provides a native way to measure a period of time in Google Analytics. For example, this can be useful to measure resource load times.\n\n\nsdkbox.PluginGoogleAnalytics:logTiming(timingCategory, timingInterval, timingName, timingLabel);\n\n\n\n\n\n\nMeasure a time inside the application.\n\n\n\n\nSocial. Social interaction measurement allows you to measure a user's interactions with various social network sharing and recommendation widgets embedded in your content.\n\n\nsdkbox.PluginGoogleAnalytics:logSocial(socialNetwork, socialAction, socialTarget);\n\n\n\n\n\n\nLog a social event.\n\n\n\n\nGeneral purpose methods.\n\n\nsdkbox.PluginGoogleAnalytics:setDryRun(dr);\n\n\n\n\n\n\nWhile running on dry run, the tracked events won't be sent to the actual\nanalytics account.\n\n\n\n\nsdkbox.PluginGoogleAnalytics:enableAdvertisingTracking(e);\n\n\n\n\n\n\nEnable advertising tracking when in google's ad vendors.\n\n\n\n\nsdkbox.PluginGoogleAnalytics:createTracker(trackerId);\n\n\n\n\n\n\nCreate a tracker identified by the google analytics tracker id XX-YYYYYYYY-Z.\nIf the tracker already existed, no new tracker will be created. In any case, the\ntracker associated with tracker id will be set as default tracker for  analytics\noperations.\n\n\n\n\nsdkbox.PluginGoogleAnalytics:enableTracker(trackerId);\n\n\n\n\n\n\nEnable a tracker identified by a trackerId. If the tracker does not exist,\nnothing will happen.", 
            "title": "lua"
        }, 
        {
            "location": "/plugins/googleanalytics/v3-lua/#google-analytics", 
            "text": "", 
            "title": "Google Analytics"
        }, 
        {
            "location": "/plugins/googleanalytics/v3-lua/#integration", 
            "text": "Use the following command to install the SDKBOX Google Analytics plugin, Make sure you setup SDKBOX installer correctly.  sdkbox import googleanalytics", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/googleanalytics/v3-lua/#extra-steps", 
            "text": "Modify  Cocos2dxActivity.java    If you're using cocos2d-x from source, assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java    If you're using the prebuilt cocos2d-x libraries assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ./src/org/cocos2dx/lib/Cocos2dxActivity.java    Note:  When using Cocos2d-x from source, different versions have  Cocos2dxActivity.java  in a different location. One way to find the location is to look in  proj.android/project.properties . Example:  android.library.reference.1=../../cocos2d-x/cocos/platform/android/java  In this case,  Cocos2dxActivity.java  should be located at:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java   Modify  Cocos2dxActivity.java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify  Cocos2dxActivity  to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . The placement of this call is important. It must be done after the call to  onLoadNativeLibraries(); . Example:   onLoadNativeLibraries();\nSDKBox.init(this);    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }  Proguard (release, optional)   Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   Edit the file you specified to include the following:   -libraryjars libs/android-support-v4.jar\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Extra steps"
        }, 
        {
            "location": "/plugins/googleanalytics/v3-lua/#configuration", 
            "text": "SDKBOX Installer will automatically inject a sample configuration to your  res/sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the Google Analytics configuration, you need to replace  TRACKING_CODE   with your specific  Google Analytics Tracking Code  account information.  GoogleAnalytics  : {\n     trackingCode  :  TRACKING_CODE \n}", 
            "title": "Configuration"
        }, 
        {
            "location": "/plugins/googleanalytics/v3-lua/#usage", 
            "text": "Modify Lua Code  Modify  ./frameworks/runtime-src/Classes/lua_module_register.h  to include the necessary headers and calls to register  GoogleAnalytics  with Lua. Note this takes a parameter of  lua_State* :  #include  PluginGoogleAnalyticsLua.hpp   static int lua_module_register(lua_State* L)\n{\n  register_all_PluginGoogleAnalyticsLua(L);\n}  Initialize Google Analytics   Modify your Lua code to  init()  the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.   sdkbox.PluginGoogleAnalytics:init();", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/googleanalytics/v3-lua/#api-reference", 
            "text": "Methods  Dispatch Methods. Dispatches hits (view, events, etc.) to Google Analytics if a network connection is available.  sdkbox.PluginGoogleAnalytics:init();   initialize the plugin instance.   sdkbox.PluginGoogleAnalytics:dispatchHits();   Manually request dispatch of hits. By default, data is dispatched from the\nGoogle Analytics SDK for Android every 5 minutes.   sdkbox.PluginGoogleAnalytics:dispatchPeriodically(numberOfSeconds);   Change the dispatch info time period to the desired amount of seconds.   sdkbox.PluginGoogleAnalytics:stopPeriodicalDispatch();   Stop periodically sending info. Then manually the  dispatchPeridically \nor  dispatchHits  should be called.   Session control.  A session represents a single period of user interaction with your game. Sessions serve as useful containers of measured activity, which includes screen views, events, and ecommerce transactions.  sdkbox.PluginGoogleAnalytics:startSession();   The analytics session is being explicitly started at plugin initialization time.   sdkbox.PluginGoogleAnalytics:stopSession();   You normally will never stop a session manually.   Screens. Screens in Google Analytics represent content users are viewing within your game. A screen view consists of a single string field that will be used as the screen name in your Google Analytics reports.  sdkbox.PluginGoogleAnalytics:logScreen(title);   Log screen info. title is the title of a screen. Screens are logical units\ninside your app you'd like to identify at analytics panel.   Events. Events are a useful way to collect data about a user's interaction with interactive components of your game, like the use of a particular item. An event consists of four fields that you can use to describe a user's interaction with your game.  sdkbox.PluginGoogleAnalytics:logEvent(eventCategory, eventAction, eventLabel, value);   sdkbox.PluginGoogleAnalytics:logEvent(\"Achievement\", \"Unlocked\", \"Slay 10 dragons\", 5);;   Crashes and Exceptions. Crash and exception measurement allows you to measure the number and type of caught and uncaught crashes and exceptions that occur in your game.  sdkbox.PluginGoogleAnalytics:logException(exceptionDescription, isFatal);   Log an exception. It is a basic support for in-app events.   User timing. Measuring user timings provides a native way to measure a period of time in Google Analytics. For example, this can be useful to measure resource load times.  sdkbox.PluginGoogleAnalytics:logTiming(timingCategory, timingInterval, timingName, timingLabel);   Measure a time inside the application.   Social. Social interaction measurement allows you to measure a user's interactions with various social network sharing and recommendation widgets embedded in your content.  sdkbox.PluginGoogleAnalytics:logSocial(socialNetwork, socialAction, socialTarget);   Log a social event.   General purpose methods.  sdkbox.PluginGoogleAnalytics:setDryRun(dr);   While running on dry run, the tracked events won't be sent to the actual\nanalytics account.   sdkbox.PluginGoogleAnalytics:enableAdvertisingTracking(e);   Enable advertising tracking when in google's ad vendors.   sdkbox.PluginGoogleAnalytics:createTracker(trackerId);   Create a tracker identified by the google analytics tracker id XX-YYYYYYYY-Z.\nIf the tracker already existed, no new tracker will be created. In any case, the\ntracker associated with tracker id will be set as default tracker for  analytics\noperations.   sdkbox.PluginGoogleAnalytics:enableTracker(trackerId);   Enable a tracker identified by a trackerId. If the tracker does not exist,\nnothing will happen.", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/googleanalytics/v2-cpp/", 
            "text": "Google Analytics\n\n\nIntegration\n\n\nUse the following command to install the SDKBOX Google Analytics plugin, Make sure you setup SDKBOX installer correctly.\n\n\nsdkbox import googleanalytics\n\n\n\n\nExtra steps\n\n\nModify \nYourGameName\n.java\n\n\n\n\nModify \nproj.android/src/\npackage identifier\n/\nYourGameName\n.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify the class to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. Example of what this might look like for you:\n\n\n\n\nprotected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (release, optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n-libraryjars libs/android-support-v4.jar\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.\n\n\nConfiguration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nres/sdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the Google Analytics configuration, you need to replace \nTRACKING_CODE\n  with your specific \nGoogle Analytics Tracking Code\n account information.\n\n\nGoogleAnalytics\n : {\n    \ntrackingCode\n : \nTRACKING_CODE\n\n}\n\n\n\n\nUsage\n\n\nInitialize Google Analytics\n\n\nInitialize the plugin where appropriate in your code. We recommend to do this in the \nAppDelegate::applicationDidFinishLaunching()\n or \nAppController:didFinishLaunchingWithOptions()\n. Make sure to include the appropriate headers:\n\n\n#include \nPluginGoogleAnalytics/PluginGoogleAnalytics.h\n\nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginGoogleAnalytics::init();\n}\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nDispatch Methods. Dispatches hits (view, events, etc.) to Google Analytics if a network connection is available.\n\n\nstatic void init();\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nstatic void dispatchHits();\n\n\n\n\n\n\nManually request dispatch of hits. By default, data is dispatched from the\nGoogle Analytics SDK for Android every 5 minutes.\n\n\n\n\nstatic void dispatchPeriodically(int numberOfSeconds);\n\n\n\n\n\n\nChange the dispatch info time period to the desired amount of seconds.\n\n\n\n\nstatic void stopPeriodicalDispatch();\n\n\n\n\n\n\nStop periodically sending info. Then manually the \ndispatchPeridically\n\nor \ndispatchHits\n should be called.\n\n\n\n\nSession control.  A session represents a single period of user interaction with your game. Sessions serve as useful containers of measured activity, which includes screen views, events, and ecommerce transactions.\n\n\nstatic void startSession();\n\n\n\n\n\n\nThe analytics session is being explicitly started at plugin initialization time.\n\n\n\n\nstatic void stopSession();\n\n\n\n\n\n\nYou normally will never stop a session manually.\n\n\n\n\nScreens. Screens in Google Analytics represent content users are viewing within your game. A screen view consists of a single string field that will be used as the screen name in your Google Analytics reports.\n\n\nstatic void logScreen(std::string title);\n\n\n\n\n\n\nLog screen info. title is the title of a screen. Screens are logical units\ninside your app you'd like to identify at analytics panel.\n\n\n\n\nEvents. Events are a useful way to collect data about a user's interaction with interactive components of your game, like the use of a particular item. An event consists of four fields that you can use to describe a user's interaction with your game.\n\n\nstatic void logEvent(std::string eventCategory,\n                      std::string eventAction,\n                      std::string eventLabel,\n                      long value);\n\n\n\n\n\n\nsdkbox::PluginGoogleAnalytics::logEvent(\"Achievement\", \"Unlocked\", \"Slay 10 dragons\", 5);\n\n\n\n\nCrashes and Exceptions. Crash and exception measurement allows you to measure the number and type of caught and uncaught crashes and exceptions that occur in your game.\n\n\nstatic void logException(std::string exceptionDescription, bool isFatal);\n\n\n\n\n\n\nLog an exception. It is a basic support for in-app events.\n\n\n\n\nUser timing. Measuring user timings provides a native way to measure a period of time in Google Analytics. For example, this can be useful to measure resource load times.\n\n\nstatic void logTiming(std::string timingCategory,\n                        int timingInterval,\n                        std::string timingName,\n                        std::string timingLabel);\n\n\n\n\n\n\nMeasure a time inside the application.\n\n\n\n\nSocial. Social interaction measurement allows you to measure a user's interactions with various social network sharing and recommendation widgets embedded in your content.\n\n\nstatic void logSocial(std::string socialNetwork,\n                        std::string socialAction,\n                        std::string socialTarget);\n\n\n\n\n\n\nLog a social event.\n\n\n\n\nGeneral purpose methods.\n\n\nstatic void setDryRun(bool dr);\n\n\n\n\n\n\nWhile running on dry run, the tracked events won't be sent to the actual\nanalytics account.\n\n\n\n\nstatic void enableAdvertisingTracking(bool e);\n\n\n\n\n\n\nEnable advertising tracking when in google's ad vendors.\n\n\n\n\nstatic void createTracker(std::string trackerId);\n\n\n\n\n\n\nCreate a tracker identified by the google analytics tracker id XX-YYYYYYYY-Z.\nIf the tracker already existed, no new tracker will be created. In any case, the\ntracker associated with tracker id will be set as default tracker for  analytics\noperations.\n\n\n\n\nstatic void enableTracker(std::string trackerId);\n\n\n\n\n\n\nEnable a tracker identified by a trackerId. If the tracker does not exist,\nnothing will happen.", 
            "title": "c++"
        }, 
        {
            "location": "/plugins/googleanalytics/v2-cpp/#google-analytics", 
            "text": "", 
            "title": "Google Analytics"
        }, 
        {
            "location": "/plugins/googleanalytics/v2-cpp/#integration", 
            "text": "Use the following command to install the SDKBOX Google Analytics plugin, Make sure you setup SDKBOX installer correctly.  sdkbox import googleanalytics", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/googleanalytics/v2-cpp/#extra-steps", 
            "text": "Modify  YourGameName .java   Modify  proj.android/src/ package identifier / YourGameName .java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify the class to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . Example of what this might look like for you:   protected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }  Proguard (release, optional)   Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   Edit the file you specified to include the following:   -libraryjars libs/android-support-v4.jar\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Extra steps"
        }, 
        {
            "location": "/plugins/googleanalytics/v2-cpp/#configuration", 
            "text": "SDKBOX Installer will automatically inject a sample configuration to your  res/sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the Google Analytics configuration, you need to replace  TRACKING_CODE   with your specific  Google Analytics Tracking Code  account information.  GoogleAnalytics  : {\n     trackingCode  :  TRACKING_CODE \n}", 
            "title": "Configuration"
        }, 
        {
            "location": "/plugins/googleanalytics/v2-cpp/#usage", 
            "text": "Initialize Google Analytics  Initialize the plugin where appropriate in your code. We recommend to do this in the  AppDelegate::applicationDidFinishLaunching()  or  AppController:didFinishLaunchingWithOptions() . Make sure to include the appropriate headers:  #include  PluginGoogleAnalytics/PluginGoogleAnalytics.h \nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginGoogleAnalytics::init();\n}", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/googleanalytics/v2-cpp/#api-reference", 
            "text": "Methods  Dispatch Methods. Dispatches hits (view, events, etc.) to Google Analytics if a network connection is available.  static void init();   initialize the plugin instance.   static void dispatchHits();   Manually request dispatch of hits. By default, data is dispatched from the\nGoogle Analytics SDK for Android every 5 minutes.   static void dispatchPeriodically(int numberOfSeconds);   Change the dispatch info time period to the desired amount of seconds.   static void stopPeriodicalDispatch();   Stop periodically sending info. Then manually the  dispatchPeridically \nor  dispatchHits  should be called.   Session control.  A session represents a single period of user interaction with your game. Sessions serve as useful containers of measured activity, which includes screen views, events, and ecommerce transactions.  static void startSession();   The analytics session is being explicitly started at plugin initialization time.   static void stopSession();   You normally will never stop a session manually.   Screens. Screens in Google Analytics represent content users are viewing within your game. A screen view consists of a single string field that will be used as the screen name in your Google Analytics reports.  static void logScreen(std::string title);   Log screen info. title is the title of a screen. Screens are logical units\ninside your app you'd like to identify at analytics panel.   Events. Events are a useful way to collect data about a user's interaction with interactive components of your game, like the use of a particular item. An event consists of four fields that you can use to describe a user's interaction with your game.  static void logEvent(std::string eventCategory,\n                      std::string eventAction,\n                      std::string eventLabel,\n                      long value);   sdkbox::PluginGoogleAnalytics::logEvent(\"Achievement\", \"Unlocked\", \"Slay 10 dragons\", 5);   Crashes and Exceptions. Crash and exception measurement allows you to measure the number and type of caught and uncaught crashes and exceptions that occur in your game.  static void logException(std::string exceptionDescription, bool isFatal);   Log an exception. It is a basic support for in-app events.   User timing. Measuring user timings provides a native way to measure a period of time in Google Analytics. For example, this can be useful to measure resource load times.  static void logTiming(std::string timingCategory,\n                        int timingInterval,\n                        std::string timingName,\n                        std::string timingLabel);   Measure a time inside the application.   Social. Social interaction measurement allows you to measure a user's interactions with various social network sharing and recommendation widgets embedded in your content.  static void logSocial(std::string socialNetwork,\n                        std::string socialAction,\n                        std::string socialTarget);   Log a social event.   General purpose methods.  static void setDryRun(bool dr);   While running on dry run, the tracked events won't be sent to the actual\nanalytics account.   static void enableAdvertisingTracking(bool e);   Enable advertising tracking when in google's ad vendors.   static void createTracker(std::string trackerId);   Create a tracker identified by the google analytics tracker id XX-YYYYYYYY-Z.\nIf the tracker already existed, no new tracker will be created. In any case, the\ntracker associated with tracker id will be set as default tracker for  analytics\noperations.   static void enableTracker(std::string trackerId);   Enable a tracker identified by a trackerId. If the tracker does not exist,\nnothing will happen.", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/googleanalytics/v2-js/", 
            "text": "Google Analytics\n\n\nIntegration\n\n\nUse the following command to install the SDKBOX Google Analytics plugin, Make sure you setup SDKBOX installer correctly.\n\n\nsdkbox import googleanalytics\n\n\n\n\nExtra steps\n\n\nModify \nYourGameName\n.java\n\n\n\n\nModify \nproj.android/src/\npackage identifier\n/\nYourGameName\n.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify the class to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. Example of what this might look like for you:\n\n\n\n\nprotected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (release, optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n-libraryjars libs/android-support-v4.jar\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.\n\n\nConfiguration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nres/sdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the Google Analytics configuration, you need to replace \nTRACKING_CODE\n  with your specific \nGoogle Analytics Tracking Code\n account information.\n\n\nGoogleAnalytics\n : {\n    \ntrackingCode\n : \nTRACKING_CODE\n\n}\n\n\n\n\nUsage\n\n\nInitialize Google Analytics\n\n\n\n\nInitialize the plugin by calling \ninit()\n where appropriate in your code. We\nrecommend to do this in the \napp.js\n. Example:\n\n\n\n\nsdkbox.PluginGoogleAnalytics.init();\n\n\n\n\n\n\nmodify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n to include the following headers:\n\n\n\n\n#include \nPluginGoogleAnalyticsJS.hpp\n\n\n\n\n\n\n\nModify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n make sure to call:\n\n\n\n\nsc-\naddRegisterCallback(register_all_PluginGoogleAnalyticsJS);\n\n\n\n\nThis registers the Javascript callbacks.\n\n\nAPI Reference\n\n\nMethods\n\n\nDispatch Methods. Dispatches hits (view, events, etc.) to Google Analytics if a network connection is available.\n\n\nsdkbox.PluginGoogleAnalytics.init();\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nsdkbox.PluginGoogleAnalytics.dispatchHits();\n\n\n\n\n\n\nManually request dispatch of hits. By default, data is dispatched from the\nGoogle Analytics SDK for Android every 5 minutes.\n\n\n\n\nsdkbox.PluginGoogleAnalytics.dispatchPeriodically(numberOfSeconds);\n\n\n\n\n\n\nChange the dispatch info time period to the desired amount of seconds.\n\n\n\n\nsdkbox.PluginGoogleAnalytics.stopPeriodicalDispatch();\n\n\n\n\n\n\nStop periodically sending info. Then manually the \ndispatchPeridically\n\nor \ndispatchHits\n should be called.\n\n\n\n\nSession control.  A session represents a single period of user interaction with your game. Sessions serve as useful containers of measured activity, which includes screen views, events, and ecommerce transactions.\n\n\nsdkbox.PluginGoogleAnalytics.startSession();\n\n\n\n\n\n\nThe analytics session is being explicitly started at plugin initialization time.\n\n\n\n\nsdkbox.PluginGoogleAnalytics.stopSession();\n\n\n\n\n\n\nYou normally will never stop a session manually.\n\n\n\n\nScreens. Screens in Google Analytics represent content users are viewing within your game. A screen view consists of a single string field that will be used as the screen name in your Google Analytics reports.\n\n\nsdkbox.PluginGoogleAnalytics.logScreen(title);\n\n\n\n\n\n\nLog screen info. title is the title of a screen. Screens are logical units\ninside your app you'd like to identify at analytics panel.\n\n\n\n\nEvents. Events are a useful way to collect data about a user's interaction with interactive components of your game, like the use of a particular item. An event consists of four fields that you can use to describe a user's interaction with your game.\n\n\nsdkbox.PluginGoogleAnalytics.logEvent(eventCategory, eventAction, eventLabel, value);\n\n\n\n\n\n\nsdkbox.PluginGoogleAnalytics.logEvent(\"Achievement\", \"Unlocked\", \"Slay 10 dragons\", 5);\n\n\n\n\nCrashes and Exceptions. Crash and exception measurement allows you to measure the number and type of caught and uncaught crashes and exceptions that occur in your game.\n\n\nsdkbox.PluginGoogleAnalytics.logException(exceptionDescription, isFatal);\n\n\n\n\n\n\nLog an exception. It is a basic support for in-app events.\n\n\n\n\nUser timing. Measuring user timings provides a native way to measure a period of time in Google Analytics. For example, this can be useful to measure resource load times.\n\n\nsdkbox.PluginGoogleAnalytics.logTiming(timingCategory, timingInterval, timingName, timingLabel);\n\n\n\n\n\n\nMeasure a time inside the application.\n\n\n\n\nSocial. Social interaction measurement allows you to measure a user's interactions with various social network sharing and recommendation widgets embedded in your content.\n\n\nsdkbox.PluginGoogleAnalytics.logSocial(socialNetwork, socialAction, socialTarget);\n\n\n\n\n\n\nLog a social event.\n\n\n\n\nGeneral purpose methods.\n\n\nsdkbox.PluginGoogleAnalytics.setDryRun(dr);\n\n\n\n\n\n\nWhile running on dry run, the tracked events won't be sent to the actual\nanalytics account.\n\n\n\n\nsdkbox.PluginGoogleAnalytics.enableAdvertisingTracking(e);\n\n\n\n\n\n\nEnable advertising tracking when in google's ad vendors.\n\n\n\n\nsdkbox.PluginGoogleAnalytics.createTracker(trackerId);\n\n\n\n\n\n\nCreate a tracker identified by the google analytics tracker id XX-YYYYYYYY-Z.\nIf the tracker already existed, no new tracker will be created. In any case, the\ntracker associated with tracker id will be set as default tracker for  analytics\noperations.\n\n\n\n\nsdkbox.PluginGoogleAnalytics.enableTracker(trackerId);\n\n\n\n\n\n\nEnable a tracker identified by a trackerId. If the tracker does not exist,\nnothing will happen.", 
            "title": "js"
        }, 
        {
            "location": "/plugins/googleanalytics/v2-js/#google-analytics", 
            "text": "", 
            "title": "Google Analytics"
        }, 
        {
            "location": "/plugins/googleanalytics/v2-js/#integration", 
            "text": "Use the following command to install the SDKBOX Google Analytics plugin, Make sure you setup SDKBOX installer correctly.  sdkbox import googleanalytics", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/googleanalytics/v2-js/#extra-steps", 
            "text": "Modify  YourGameName .java   Modify  proj.android/src/ package identifier / YourGameName .java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify the class to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . Example of what this might look like for you:   protected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }  Proguard (release, optional)   Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   Edit the file you specified to include the following:   -libraryjars libs/android-support-v4.jar\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Extra steps"
        }, 
        {
            "location": "/plugins/googleanalytics/v2-js/#configuration", 
            "text": "SDKBOX Installer will automatically inject a sample configuration to your  res/sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the Google Analytics configuration, you need to replace  TRACKING_CODE   with your specific  Google Analytics Tracking Code  account information.  GoogleAnalytics  : {\n     trackingCode  :  TRACKING_CODE \n}", 
            "title": "Configuration"
        }, 
        {
            "location": "/plugins/googleanalytics/v2-js/#usage", 
            "text": "Initialize Google Analytics   Initialize the plugin by calling  init()  where appropriate in your code. We\nrecommend to do this in the  app.js . Example:   sdkbox.PluginGoogleAnalytics.init();   modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  to include the following headers:   #include  PluginGoogleAnalyticsJS.hpp    Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  make sure to call:   sc- addRegisterCallback(register_all_PluginGoogleAnalyticsJS);  This registers the Javascript callbacks.", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/googleanalytics/v2-js/#api-reference", 
            "text": "Methods  Dispatch Methods. Dispatches hits (view, events, etc.) to Google Analytics if a network connection is available.  sdkbox.PluginGoogleAnalytics.init();   initialize the plugin instance.   sdkbox.PluginGoogleAnalytics.dispatchHits();   Manually request dispatch of hits. By default, data is dispatched from the\nGoogle Analytics SDK for Android every 5 minutes.   sdkbox.PluginGoogleAnalytics.dispatchPeriodically(numberOfSeconds);   Change the dispatch info time period to the desired amount of seconds.   sdkbox.PluginGoogleAnalytics.stopPeriodicalDispatch();   Stop periodically sending info. Then manually the  dispatchPeridically \nor  dispatchHits  should be called.   Session control.  A session represents a single period of user interaction with your game. Sessions serve as useful containers of measured activity, which includes screen views, events, and ecommerce transactions.  sdkbox.PluginGoogleAnalytics.startSession();   The analytics session is being explicitly started at plugin initialization time.   sdkbox.PluginGoogleAnalytics.stopSession();   You normally will never stop a session manually.   Screens. Screens in Google Analytics represent content users are viewing within your game. A screen view consists of a single string field that will be used as the screen name in your Google Analytics reports.  sdkbox.PluginGoogleAnalytics.logScreen(title);   Log screen info. title is the title of a screen. Screens are logical units\ninside your app you'd like to identify at analytics panel.   Events. Events are a useful way to collect data about a user's interaction with interactive components of your game, like the use of a particular item. An event consists of four fields that you can use to describe a user's interaction with your game.  sdkbox.PluginGoogleAnalytics.logEvent(eventCategory, eventAction, eventLabel, value);   sdkbox.PluginGoogleAnalytics.logEvent(\"Achievement\", \"Unlocked\", \"Slay 10 dragons\", 5);   Crashes and Exceptions. Crash and exception measurement allows you to measure the number and type of caught and uncaught crashes and exceptions that occur in your game.  sdkbox.PluginGoogleAnalytics.logException(exceptionDescription, isFatal);   Log an exception. It is a basic support for in-app events.   User timing. Measuring user timings provides a native way to measure a period of time in Google Analytics. For example, this can be useful to measure resource load times.  sdkbox.PluginGoogleAnalytics.logTiming(timingCategory, timingInterval, timingName, timingLabel);   Measure a time inside the application.   Social. Social interaction measurement allows you to measure a user's interactions with various social network sharing and recommendation widgets embedded in your content.  sdkbox.PluginGoogleAnalytics.logSocial(socialNetwork, socialAction, socialTarget);   Log a social event.   General purpose methods.  sdkbox.PluginGoogleAnalytics.setDryRun(dr);   While running on dry run, the tracked events won't be sent to the actual\nanalytics account.   sdkbox.PluginGoogleAnalytics.enableAdvertisingTracking(e);   Enable advertising tracking when in google's ad vendors.   sdkbox.PluginGoogleAnalytics.createTracker(trackerId);   Create a tracker identified by the google analytics tracker id XX-YYYYYYYY-Z.\nIf the tracker already existed, no new tracker will be created. In any case, the\ntracker associated with tracker id will be set as default tracker for  analytics\noperations.   sdkbox.PluginGoogleAnalytics.enableTracker(trackerId);   Enable a tracker identified by a trackerId. If the tracker does not exist,\nnothing will happen.", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/googleanalytics/v2-lua/", 
            "text": "Google Analytics\n\n\nIntegration\n\n\nUse the following command to install the SDKBOX Google Analytics plugin, Make sure you setup SDKBOX installer correctly.\n\n\nsdkbox import googleanalytics\n\n\n\n\nExtra steps\n\n\nModify \nYourGameName\n.java\n\n\n\n\nModify \nproj.android/src/\npackage identifier\n/\nYourGameName\n.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify the class to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. Example of what this might look like for you:\n\n\n\n\nprotected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (release, optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n-libraryjars libs/android-support-v4.jar\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.\n\n\nConfiguration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nres/sdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the Google Analytics configuration, you need to replace \nTRACKING_CODE\n  with your specific \nGoogle Analytics Tracking Code\n account information.\n\n\nGoogleAnalytics\n : {\n    \ntrackingCode\n : \nTRACKING_CODE\n\n}\n\n\n\n\nUsage\n\n\nModify \nAppDelegate.cpp\n\n\n\n\nModify \nAppDelegate.cpp\n to include the following headers:\n\n\n\n\n#include \nPluginGoogleAnalyticsLua.hpp\n\n#include \nPLuginGoogleAnalyticsLuaHelper.hpp\n\n\n\n\n\n\n\nSecond, We need to register the plugin with Lua. This is done by making a call to \nregister_all_PluginGoogleAnalyticsLua(\nlua_State*\n);\n. It is important to note that this call must be made after \nlua_State *tolua_s = pStack-\ngetLuaState();\n and before \ntolua_extensions_ccb_open(tolua_s);\n. Here is an example of what this might look like for you:\n\n\n\n\nlua_State* tolua_s = pStack-\ngetLuaState();\nregister_all_PluginGoogleAnalyticsLua(tolua_s);\nregister_all_PluginGoogleAnalyticsLua_helper(tolua_s);\ntolua_extensions_ccb_open(tolua_s);\n\n\n\n\nInitialize Google Analytics\n\n\nModify your Lua code to \ninit()\n the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.\n\n\nsdkbox.PluginGoogleAnalytics:init();\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nDispatch Methods. Dispatches hits (view, events, etc.) to Google Analytics if a network connection is available.\n\n\nsdkbox.PluginGoogleAnalytics:init();\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nsdkbox.PluginGoogleAnalytics:dispatchHits();\n\n\n\n\n\n\nManually request dispatch of hits. By default, data is dispatched from the\nGoogle Analytics SDK for Android every 5 minutes.\n\n\n\n\nsdkbox.PluginGoogleAnalytics:dispatchPeriodically(numberOfSeconds);\n\n\n\n\n\n\nChange the dispatch info time period to the desired amount of seconds.\n\n\n\n\nsdkbox.PluginGoogleAnalytics:stopPeriodicalDispatch();\n\n\n\n\n\n\nStop periodically sending info. Then manually the \ndispatchPeridically\n\nor \ndispatchHits\n should be called.\n\n\n\n\nSession control.  A session represents a single period of user interaction with your game. Sessions serve as useful containers of measured activity, which includes screen views, events, and ecommerce transactions.\n\n\nsdkbox.PluginGoogleAnalytics:startSession();\n\n\n\n\n\n\nThe analytics session is being explicitly started at plugin initialization time.\n\n\n\n\nsdkbox.PluginGoogleAnalytics:stopSession();\n\n\n\n\n\n\nYou normally will never stop a session manually.\n\n\n\n\nScreens. Screens in Google Analytics represent content users are viewing within your game. A screen view consists of a single string field that will be used as the screen name in your Google Analytics reports.\n\n\nsdkbox.PluginGoogleAnalytics:logScreen(title);\n\n\n\n\n\n\nLog screen info. title is the title of a screen. Screens are logical units\ninside your app you'd like to identify at analytics panel.\n\n\n\n\nEvents. Events are a useful way to collect data about a user's interaction with interactive components of your game, like the use of a particular item. An event consists of four fields that you can use to describe a user's interaction with your game.\n\n\nsdkbox.PluginGoogleAnalytics:logEvent(eventCategory, eventAction, eventLabel, value);\n\n\n\n\n\n\nsdkbox.PluginGoogleAnalytics:logEvent(\"Achievement\", \"Unlocked\", \"Slay 10 dragons\", 5);;\n\n\n\n\nCrashes and Exceptions. Crash and exception measurement allows you to measure the number and type of caught and uncaught crashes and exceptions that occur in your game.\n\n\nsdkbox.PluginGoogleAnalytics:logException(exceptionDescription, isFatal);\n\n\n\n\n\n\nLog an exception. It is a basic support for in-app events.\n\n\n\n\nUser timing. Measuring user timings provides a native way to measure a period of time in Google Analytics. For example, this can be useful to measure resource load times.\n\n\nsdkbox.PluginGoogleAnalytics:logTiming(timingCategory, timingInterval, timingName, timingLabel);\n\n\n\n\n\n\nMeasure a time inside the application.\n\n\n\n\nSocial. Social interaction measurement allows you to measure a user's interactions with various social network sharing and recommendation widgets embedded in your content.\n\n\nsdkbox.PluginGoogleAnalytics:logSocial(socialNetwork, socialAction, socialTarget);\n\n\n\n\n\n\nLog a social event.\n\n\n\n\nGeneral purpose methods.\n\n\nsdkbox.PluginGoogleAnalytics:setDryRun(dr);\n\n\n\n\n\n\nWhile running on dry run, the tracked events won't be sent to the actual\nanalytics account.\n\n\n\n\nsdkbox.PluginGoogleAnalytics:enableAdvertisingTracking(e);\n\n\n\n\n\n\nEnable advertising tracking when in google's ad vendors.\n\n\n\n\nsdkbox.PluginGoogleAnalytics:createTracker(trackerId);\n\n\n\n\n\n\nCreate a tracker identified by the google analytics tracker id XX-YYYYYYYY-Z.\nIf the tracker already existed, no new tracker will be created. In any case, the\ntracker associated with tracker id will be set as default tracker for  analytics\noperations.\n\n\n\n\nsdkbox.PluginGoogleAnalytics:enableTracker(trackerId);\n\n\n\n\n\n\nEnable a tracker identified by a trackerId. If the tracker does not exist,\nnothing will happen.", 
            "title": "lua"
        }, 
        {
            "location": "/plugins/googleanalytics/v2-lua/#google-analytics", 
            "text": "", 
            "title": "Google Analytics"
        }, 
        {
            "location": "/plugins/googleanalytics/v2-lua/#integration", 
            "text": "Use the following command to install the SDKBOX Google Analytics plugin, Make sure you setup SDKBOX installer correctly.  sdkbox import googleanalytics", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/googleanalytics/v2-lua/#extra-steps", 
            "text": "Modify  YourGameName .java   Modify  proj.android/src/ package identifier / YourGameName .java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify the class to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . Example of what this might look like for you:   protected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }  Proguard (release, optional)   Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   Edit the file you specified to include the following:   -libraryjars libs/android-support-v4.jar\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Extra steps"
        }, 
        {
            "location": "/plugins/googleanalytics/v2-lua/#configuration", 
            "text": "SDKBOX Installer will automatically inject a sample configuration to your  res/sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the Google Analytics configuration, you need to replace  TRACKING_CODE   with your specific  Google Analytics Tracking Code  account information.  GoogleAnalytics  : {\n     trackingCode  :  TRACKING_CODE \n}", 
            "title": "Configuration"
        }, 
        {
            "location": "/plugins/googleanalytics/v2-lua/#usage", 
            "text": "Modify  AppDelegate.cpp   Modify  AppDelegate.cpp  to include the following headers:   #include  PluginGoogleAnalyticsLua.hpp \n#include  PLuginGoogleAnalyticsLuaHelper.hpp    Second, We need to register the plugin with Lua. This is done by making a call to  register_all_PluginGoogleAnalyticsLua( lua_State* ); . It is important to note that this call must be made after  lua_State *tolua_s = pStack- getLuaState();  and before  tolua_extensions_ccb_open(tolua_s); . Here is an example of what this might look like for you:   lua_State* tolua_s = pStack- getLuaState();\nregister_all_PluginGoogleAnalyticsLua(tolua_s);\nregister_all_PluginGoogleAnalyticsLua_helper(tolua_s);\ntolua_extensions_ccb_open(tolua_s);  Initialize Google Analytics  Modify your Lua code to  init()  the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.  sdkbox.PluginGoogleAnalytics:init();", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/googleanalytics/v2-lua/#api-reference", 
            "text": "Methods  Dispatch Methods. Dispatches hits (view, events, etc.) to Google Analytics if a network connection is available.  sdkbox.PluginGoogleAnalytics:init();   initialize the plugin instance.   sdkbox.PluginGoogleAnalytics:dispatchHits();   Manually request dispatch of hits. By default, data is dispatched from the\nGoogle Analytics SDK for Android every 5 minutes.   sdkbox.PluginGoogleAnalytics:dispatchPeriodically(numberOfSeconds);   Change the dispatch info time period to the desired amount of seconds.   sdkbox.PluginGoogleAnalytics:stopPeriodicalDispatch();   Stop periodically sending info. Then manually the  dispatchPeridically \nor  dispatchHits  should be called.   Session control.  A session represents a single period of user interaction with your game. Sessions serve as useful containers of measured activity, which includes screen views, events, and ecommerce transactions.  sdkbox.PluginGoogleAnalytics:startSession();   The analytics session is being explicitly started at plugin initialization time.   sdkbox.PluginGoogleAnalytics:stopSession();   You normally will never stop a session manually.   Screens. Screens in Google Analytics represent content users are viewing within your game. A screen view consists of a single string field that will be used as the screen name in your Google Analytics reports.  sdkbox.PluginGoogleAnalytics:logScreen(title);   Log screen info. title is the title of a screen. Screens are logical units\ninside your app you'd like to identify at analytics panel.   Events. Events are a useful way to collect data about a user's interaction with interactive components of your game, like the use of a particular item. An event consists of four fields that you can use to describe a user's interaction with your game.  sdkbox.PluginGoogleAnalytics:logEvent(eventCategory, eventAction, eventLabel, value);   sdkbox.PluginGoogleAnalytics:logEvent(\"Achievement\", \"Unlocked\", \"Slay 10 dragons\", 5);;   Crashes and Exceptions. Crash and exception measurement allows you to measure the number and type of caught and uncaught crashes and exceptions that occur in your game.  sdkbox.PluginGoogleAnalytics:logException(exceptionDescription, isFatal);   Log an exception. It is a basic support for in-app events.   User timing. Measuring user timings provides a native way to measure a period of time in Google Analytics. For example, this can be useful to measure resource load times.  sdkbox.PluginGoogleAnalytics:logTiming(timingCategory, timingInterval, timingName, timingLabel);   Measure a time inside the application.   Social. Social interaction measurement allows you to measure a user's interactions with various social network sharing and recommendation widgets embedded in your content.  sdkbox.PluginGoogleAnalytics:logSocial(socialNetwork, socialAction, socialTarget);   Log a social event.   General purpose methods.  sdkbox.PluginGoogleAnalytics:setDryRun(dr);   While running on dry run, the tracked events won't be sent to the actual\nanalytics account.   sdkbox.PluginGoogleAnalytics:enableAdvertisingTracking(e);   Enable advertising tracking when in google's ad vendors.   sdkbox.PluginGoogleAnalytics:createTracker(trackerId);   Create a tracker identified by the google analytics tracker id XX-YYYYYYYY-Z.\nIf the tracker already existed, no new tracker will be created. In any case, the\ntracker associated with tracker id will be set as default tracker for  analytics\noperations.   sdkbox.PluginGoogleAnalytics:enableTracker(trackerId);   Enable a tracker identified by a trackerId. If the tracker does not exist,\nnothing will happen.", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/iap/v3-cpp/", 
            "text": "In-App Purchase\n\n\nIntegration\n\n\nUse the following command to install the SDKBOX IAP plugin, Make sure you setup SDKBOX installer correctly.\n\n\nsdkbox import iap\n\n\n\n\nExtra steps\n\n\nModify \nCocos2dxActivity.java\n\n\n\n\n\n\nIf you're using cocos2d-x from source, assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java\n\n\n\n\n\n\nIf you're using the prebuilt cocos2d-x libraries assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n./src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nNote:\n When using Cocos2d-x from source, different versions have \nCocos2dxActivity.java\n in a different location. One way to find the location is to look in \nproj.android/project.properties\n. Example:\n\n\nandroid.library.reference.1=../../cocos2d-x/cocos/platform/android/java\n\n\n\n\nIn this case, \nCocos2dxActivity.java\n should be located at:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nModify \nCocos2dxActivity.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify \nCocos2dxActivity\n to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. The placement of this call is important. It must be done after the call to \nonLoadNativeLibraries();\n. Example:\n\n\n\n\nonLoadNativeLibraries();\nSDKBox.init(this);\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nConfiguration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nsdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the IAP configuration, you need to replace \nput the product id for ios here\n with the product id from your \niTunes Connect\n or  replace \nput your googleplay key here\n from your \nGoogle Play Console\n\n\nios\n :\n{\n    \niap\n:{\n        \nitems\n:{\n            \nremove_ads\n:{\n                \nid\n:\nput the product id for ios here\n\n            }\n        }\n    }\n},\n\nandroid\n:\n{\n    \niap\n:{\n        \nkey\n:\nput your googleplay key here\n,\n        \nitems\n:{\n          \nremove_ads\n:{\n              \nid\n:\nput the product id for android here\n\n          }\n        }\n    }\n}\n\n\n\n\nUsage\n\n\nInitialize IAP\n\n\nInitialize the plugin where appropriate in your code. We recommend to do this in the \nAppDelegate::applicationDidFinishLaunching()\n or \nAppController:didFinishLaunchingWithOptions()\n. Make sure to include the appropriate headers:\n\n\n#include \nPluginIAP/PluginIAP.h\n\nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginIAP::init();\n}\n\n\n\n\nRetrieve latest Product data\n\n\nIt's always a good idea to retrieve the latest product data from store when your game starts.\n\n\nTo retrieve latest IAP data, simply call \nsdkbox::IAP::refresh()\n.\n\n\n\n\nonProductRequestSuccess\n will be trigged if retrieved successfully.\n\n\nonProductRequestFailure\n will be trigged if exception occurs.\n\n\n\n\nMake a purchase\n\n\nTo make a purchase call \nsdkbox::IAP::purchase(name)\n\n\nNote:\n \nname\n is the name of the IAP item in your config file under \nitems\n tag, not the product id you set in iTunes or GooglePlay Store\n\n\n\n\nonSuccess\n will be triggered if purchase is successful.\n\n\nonFailure\n will be triggered if purchase fails.\n\n\nonCanceled\n will be triggered if purchase is canceled by user.\n\n\n\n\nRestore purchase\n\n\nTo restore purchase call \nsdkbox::IAP::restore()\n.\n\n\n\n\nonRestored\n will be triggered if restore is successful.\n\n\n\n\nNote:\n \nonRestored\n could be triggered multiple times\n\n\nHandling Purchase Events\n\n\nThis allows you to catch the \nIAP\n events so that you can perform operations based upon the response from your players and IAP servers.\n\n\n\n\nAllow your class to extend \nsdkbox::IAPListener\n:\n\n\n\n\n    #include \nPluginIAP/PluginIAP.h\n\n    class MyClass : public sdkbox::IAPListener\n    {\n    private:\n        virtual void onSuccess(sdkbox::Product const\n p) override;\n        virtual void onFailure(sdkbox::Product const\n p, const std::string \nmsg)\n           override;\n        virtual void onCanceled(sdkbox::Product const\n p) override;\n        virtual void onRestored(sdkbox::Product const\n p) override;\n        virtual void onProductRequestSuccess(std::vector\nsdkbox::Product\n const \nproducts)\n        override;\n        virtual void onProductRequestFailure(const std::string \nmsg) override;\n    }\n\n\n\n\n\n\nCreate a \nlistener\n that handles callbacks:\n\n\n\n\nsdkbox::IAP::setListener(listener);\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nstatic void init();\n\n\n\n\n\n\nInitialize SDKBox IAP\n\n\n\n\nstatic void setDebug(bool debug);\n\n\n\n\n\n\nEnable/disable debug logging\n\n\n\n\nstatic void purchase(const std::string\n name);\n\n\n\n\n\n\nMake a purchase request\n\n\n\n\nstatic void refresh();\n\n\n\n\n\n\nRefresh the IAP data(title, price, description)\n\n\n\n\nstatic void restore();\n\n\n\n\n\n\nRestore purchase\n\n\n\n\nstatic void setListener(IAPListener* listener);\n\n\n\n\n\n\nSet listener for IAP\n\n\n\n\nstatic void removeListener();\n\n\n\n\n\n\nRemove listener for IAP\n\n\n\n\nListeners\n\n\nvirtual void onSuccess(const Product\n p) = 0;\n\n\n\n\n\n\nCalled when an IAP processed successfully\n\n\n\n\nvirtual void onFailure(const Product\n p, const std::string\n msg) = 0;\n\n\n\n\n\n\nCalled when an IAP fails\n\n\n\n\nvirtual void onCanceled(const Product\n p) = 0;\n\n\n\n\n\n\nCalled when user canceled the IAP\n\n\n\n\nvirtual void onRestored(const Product\n p) = 0;\n\n\n\n\n\n\nCalled when server returns the IAP items user already purchased\n\n\n\n\nvirtual void onProductRequestSuccess(const std::vector\nProduct\n products) = 0;\n\n\n\n\n\n\nCalled the product request is successful, usually developers use product request to update the latest info(title, price) from IAP\n\n\n\n\nvirtual void onProductRequestFailure(const std::string\n msg) = 0;\n\n\n\n\n\n\nCalled when the product request fails", 
            "title": "c++"
        }, 
        {
            "location": "/plugins/iap/v3-cpp/#in-app-purchase", 
            "text": "", 
            "title": "In-App Purchase"
        }, 
        {
            "location": "/plugins/iap/v3-cpp/#integration", 
            "text": "Use the following command to install the SDKBOX IAP plugin, Make sure you setup SDKBOX installer correctly.  sdkbox import iap", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/iap/v3-cpp/#extra-steps", 
            "text": "Modify  Cocos2dxActivity.java    If you're using cocos2d-x from source, assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java    If you're using the prebuilt cocos2d-x libraries assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ./src/org/cocos2dx/lib/Cocos2dxActivity.java    Note:  When using Cocos2d-x from source, different versions have  Cocos2dxActivity.java  in a different location. One way to find the location is to look in  proj.android/project.properties . Example:  android.library.reference.1=../../cocos2d-x/cocos/platform/android/java  In this case,  Cocos2dxActivity.java  should be located at:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java   Modify  Cocos2dxActivity.java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify  Cocos2dxActivity  to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . The placement of this call is important. It must be done after the call to  onLoadNativeLibraries(); . Example:   onLoadNativeLibraries();\nSDKBox.init(this);    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Extra steps"
        }, 
        {
            "location": "/plugins/iap/v3-cpp/#configuration", 
            "text": "SDKBOX Installer will automatically inject a sample configuration to your  sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the IAP configuration, you need to replace  put the product id for ios here  with the product id from your  iTunes Connect  or  replace  put your googleplay key here  from your  Google Play Console  ios  :\n{\n     iap :{\n         items :{\n             remove_ads :{\n                 id : put the product id for ios here \n            }\n        }\n    }\n}, android :\n{\n     iap :{\n         key : put your googleplay key here ,\n         items :{\n           remove_ads :{\n               id : put the product id for android here \n          }\n        }\n    }\n}", 
            "title": "Configuration"
        }, 
        {
            "location": "/plugins/iap/v3-cpp/#usage", 
            "text": "Initialize IAP  Initialize the plugin where appropriate in your code. We recommend to do this in the  AppDelegate::applicationDidFinishLaunching()  or  AppController:didFinishLaunchingWithOptions() . Make sure to include the appropriate headers:  #include  PluginIAP/PluginIAP.h \nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginIAP::init();\n}  Retrieve latest Product data  It's always a good idea to retrieve the latest product data from store when your game starts.  To retrieve latest IAP data, simply call  sdkbox::IAP::refresh() .   onProductRequestSuccess  will be trigged if retrieved successfully.  onProductRequestFailure  will be trigged if exception occurs.   Make a purchase  To make a purchase call  sdkbox::IAP::purchase(name)  Note:   name  is the name of the IAP item in your config file under  items  tag, not the product id you set in iTunes or GooglePlay Store   onSuccess  will be triggered if purchase is successful.  onFailure  will be triggered if purchase fails.  onCanceled  will be triggered if purchase is canceled by user.   Restore purchase  To restore purchase call  sdkbox::IAP::restore() .   onRestored  will be triggered if restore is successful.   Note:   onRestored  could be triggered multiple times  Handling Purchase Events  This allows you to catch the  IAP  events so that you can perform operations based upon the response from your players and IAP servers.   Allow your class to extend  sdkbox::IAPListener :       #include  PluginIAP/PluginIAP.h \n    class MyClass : public sdkbox::IAPListener\n    {\n    private:\n        virtual void onSuccess(sdkbox::Product const  p) override;\n        virtual void onFailure(sdkbox::Product const  p, const std::string  msg)\n           override;\n        virtual void onCanceled(sdkbox::Product const  p) override;\n        virtual void onRestored(sdkbox::Product const  p) override;\n        virtual void onProductRequestSuccess(std::vector sdkbox::Product  const  products)\n        override;\n        virtual void onProductRequestFailure(const std::string  msg) override;\n    }   Create a  listener  that handles callbacks:   sdkbox::IAP::setListener(listener);", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/iap/v3-cpp/#api-reference", 
            "text": "Methods  static void init();   Initialize SDKBox IAP   static void setDebug(bool debug);   Enable/disable debug logging   static void purchase(const std::string  name);   Make a purchase request   static void refresh();   Refresh the IAP data(title, price, description)   static void restore();   Restore purchase   static void setListener(IAPListener* listener);   Set listener for IAP   static void removeListener();   Remove listener for IAP   Listeners  virtual void onSuccess(const Product  p) = 0;   Called when an IAP processed successfully   virtual void onFailure(const Product  p, const std::string  msg) = 0;   Called when an IAP fails   virtual void onCanceled(const Product  p) = 0;   Called when user canceled the IAP   virtual void onRestored(const Product  p) = 0;   Called when server returns the IAP items user already purchased   virtual void onProductRequestSuccess(const std::vector Product  products) = 0;   Called the product request is successful, usually developers use product request to update the latest info(title, price) from IAP   virtual void onProductRequestFailure(const std::string  msg) = 0;   Called when the product request fails", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/iap/v3-js/", 
            "text": "In-App Purchase\n\n\nIntegration\n\n\nUse the following command to install the SDKBOX IAP plugin, Make sure you setup SDKBOX installer correctly.\n\n\nsdkbox import iap\n\n\n\n\nExtra steps\n\n\nModify \nCocos2dxActivity.java\n\n\n\n\n\n\nIf you're using cocos2d-x from source, assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java\n\n\n\n\n\n\nIf you're using the prebuilt cocos2d-x libraries assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n./src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nNote:\n When using Cocos2d-x from source, different versions have \nCocos2dxActivity.java\n in a different location. One way to find the location is to look in \nproj.android/project.properties\n. Example:\n\n\nandroid.library.reference.1=../../cocos2d-x/cocos/platform/android/java\n\n\n\n\nIn this case, \nCocos2dxActivity.java\n should be located at:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nModify \nCocos2dxActivity.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify \nCocos2dxActivity\n to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. The placement of this call is important. It must be done after the call to \nonLoadNativeLibraries();\n. Example:\n\n\n\n\nonLoadNativeLibraries();\nSDKBox.init(this);\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nConfiguration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nsdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the IAP configuration, you need to replace \nput the product id for ios here\n with the product id from your \niTunes Connect\n or  replace \nput your googleplay key here\n from your \nGoogle Play Console\n\n\nios\n :\n{\n    \niap\n:{\n        \nitems\n:{\n            \nremove_ads\n:{\n                \nid\n:\nput the product id for ios here\n\n            }\n        }\n    }\n},\n\nandroid\n:\n{\n    \niap\n:{\n        \nkey\n:\nput your googleplay key here\n,\n        \nitems\n:{\n          \nremove_ads\n:{\n              \nid\n:\nput the product id for android here\n\n          }\n        }\n    }\n}\n\n\n\n\nUsage\n\n\nInitialize IAP\n\n\n\n\nInitialize the plugin by calling \ninit()\n where appropriate in your code. We\nrecommend to do this in the \napp.js\n. Example:\n\n\n\n\nsdkbox.IAP.init();\n\n\n\n\n\n\nModify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n to include the following headers:\n\n\n\n\n#include \nPluginIAPJS.hpp\n\n#include \nPluginIAPJSHelper.hpp\n\n\n\n\n\n\n\nModify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n make sure to call:\n\n\n\n\nsc-\naddRegisterCallback(register_all_PluginIAPJS);\nsc-\naddRegisterCallback(register_all_PluginIAPJS_helper);\n\n\n\n\nThis registers the Javascript callbacks.\n\n\nRetrieve latest Product data\n\n\nIt's always a good idea to retrieve the latest product data from store when your game starts.\n\n\nTo retrieve latest IAP data, simply call \nsdkbox.IAP.refresh()\n.\n\n\n\n\nonProductRequestSuccess\n if retrieved successfully.\n\n\nonProductRequestFailure\n if exception occurs.\n\n\n\n\nMake a purchase\n\n\nTo make a purchase call \nsdkbox.IAP.purchase(name)\n\n\nNote:\n \nname\n is the name of the IAP item in your config file under \nitems\n tag, not the product id you set in iTunes or GooglePlay Store\n\n\n\n\nonSuccess\n will be triggered if purchase is successful.\n\n\nonFailure\n will be triggered if purchase fails.\n\n\nonCanceled\n will be triggered if purchase is canceled by user.\n\n\n\n\nRestore purchase\n\n\nTo restore purchase call \nsdkbox.IAP.restore()\n.\n\n\n\n\nonRestored\n will be triggered if restore is successful.\n\n\n\n\nNote:\n \nonRestored\n could be triggered multiple times\n\n\nHandling Purchase Events\n\n\nThis allows you to catch the \nIAP\n events so that you can perform operations based upon the response from your players and IAP servers.\n\n\nsdkbox.IAP.setListener({\n    onSuccess : function (product) {\n        //Purchase success\n    },\n    onFailure : function (product, msg) {\n        //Purchase failed\n        //msg is the error message\n    },\n    onCanceled : function (product) {\n        //Purchase was canceled by user\n    },\n    onRestored : function (product) {\n        //Purchase restored\n    },\n    onProductRequestSuccess : function (products) {\n        //Returns you the data for all the iap products\n        //You can get each item using following method\n        for (var i = 0; i \n products.length; i++) {\n            // loop\n        }\n    },\n    onProductRequestFailure : function (msg) {\n        //When product refresh request fails.\n    }\n});\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.IAP.init();\n\n\n\n\n\n\nInitialize SDKBox IAP\n\n\n\n\nsdkbox.IAP.setDebug(debug);\n\n\n\n\n\n\nEnable/disable debug logging\n\n\n\n\nsdkbox.IAP.purchase(name);\n\n\n\n\n\n\nMake a purchase request\n\n\n\n\nsdkbox.IAP.refresh();\n\n\n\n\n\n\nRefresh the IAP data(title, price, description)\n\n\n\n\nsdkbox.IAP.restore();\n\n\n\n\n\n\nRestore purchase\n\n\n\n\nsdkbox.IAP.setListener(listener);\n\n\n\n\n\n\nSet listener for IAP\n\n\n\n\nsdkbox.IAP.removeListener();\n\n\n\n\n\n\nRemove listener for IAP\n\n\n\n\nListeners\n\n\nsdkbox.IAP.onSuccess(product);\n\n\n\n\n\n\nCalled when an IAP processed successfully\n\n\n\n\nsdkbox.IAP.onFailure(product, message);\n\n\n\n\n\n\nCalled when an IAP fails\n\n\n\n\nsdkbox.IAP.onCanceled(product);\n\n\n\n\n\n\nCalled when user canceled the IAP\n\n\n\n\nsdkbox.IAP.onRestored(product);\n\n\n\n\n\n\nCalled when server returns the IAP items user already purchased\n\n\n\n\nsdkbox.IAP.onProductRequestSuccess(products);\n\n\n\n\n\n\nCalled the product request is successful, usually developers use product request to update the latest info(title, price) from IAP\n\n\n\n\nsdkbox.IAP.onProductRequestFailure(message);\n\n\n\n\n\n\nCalled when the product request fails", 
            "title": "js"
        }, 
        {
            "location": "/plugins/iap/v3-js/#in-app-purchase", 
            "text": "", 
            "title": "In-App Purchase"
        }, 
        {
            "location": "/plugins/iap/v3-js/#integration", 
            "text": "Use the following command to install the SDKBOX IAP plugin, Make sure you setup SDKBOX installer correctly.  sdkbox import iap", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/iap/v3-js/#extra-steps", 
            "text": "Modify  Cocos2dxActivity.java    If you're using cocos2d-x from source, assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java    If you're using the prebuilt cocos2d-x libraries assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ./src/org/cocos2dx/lib/Cocos2dxActivity.java    Note:  When using Cocos2d-x from source, different versions have  Cocos2dxActivity.java  in a different location. One way to find the location is to look in  proj.android/project.properties . Example:  android.library.reference.1=../../cocos2d-x/cocos/platform/android/java  In this case,  Cocos2dxActivity.java  should be located at:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java   Modify  Cocos2dxActivity.java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify  Cocos2dxActivity  to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . The placement of this call is important. It must be done after the call to  onLoadNativeLibraries(); . Example:   onLoadNativeLibraries();\nSDKBox.init(this);    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Extra steps"
        }, 
        {
            "location": "/plugins/iap/v3-js/#configuration", 
            "text": "SDKBOX Installer will automatically inject a sample configuration to your  sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the IAP configuration, you need to replace  put the product id for ios here  with the product id from your  iTunes Connect  or  replace  put your googleplay key here  from your  Google Play Console  ios  :\n{\n     iap :{\n         items :{\n             remove_ads :{\n                 id : put the product id for ios here \n            }\n        }\n    }\n}, android :\n{\n     iap :{\n         key : put your googleplay key here ,\n         items :{\n           remove_ads :{\n               id : put the product id for android here \n          }\n        }\n    }\n}", 
            "title": "Configuration"
        }, 
        {
            "location": "/plugins/iap/v3-js/#usage", 
            "text": "Initialize IAP   Initialize the plugin by calling  init()  where appropriate in your code. We\nrecommend to do this in the  app.js . Example:   sdkbox.IAP.init();   Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  to include the following headers:   #include  PluginIAPJS.hpp \n#include  PluginIAPJSHelper.hpp    Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  make sure to call:   sc- addRegisterCallback(register_all_PluginIAPJS);\nsc- addRegisterCallback(register_all_PluginIAPJS_helper);  This registers the Javascript callbacks.  Retrieve latest Product data  It's always a good idea to retrieve the latest product data from store when your game starts.  To retrieve latest IAP data, simply call  sdkbox.IAP.refresh() .   onProductRequestSuccess  if retrieved successfully.  onProductRequestFailure  if exception occurs.   Make a purchase  To make a purchase call  sdkbox.IAP.purchase(name)  Note:   name  is the name of the IAP item in your config file under  items  tag, not the product id you set in iTunes or GooglePlay Store   onSuccess  will be triggered if purchase is successful.  onFailure  will be triggered if purchase fails.  onCanceled  will be triggered if purchase is canceled by user.   Restore purchase  To restore purchase call  sdkbox.IAP.restore() .   onRestored  will be triggered if restore is successful.   Note:   onRestored  could be triggered multiple times  Handling Purchase Events  This allows you to catch the  IAP  events so that you can perform operations based upon the response from your players and IAP servers.  sdkbox.IAP.setListener({\n    onSuccess : function (product) {\n        //Purchase success\n    },\n    onFailure : function (product, msg) {\n        //Purchase failed\n        //msg is the error message\n    },\n    onCanceled : function (product) {\n        //Purchase was canceled by user\n    },\n    onRestored : function (product) {\n        //Purchase restored\n    },\n    onProductRequestSuccess : function (products) {\n        //Returns you the data for all the iap products\n        //You can get each item using following method\n        for (var i = 0; i   products.length; i++) {\n            // loop\n        }\n    },\n    onProductRequestFailure : function (msg) {\n        //When product refresh request fails.\n    }\n});", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/iap/v3-js/#api-reference", 
            "text": "Methods  sdkbox.IAP.init();   Initialize SDKBox IAP   sdkbox.IAP.setDebug(debug);   Enable/disable debug logging   sdkbox.IAP.purchase(name);   Make a purchase request   sdkbox.IAP.refresh();   Refresh the IAP data(title, price, description)   sdkbox.IAP.restore();   Restore purchase   sdkbox.IAP.setListener(listener);   Set listener for IAP   sdkbox.IAP.removeListener();   Remove listener for IAP   Listeners  sdkbox.IAP.onSuccess(product);   Called when an IAP processed successfully   sdkbox.IAP.onFailure(product, message);   Called when an IAP fails   sdkbox.IAP.onCanceled(product);   Called when user canceled the IAP   sdkbox.IAP.onRestored(product);   Called when server returns the IAP items user already purchased   sdkbox.IAP.onProductRequestSuccess(products);   Called the product request is successful, usually developers use product request to update the latest info(title, price) from IAP   sdkbox.IAP.onProductRequestFailure(message);   Called when the product request fails", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/iap/v3-lua/", 
            "text": "In-App Purchase\n\n\nIntegration\n\n\nUse the following command to install the SDKBOX IAP plugin, Make sure you setup SDKBOX installer correctly.\n\n\nsdkbox import iap\n\n\n\n\nExtra steps\n\n\nModify \nCocos2dxActivity.java\n\n\n\n\n\n\nIf you're using cocos2d-x from source, assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java\n\n\n\n\n\n\nIf you're using the prebuilt cocos2d-x libraries assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n./src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nNote:\n When using Cocos2d-x from source, different versions have \nCocos2dxActivity.java\n in a different location. One way to find the location is to look in \nproj.android/project.properties\n. Example:\n\n\nandroid.library.reference.1=../../cocos2d-x/cocos/platform/android/java\n\n\n\n\nIn this case, \nCocos2dxActivity.java\n should be located at:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nModify \nCocos2dxActivity.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify \nCocos2dxActivity\n to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. The placement of this call is important. It must be done after the call to \nonLoadNativeLibraries();\n. Example:\n\n\n\n\nonLoadNativeLibraries();\nSDKBox.init(this);\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nConfiguration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nsdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the IAP configuration, you need to replace \nput the product id for ios here\n with the product id from your \niTunes Connect\n or  replace \nput your googleplay key here\n from your \nGoogle Play Console\n\n\nios\n :\n{\n    \niap\n:{\n        \nitems\n:{\n            \nremove_ads\n:{\n                \nid\n:\nput the product id for ios here\n\n            }\n        }\n    }\n},\n\nandroid\n:\n{\n    \niap\n:{\n        \nkey\n:\nput your googleplay key here\n,\n        \nitems\n:{\n          \nremove_ads\n:{\n              \nid\n:\nput the product id for android here\n\n          }\n        }\n    }\n}\n\n\n\n\nUsage\n\n\nModify Lua Code\n\n\nModify \n./frameworks/runtime-src/Classes/lua_module_register.h\n to include the necessary headers and calls to register \nIAP\n with Lua. Note this takes a parameter of \nlua_State*\n:\n\n\n#include \nPluginIAPLua.hpp\n\n#include \nPluginIAPLuaHelper.hpp\n\n\n\n\n\nstatic int lua_module_register(lua_State* L)\n{\n  register_all_PluginIAPLua(L);\n  register_PluginIAPLua_helper(L);\n}\n\n\n\n\nInitialize IAP\n\n\n\n\nmodify your Lua code to \ninit()\n the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.\n\n\n\n\nsdkbox.IAP:init();\n\n\n\n\nRetrieve latest Product data\n\n\nIt's always a good idea to retrieve the latest product data from store when your game starts.\n\n\nTo retrieve latest IAP data, simply call \nsdkbox.IAP:refresh()\n.\n\n\n\n\nonProductRequestSuccess\n if retrieved successfully.\n\n\nonProductRequestFailure\n if exception occurs.\n\n\n\n\nMake a purchase\n\n\nTo make a purchase call \nsdkbox.IAP:purchase(name)\n\n\nNote:\n \nname\n is the name of the IAP item in your config file under \nitems\n tag, not the product id you set in iTunes or GooglePlay Store\n\n\n\n\nonSuccess\n will be triggered if purchase is successful.\n\n\nonFailure\n will be triggered if purchase fails.\n\n\nonCanceled\n will be triggered if purchase is canceled by user.\n\n\n\n\nRestore purchase\n\n\nTo restore purchase call \nsdkbox.IAP:restore()\n.\n\n\n\n\nonRestored\n will be triggered if restore is successful.\n\n\n\n\nNote:\n \nonRestored\n could be triggered multiple times\n\n\nHandling Purchase Events\n\n\nThis allows you to catch the \nIAP\n events so that you can perform operations based upon the response from your players and IAP servers.\n\n\nsdkbox.IAP:setListener(function(args)\n        if \nonSuccess\n == args.event then\n                local product = args.product\n                dump(product, \nonSuccess:\n)\n        elseif \nonFailure\n == args.event then\n                local product = args.product\n                local msg = args.msg\n                dump(product, \nonFailure:\n)\n                print(\nmsg:\n, msg)\n        elseif \nonCanceled\n == args.event then\n                local product = args.product\n                dump(product, \nonCanceled:\n)\n        elseif \nonRestored\n == args.event then\n                local product = args.product\n                dump(product, \nonRestored:\n)\n        elseif \nonProductRequestSuccess\n == args.event then\n                local products = args.products\n                dump(products, \nonProductRequestSuccess:\n)\n        elseif \nonProductRequestFailure\n == args.event then\n                local msg = args.msg\n                print(\nmsg:\n, msg)\n        else\n                print(\nunknow event \n, args.event)\n        end\nend)\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.IAP:init();\n\n\n\n\n\n\nInitialize SDKBox IAP\n\n\n\n\nsdkbox.IAP:setDebug(debug);\n\n\n\n\n\n\nEnable/disable debug logging\n\n\n\n\nsdkbox.IAP:purchase(name);\n\n\n\n\n\n\nMake a purchase request\n\n\n\n\nsdkbox.IAP:refresh();\n\n\n\n\n\n\nRefresh the IAP data(title, price, description)\n\n\n\n\nsdkbox.IAP:restore();\n\n\n\n\n\n\nRestore purchase\n\n\n\n\nsdkbox.IAP:setListener(listener);\n\n\n\n\n\n\nSet listener for IAP\n\n\n\n\nsdkbox.IAP:removeListener();\n\n\n\n\n\n\nRemove listener for IAP\n\n\n\n\nListeners\n\n\nsdkbox.IAP:onSuccess(product);\n\n\n\n\n\n\nCalled when an IAP processed successfully\n\n\n\n\nsdkbox.IAP:onFailure(product, message);\n\n\n\n\n\n\nCalled when an IAP fails\n\n\n\n\nsdkbox.IAP:onCanceled(product);\n\n\n\n\n\n\nCalled when user canceled the IAP\n\n\n\n\nsdkbox.IAP:onRestored(product);\n\n\n\n\n\n\nCalled when server returns the IAP items user already purchased\n\n\n\n\nsdkbox.IAP:onProductRequestSuccess(products);\n\n\n\n\n\n\nCalled the product request is successful, usually developers use product request to update the latest info(title, price) from IAP\n\n\n\n\nsdkbox.IAP:onProductRequestFailure(message);\n\n\n\n\n\n\nCalled when the product request fails", 
            "title": "lua"
        }, 
        {
            "location": "/plugins/iap/v3-lua/#in-app-purchase", 
            "text": "", 
            "title": "In-App Purchase"
        }, 
        {
            "location": "/plugins/iap/v3-lua/#integration", 
            "text": "Use the following command to install the SDKBOX IAP plugin, Make sure you setup SDKBOX installer correctly.  sdkbox import iap", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/iap/v3-lua/#extra-steps", 
            "text": "Modify  Cocos2dxActivity.java    If you're using cocos2d-x from source, assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java    If you're using the prebuilt cocos2d-x libraries assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ./src/org/cocos2dx/lib/Cocos2dxActivity.java    Note:  When using Cocos2d-x from source, different versions have  Cocos2dxActivity.java  in a different location. One way to find the location is to look in  proj.android/project.properties . Example:  android.library.reference.1=../../cocos2d-x/cocos/platform/android/java  In this case,  Cocos2dxActivity.java  should be located at:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java   Modify  Cocos2dxActivity.java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify  Cocos2dxActivity  to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . The placement of this call is important. It must be done after the call to  onLoadNativeLibraries(); . Example:   onLoadNativeLibraries();\nSDKBox.init(this);    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Extra steps"
        }, 
        {
            "location": "/plugins/iap/v3-lua/#configuration", 
            "text": "SDKBOX Installer will automatically inject a sample configuration to your  sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the IAP configuration, you need to replace  put the product id for ios here  with the product id from your  iTunes Connect  or  replace  put your googleplay key here  from your  Google Play Console  ios  :\n{\n     iap :{\n         items :{\n             remove_ads :{\n                 id : put the product id for ios here \n            }\n        }\n    }\n}, android :\n{\n     iap :{\n         key : put your googleplay key here ,\n         items :{\n           remove_ads :{\n               id : put the product id for android here \n          }\n        }\n    }\n}", 
            "title": "Configuration"
        }, 
        {
            "location": "/plugins/iap/v3-lua/#usage", 
            "text": "Modify Lua Code  Modify  ./frameworks/runtime-src/Classes/lua_module_register.h  to include the necessary headers and calls to register  IAP  with Lua. Note this takes a parameter of  lua_State* :  #include  PluginIAPLua.hpp \n#include  PluginIAPLuaHelper.hpp   static int lua_module_register(lua_State* L)\n{\n  register_all_PluginIAPLua(L);\n  register_PluginIAPLua_helper(L);\n}  Initialize IAP   modify your Lua code to  init()  the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.   sdkbox.IAP:init();  Retrieve latest Product data  It's always a good idea to retrieve the latest product data from store when your game starts.  To retrieve latest IAP data, simply call  sdkbox.IAP:refresh() .   onProductRequestSuccess  if retrieved successfully.  onProductRequestFailure  if exception occurs.   Make a purchase  To make a purchase call  sdkbox.IAP:purchase(name)  Note:   name  is the name of the IAP item in your config file under  items  tag, not the product id you set in iTunes or GooglePlay Store   onSuccess  will be triggered if purchase is successful.  onFailure  will be triggered if purchase fails.  onCanceled  will be triggered if purchase is canceled by user.   Restore purchase  To restore purchase call  sdkbox.IAP:restore() .   onRestored  will be triggered if restore is successful.   Note:   onRestored  could be triggered multiple times  Handling Purchase Events  This allows you to catch the  IAP  events so that you can perform operations based upon the response from your players and IAP servers.  sdkbox.IAP:setListener(function(args)\n        if  onSuccess  == args.event then\n                local product = args.product\n                dump(product,  onSuccess: )\n        elseif  onFailure  == args.event then\n                local product = args.product\n                local msg = args.msg\n                dump(product,  onFailure: )\n                print( msg: , msg)\n        elseif  onCanceled  == args.event then\n                local product = args.product\n                dump(product,  onCanceled: )\n        elseif  onRestored  == args.event then\n                local product = args.product\n                dump(product,  onRestored: )\n        elseif  onProductRequestSuccess  == args.event then\n                local products = args.products\n                dump(products,  onProductRequestSuccess: )\n        elseif  onProductRequestFailure  == args.event then\n                local msg = args.msg\n                print( msg: , msg)\n        else\n                print( unknow event  , args.event)\n        end\nend)", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/iap/v3-lua/#api-reference", 
            "text": "Methods  sdkbox.IAP:init();   Initialize SDKBox IAP   sdkbox.IAP:setDebug(debug);   Enable/disable debug logging   sdkbox.IAP:purchase(name);   Make a purchase request   sdkbox.IAP:refresh();   Refresh the IAP data(title, price, description)   sdkbox.IAP:restore();   Restore purchase   sdkbox.IAP:setListener(listener);   Set listener for IAP   sdkbox.IAP:removeListener();   Remove listener for IAP   Listeners  sdkbox.IAP:onSuccess(product);   Called when an IAP processed successfully   sdkbox.IAP:onFailure(product, message);   Called when an IAP fails   sdkbox.IAP:onCanceled(product);   Called when user canceled the IAP   sdkbox.IAP:onRestored(product);   Called when server returns the IAP items user already purchased   sdkbox.IAP:onProductRequestSuccess(products);   Called the product request is successful, usually developers use product request to update the latest info(title, price) from IAP   sdkbox.IAP:onProductRequestFailure(message);   Called when the product request fails", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/iap/v2-cpp/", 
            "text": "In-App Purchase\n\n\nIntegration\n\n\nUse the following command to install the SDKBOX IAP plugin, Make sure you setup SDKBOX installer correctly.\n\n\nsdkbox import iap\n\n\n\n\nExtra steps\n\n\nModify \nYourGameName\n.java\n\n\n\n\nModify \nproj.android/src/\npackage identifier\n/\nYourGameName\n.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify the class to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. Example of what this might look like for you:\n\n\n\n\nprotected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nConfiguration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nsdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the IAP configuration, you need to replace \nput the product id for ios here\n with the product id from your \niTunes Connect\n or  replace \nput your googleplay key here\n from your \nGoogle Play Console\n\n\nios\n :\n{\n    \niap\n:{\n        \nitems\n:{\n            \nremove_ads\n:{\n                \nid\n:\nput the product id for ios here\n\n            }\n        }\n    }\n},\n\nandroid\n:\n{\n    \niap\n:{\n        \nkey\n:\nput your googleplay key here\n,\n        \nitems\n:{\n          \nremove_ads\n:{\n              \nid\n:\nput the product id for android here\n\n          }\n        }\n    }\n}\n\n\n\n\nUsage\n\n\nInitialize IAP\n\n\nInitialize the plugin where appropriate in your code. We recommend to do this in the \nAppDelegate::applicationDidFinishLaunching()\n or \nAppController:didFinishLaunchingWithOptions()\n. Make sure to include the appropriate headers:\n\n\n#include \nPluginIAP/PluginIAP.h\n\nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginIAP::init();\n}\n\n\n\n\nRetrieve latest Product data\n\n\nIt's always a good idea to retrieve the latest product data from store when your game starts.\n\n\nTo retrieve latest IAP data, simply call \nsdkbox::IAP::refresh()\n.\n\n\n\n\nonProductRequestSuccess\n will be trigged if retrieved successfully.\n\n\nonProductRequestFailure\n will be trigged if exception occurs.\n\n\n\n\nMake a purchase\n\n\nTo make a purchase call \nsdkbox::IAP::purchase(name)\n\n\nNote:\n \nname\n is the name of the IAP item in your config file under \nitems\n tag, not the product id you set in iTunes or GooglePlay Store\n\n\n\n\nonSuccess\n will be triggered if purchase is successful.\n\n\nonFailure\n will be triggered if purchase fails.\n\n\nonCanceled\n will be triggered if purchase is canceled by user.\n\n\n\n\nRestore purchase\n\n\nTo restore purchase call \nsdkbox::IAP::restore()\n.\n\n\n\n\nonRestored\n will be triggered if restore is successful.\n\n\n\n\nNote:\n \nonRestored\n could be triggered multiple times\n\n\nHandling Purchase Events\n\n\nThis allows you to catch the \nIAP\n events so that you can perform operations based upon the response from your players and IAP servers.\n\n\n\n\nAllow your class to extend \nsdkbox::IAPListener\n:\n\n\n\n\n    #include \nPluginIAP/PluginIAP.h\n\n    class MyClass : public sdkbox::IAPListener\n    {\n    private:\n        virtual void onSuccess(sdkbox::Product const\n p) override;\n        virtual void onFailure(sdkbox::Product const\n p, const std::string \nmsg)\n           override;\n        virtual void onCanceled(sdkbox::Product const\n p) override;\n        virtual void onRestored(sdkbox::Product const\n p) override;\n        virtual void onProductRequestSuccess(std::vector\nsdkbox::Product\n const \nproducts)\n        override;\n        virtual void onProductRequestFailure(const std::string \nmsg) override;\n    }\n\n\n\n\n\n\nCreate a \nlistener\n that handles callbacks:\n\n\n\n\nsdkbox::IAP::setListener(listener);\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nstatic void init();\n\n\n\n\n\n\nInitialize SDKBox IAP\n\n\n\n\nstatic void setDebug(bool debug);\n\n\n\n\n\n\nEnable/disable debug logging\n\n\n\n\nstatic void purchase(const std::string\n name);\n\n\n\n\n\n\nMake a purchase request\n\n\n\n\nstatic void refresh();\n\n\n\n\n\n\nRefresh the IAP data(title, price, description)\n\n\n\n\nstatic void restore();\n\n\n\n\n\n\nRestore purchase\n\n\n\n\nstatic void setListener(IAPListener* listener);\n\n\n\n\n\n\nSet listener for IAP\n\n\n\n\nstatic void removeListener();\n\n\n\n\n\n\nRemove listener for IAP\n\n\n\n\nListeners\n\n\nvirtual void onSuccess(const Product\n p) = 0;\n\n\n\n\n\n\nCalled when an IAP processed successfully\n\n\n\n\nvirtual void onFailure(const Product\n p, const std::string\n msg) = 0;\n\n\n\n\n\n\nCalled when an IAP fails\n\n\n\n\nvirtual void onCanceled(const Product\n p) = 0;\n\n\n\n\n\n\nCalled when user canceled the IAP\n\n\n\n\nvirtual void onRestored(const Product\n p) = 0;\n\n\n\n\n\n\nCalled when server returns the IAP items user already purchased\n\n\n\n\nvirtual void onProductRequestSuccess(const std::vector\nProduct\n products) = 0;\n\n\n\n\n\n\nCalled the product request is successful, usually developers use product request to update the latest info(title, price) from IAP\n\n\n\n\nvirtual void onProductRequestFailure(const std::string\n msg) = 0;\n\n\n\n\n\n\nCalled when the product request fails", 
            "title": "c++"
        }, 
        {
            "location": "/plugins/iap/v2-cpp/#in-app-purchase", 
            "text": "", 
            "title": "In-App Purchase"
        }, 
        {
            "location": "/plugins/iap/v2-cpp/#integration", 
            "text": "Use the following command to install the SDKBOX IAP plugin, Make sure you setup SDKBOX installer correctly.  sdkbox import iap", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/iap/v2-cpp/#extra-steps", 
            "text": "Modify  YourGameName .java   Modify  proj.android/src/ package identifier / YourGameName .java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify the class to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . Example of what this might look like for you:   protected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Extra steps"
        }, 
        {
            "location": "/plugins/iap/v2-cpp/#configuration", 
            "text": "SDKBOX Installer will automatically inject a sample configuration to your  sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the IAP configuration, you need to replace  put the product id for ios here  with the product id from your  iTunes Connect  or  replace  put your googleplay key here  from your  Google Play Console  ios  :\n{\n     iap :{\n         items :{\n             remove_ads :{\n                 id : put the product id for ios here \n            }\n        }\n    }\n}, android :\n{\n     iap :{\n         key : put your googleplay key here ,\n         items :{\n           remove_ads :{\n               id : put the product id for android here \n          }\n        }\n    }\n}", 
            "title": "Configuration"
        }, 
        {
            "location": "/plugins/iap/v2-cpp/#usage", 
            "text": "Initialize IAP  Initialize the plugin where appropriate in your code. We recommend to do this in the  AppDelegate::applicationDidFinishLaunching()  or  AppController:didFinishLaunchingWithOptions() . Make sure to include the appropriate headers:  #include  PluginIAP/PluginIAP.h \nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginIAP::init();\n}  Retrieve latest Product data  It's always a good idea to retrieve the latest product data from store when your game starts.  To retrieve latest IAP data, simply call  sdkbox::IAP::refresh() .   onProductRequestSuccess  will be trigged if retrieved successfully.  onProductRequestFailure  will be trigged if exception occurs.   Make a purchase  To make a purchase call  sdkbox::IAP::purchase(name)  Note:   name  is the name of the IAP item in your config file under  items  tag, not the product id you set in iTunes or GooglePlay Store   onSuccess  will be triggered if purchase is successful.  onFailure  will be triggered if purchase fails.  onCanceled  will be triggered if purchase is canceled by user.   Restore purchase  To restore purchase call  sdkbox::IAP::restore() .   onRestored  will be triggered if restore is successful.   Note:   onRestored  could be triggered multiple times  Handling Purchase Events  This allows you to catch the  IAP  events so that you can perform operations based upon the response from your players and IAP servers.   Allow your class to extend  sdkbox::IAPListener :       #include  PluginIAP/PluginIAP.h \n    class MyClass : public sdkbox::IAPListener\n    {\n    private:\n        virtual void onSuccess(sdkbox::Product const  p) override;\n        virtual void onFailure(sdkbox::Product const  p, const std::string  msg)\n           override;\n        virtual void onCanceled(sdkbox::Product const  p) override;\n        virtual void onRestored(sdkbox::Product const  p) override;\n        virtual void onProductRequestSuccess(std::vector sdkbox::Product  const  products)\n        override;\n        virtual void onProductRequestFailure(const std::string  msg) override;\n    }   Create a  listener  that handles callbacks:   sdkbox::IAP::setListener(listener);", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/iap/v2-cpp/#api-reference", 
            "text": "Methods  static void init();   Initialize SDKBox IAP   static void setDebug(bool debug);   Enable/disable debug logging   static void purchase(const std::string  name);   Make a purchase request   static void refresh();   Refresh the IAP data(title, price, description)   static void restore();   Restore purchase   static void setListener(IAPListener* listener);   Set listener for IAP   static void removeListener();   Remove listener for IAP   Listeners  virtual void onSuccess(const Product  p) = 0;   Called when an IAP processed successfully   virtual void onFailure(const Product  p, const std::string  msg) = 0;   Called when an IAP fails   virtual void onCanceled(const Product  p) = 0;   Called when user canceled the IAP   virtual void onRestored(const Product  p) = 0;   Called when server returns the IAP items user already purchased   virtual void onProductRequestSuccess(const std::vector Product  products) = 0;   Called the product request is successful, usually developers use product request to update the latest info(title, price) from IAP   virtual void onProductRequestFailure(const std::string  msg) = 0;   Called when the product request fails", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/iap/v2-js/", 
            "text": "In-App Purchase\n\n\nIntegration\n\n\nUse the following command to install the SDKBOX IAP plugin, Make sure you setup SDKBOX installer correctly.\n\n\nsdkbox import iap\n\n\n\n\nExtra steps\n\n\nModify \nYourGameName\n.java\n\n\n\n\nModify \nproj.android/src/\npackage identifier\n/\nYourGameName\n.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify the class to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. Example of what this might look like for you:\n\n\n\n\nprotected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nConfiguration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nsdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the IAP configuration, you need to replace \nput the product id for ios here\n with the product id from your \niTunes Connect\n or  replace \nput your googleplay key here\n from your \nGoogle Play Console\n\n\nios\n :\n{\n    \niap\n:{\n        \nitems\n:{\n            \nremove_ads\n:{\n                \nid\n:\nput the product id for ios here\n\n            }\n        }\n    }\n},\n\nandroid\n:\n{\n    \niap\n:{\n        \nkey\n:\nput your googleplay key here\n,\n        \nitems\n:{\n          \nremove_ads\n:{\n              \nid\n:\nput the product id for android here\n\n          }\n        }\n    }\n}\n\n\n\n\nUsage\n\n\nInitialize IAP\n\n\n\n\nInitialize the plugin by calling \ninit()\n where appropriate in your code. We\nrecommend to do this in the \napp.js\n. Example:\n\n\n\n\nsdkbox.IAP.init();\n\n\n\n\n\n\nModify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n to include the following headers:\n\n\n\n\n#include \nPluginIAPJS.hpp\n\n#include \nPluginIAPJSHelper.hpp\n\n\n\n\n\n\n\nModify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n make sure to call:\n\n\n\n\nsc-\naddRegisterCallback(register_all_PluginIAPJS);\nsc-\naddRegisterCallback(register_all_PluginIAPJS_helper);\n\n\n\n\nThis registers the Javascript callbacks.\n\n\nRetrieve latest Product data\n\n\nIt's always a good idea to retrieve the latest product data from store when your game starts.\n\n\nTo retrieve latest IAP data, simply call \nsdkbox.IAP.refresh()\n.\n\n\n\n\nonProductRequestSuccess\n if retrieved successfully.\n\n\nonProductRequestFailure\n if exception occurs.\n\n\n\n\nMake a purchase\n\n\nTo make a purchase call \nsdkbox.IAP.purchase(name)\n\n\nNote:\n \nname\n is the name of the IAP item in your config file under \nitems\n tag, not the product id you set in iTunes or GooglePlay Store\n\n\n\n\nonSuccess\n will be triggered if purchase is successful.\n\n\nonFailure\n will be triggered if purchase fails.\n\n\nonCanceled\n will be triggered if purchase is canceled by user.\n\n\n\n\nRestore purchase\n\n\nTo restore purchase call \nsdkbox.IAP.restore()\n.\n\n\n\n\nonRestored\n will be triggered if restore is successful.\n\n\n\n\nNote:\n \nonRestored\n could be triggered multiple times\n\n\nHandling Purchase Events\n\n\nThis allows you to catch the \nIAP\n events so that you can perform operations based upon the response from your players and IAP servers.\n\n\nsdkbox.IAP.setListener({\n    onSuccess : function (product) {\n        //Purchase success\n    },\n    onFailure : function (product, msg) {\n        //Purchase failed\n        //msg is the error message\n    },\n    onCanceled : function (product) {\n        //Purchase was canceled by user\n    },\n    onRestored : function (product) {\n        //Purchase restored\n    },\n    onProductRequestSuccess : function (products) {\n        //Returns you the data for all the iap products\n        //You can get each item using following method\n        for (var i = 0; i \n products.length; i++) {\n            // loop\n        }\n    },\n    onProductRequestFailure : function (msg) {\n        //When product refresh request fails.\n    }\n});\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.IAP.init();\n\n\n\n\n\n\nInitialize SDKBox IAP\n\n\n\n\nsdkbox.IAP.setDebug(debug);\n\n\n\n\n\n\nEnable/disable debug logging\n\n\n\n\nsdkbox.IAP.purchase(name);\n\n\n\n\n\n\nMake a purchase request\n\n\n\n\nsdkbox.IAP.refresh();\n\n\n\n\n\n\nRefresh the IAP data(title, price, description)\n\n\n\n\nsdkbox.IAP.restore();\n\n\n\n\n\n\nRestore purchase\n\n\n\n\nsdkbox.IAP.setListener(listener);\n\n\n\n\n\n\nSet listener for IAP\n\n\n\n\nsdkbox.IAP.removeListener();\n\n\n\n\n\n\nRemove listener for IAP\n\n\n\n\nListeners\n\n\nsdkbox.IAP.onSuccess(product);\n\n\n\n\n\n\nCalled when an IAP processed successfully\n\n\n\n\nsdkbox.IAP.onFailure(product, message);\n\n\n\n\n\n\nCalled when an IAP fails\n\n\n\n\nsdkbox.IAP.onCanceled(product);\n\n\n\n\n\n\nCalled when user canceled the IAP\n\n\n\n\nsdkbox.IAP.onRestored(product);\n\n\n\n\n\n\nCalled when server returns the IAP items user already purchased\n\n\n\n\nsdkbox.IAP.onProductRequestSuccess(products);\n\n\n\n\n\n\nCalled the product request is successful, usually developers use product request to update the latest info(title, price) from IAP\n\n\n\n\nsdkbox.IAP.onProductRequestFailure(message);\n\n\n\n\n\n\nCalled when the product request fails", 
            "title": "js"
        }, 
        {
            "location": "/plugins/iap/v2-js/#in-app-purchase", 
            "text": "", 
            "title": "In-App Purchase"
        }, 
        {
            "location": "/plugins/iap/v2-js/#integration", 
            "text": "Use the following command to install the SDKBOX IAP plugin, Make sure you setup SDKBOX installer correctly.  sdkbox import iap", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/iap/v2-js/#extra-steps", 
            "text": "Modify  YourGameName .java   Modify  proj.android/src/ package identifier / YourGameName .java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify the class to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . Example of what this might look like for you:   protected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Extra steps"
        }, 
        {
            "location": "/plugins/iap/v2-js/#configuration", 
            "text": "SDKBOX Installer will automatically inject a sample configuration to your  sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the IAP configuration, you need to replace  put the product id for ios here  with the product id from your  iTunes Connect  or  replace  put your googleplay key here  from your  Google Play Console  ios  :\n{\n     iap :{\n         items :{\n             remove_ads :{\n                 id : put the product id for ios here \n            }\n        }\n    }\n}, android :\n{\n     iap :{\n         key : put your googleplay key here ,\n         items :{\n           remove_ads :{\n               id : put the product id for android here \n          }\n        }\n    }\n}", 
            "title": "Configuration"
        }, 
        {
            "location": "/plugins/iap/v2-js/#usage", 
            "text": "Initialize IAP   Initialize the plugin by calling  init()  where appropriate in your code. We\nrecommend to do this in the  app.js . Example:   sdkbox.IAP.init();   Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  to include the following headers:   #include  PluginIAPJS.hpp \n#include  PluginIAPJSHelper.hpp    Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  make sure to call:   sc- addRegisterCallback(register_all_PluginIAPJS);\nsc- addRegisterCallback(register_all_PluginIAPJS_helper);  This registers the Javascript callbacks.  Retrieve latest Product data  It's always a good idea to retrieve the latest product data from store when your game starts.  To retrieve latest IAP data, simply call  sdkbox.IAP.refresh() .   onProductRequestSuccess  if retrieved successfully.  onProductRequestFailure  if exception occurs.   Make a purchase  To make a purchase call  sdkbox.IAP.purchase(name)  Note:   name  is the name of the IAP item in your config file under  items  tag, not the product id you set in iTunes or GooglePlay Store   onSuccess  will be triggered if purchase is successful.  onFailure  will be triggered if purchase fails.  onCanceled  will be triggered if purchase is canceled by user.   Restore purchase  To restore purchase call  sdkbox.IAP.restore() .   onRestored  will be triggered if restore is successful.   Note:   onRestored  could be triggered multiple times  Handling Purchase Events  This allows you to catch the  IAP  events so that you can perform operations based upon the response from your players and IAP servers.  sdkbox.IAP.setListener({\n    onSuccess : function (product) {\n        //Purchase success\n    },\n    onFailure : function (product, msg) {\n        //Purchase failed\n        //msg is the error message\n    },\n    onCanceled : function (product) {\n        //Purchase was canceled by user\n    },\n    onRestored : function (product) {\n        //Purchase restored\n    },\n    onProductRequestSuccess : function (products) {\n        //Returns you the data for all the iap products\n        //You can get each item using following method\n        for (var i = 0; i   products.length; i++) {\n            // loop\n        }\n    },\n    onProductRequestFailure : function (msg) {\n        //When product refresh request fails.\n    }\n});", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/iap/v2-js/#api-reference", 
            "text": "Methods  sdkbox.IAP.init();   Initialize SDKBox IAP   sdkbox.IAP.setDebug(debug);   Enable/disable debug logging   sdkbox.IAP.purchase(name);   Make a purchase request   sdkbox.IAP.refresh();   Refresh the IAP data(title, price, description)   sdkbox.IAP.restore();   Restore purchase   sdkbox.IAP.setListener(listener);   Set listener for IAP   sdkbox.IAP.removeListener();   Remove listener for IAP   Listeners  sdkbox.IAP.onSuccess(product);   Called when an IAP processed successfully   sdkbox.IAP.onFailure(product, message);   Called when an IAP fails   sdkbox.IAP.onCanceled(product);   Called when user canceled the IAP   sdkbox.IAP.onRestored(product);   Called when server returns the IAP items user already purchased   sdkbox.IAP.onProductRequestSuccess(products);   Called the product request is successful, usually developers use product request to update the latest info(title, price) from IAP   sdkbox.IAP.onProductRequestFailure(message);   Called when the product request fails", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/iap/v2-lua/", 
            "text": "In-App Purchase\n\n\nIntegration\n\n\nUse the following command to install the SDKBOX IAP plugin, Make sure you setup SDKBOX installer correctly.\n\n\nsdkbox import iap\n\n\n\n\nExtra steps\n\n\nModify \nYourGameName\n.java\n\n\n\n\nModify \nproj.android/src/\npackage identifier\n/\nYourGameName\n.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify the class to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. Example of what this might look like for you:\n\n\n\n\nprotected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nConfiguration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nsdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the IAP configuration, you need to replace \nput the product id for ios here\n with the product id from your \niTunes Connect\n or  replace \nput your googleplay key here\n from your \nGoogle Play Console\n\n\nios\n :\n{\n    \niap\n:{\n        \nitems\n:{\n            \nremove_ads\n:{\n                \nid\n:\nput the product id for ios here\n\n            }\n        }\n    }\n},\n\nandroid\n:\n{\n    \niap\n:{\n        \nkey\n:\nput your googleplay key here\n,\n        \nitems\n:{\n          \nremove_ads\n:{\n              \nid\n:\nput the product id for android here\n\n          }\n        }\n    }\n}\n\n\n\n\nUsage\n\n\nModify \nAppDelegate.cpp\n\n\n\n\nModify \nAppDelegate.cpp\n to include the following headers:\n\n\n\n\n#include \nPluginIAPLua.hpp\n\n#include \nPluginIAPLuaHelper.hpp\n\n\n\n\n\n\n\nSecond, We need to register the plugin with Lua. This is done by making a call to \nregister_all_PluginIAPLua(\nlua_State*\n);\n. It is important to note that this call must be made after \nlua_State *tolua_s = pStack-\ngetLuaState();\n and before \ntolua_extensions_ccb_open(tolua_s);\n. Here is an example of what this might look like for you:\n\n\n\n\nlua_State *tolua_s = pStack-\ngetLuaState();\nregister_all_PluginIAPLua(tolua_s);\nregister_all_PluginIAPLua_helper(tolua_s);\ntolua_extensions_ccb_open(tolua_s);\n\n\n\n\nInitialize IAP\n\n\n\n\nmodify your Lua code to \ninit()\n the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.\n\n\n\n\nsdkbox.IAP:init();\n\n\n\n\nRetrieve latest Product data\n\n\nIt's always a good idea to retrieve the latest product data from store when your game starts.\n\n\nTo retrieve latest IAP data, simply call \nsdkbox.IAP:refresh()\n.\n\n\n\n\nonProductRequestSuccess\n if retrieved successfully.\n\n\nonProductRequestFailure\n if exception occurs.\n\n\n\n\nMake a purchase\n\n\nTo make a purchase call \nsdkbox.IAP:purchase(name)\n\n\nNote:\n \nname\n is the name of the IAP item in your config file under \nitems\n tag, not the product id you set in iTunes or GooglePlay Store\n\n\n\n\nonSuccess\n will be triggered if purchase is successful.\n\n\nonFailure\n will be triggered if purchase fails.\n\n\nonCanceled\n will be triggered if purchase is canceled by user.\n\n\n\n\nRestore purchase\n\n\nTo restore purchase call \nsdkbox.IAP:restore()\n.\n\n\n\n\nonRestored\n will be triggered if restore is successful.\n\n\n\n\nNote:\n \nonRestored\n could be triggered multiple times\n\n\nHandling Purchase Events\n\n\nThis allows you to catch the \nIAP\n events so that you can perform operations based upon the response from your players and IAP servers.\n\n\nsdkbox.IAP:setListener(function(args)\n        if \nonSuccess\n == args.event then\n                local product = args.product\n                dump(product, \nonSuccess:\n)\n        elseif \nonFailure\n == args.event then\n                local product = args.product\n                local msg = args.msg\n                dump(product, \nonFailure:\n)\n                print(\nmsg:\n, msg)\n        elseif \nonCanceled\n == args.event then\n                local product = args.product\n                dump(product, \nonCanceled:\n)\n        elseif \nonRestored\n == args.event then\n                local product = args.product\n                dump(product, \nonRestored:\n)\n        elseif \nonProductRequestSuccess\n == args.event then\n                local products = args.products\n                dump(products, \nonProductRequestSuccess:\n)\n        elseif \nonProductRequestFailure\n == args.event then\n                local msg = args.msg\n                print(\nmsg:\n, msg)\n        else\n                print(\nunknow event \n, args.event)\n        end\nend)\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.IAP:init();\n\n\n\n\n\n\nInitialize SDKBox IAP\n\n\n\n\nsdkbox.IAP:setDebug(debug);\n\n\n\n\n\n\nEnable/disable debug logging\n\n\n\n\nsdkbox.IAP:purchase(name);\n\n\n\n\n\n\nMake a purchase request\n\n\n\n\nsdkbox.IAP:refresh();\n\n\n\n\n\n\nRefresh the IAP data(title, price, description)\n\n\n\n\nsdkbox.IAP:restore();\n\n\n\n\n\n\nRestore purchase\n\n\n\n\nsdkbox.IAP:setListener(listener);\n\n\n\n\n\n\nSet listener for IAP\n\n\n\n\nsdkbox.IAP:removeListener();\n\n\n\n\n\n\nRemove listener for IAP\n\n\n\n\nListeners\n\n\nsdkbox.IAP:onSuccess(product);\n\n\n\n\n\n\nCalled when an IAP processed successfully\n\n\n\n\nsdkbox.IAP:onFailure(product, message);\n\n\n\n\n\n\nCalled when an IAP fails\n\n\n\n\nsdkbox.IAP:onCanceled(product);\n\n\n\n\n\n\nCalled when user canceled the IAP\n\n\n\n\nsdkbox.IAP:onRestored(product);\n\n\n\n\n\n\nCalled when server returns the IAP items user already purchased\n\n\n\n\nsdkbox.IAP:onProductRequestSuccess(products);\n\n\n\n\n\n\nCalled the product request is successful, usually developers use product request to update the latest info(title, price) from IAP\n\n\n\n\nsdkbox.IAP:onProductRequestFailure(message);\n\n\n\n\n\n\nCalled when the product request fails", 
            "title": "lua"
        }, 
        {
            "location": "/plugins/iap/v2-lua/#in-app-purchase", 
            "text": "", 
            "title": "In-App Purchase"
        }, 
        {
            "location": "/plugins/iap/v2-lua/#integration", 
            "text": "Use the following command to install the SDKBOX IAP plugin, Make sure you setup SDKBOX installer correctly.  sdkbox import iap", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/iap/v2-lua/#extra-steps", 
            "text": "Modify  YourGameName .java   Modify  proj.android/src/ package identifier / YourGameName .java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify the class to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . Example of what this might look like for you:   protected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Extra steps"
        }, 
        {
            "location": "/plugins/iap/v2-lua/#configuration", 
            "text": "SDKBOX Installer will automatically inject a sample configuration to your  sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the IAP configuration, you need to replace  put the product id for ios here  with the product id from your  iTunes Connect  or  replace  put your googleplay key here  from your  Google Play Console  ios  :\n{\n     iap :{\n         items :{\n             remove_ads :{\n                 id : put the product id for ios here \n            }\n        }\n    }\n}, android :\n{\n     iap :{\n         key : put your googleplay key here ,\n         items :{\n           remove_ads :{\n               id : put the product id for android here \n          }\n        }\n    }\n}", 
            "title": "Configuration"
        }, 
        {
            "location": "/plugins/iap/v2-lua/#usage", 
            "text": "Modify  AppDelegate.cpp   Modify  AppDelegate.cpp  to include the following headers:   #include  PluginIAPLua.hpp \n#include  PluginIAPLuaHelper.hpp    Second, We need to register the plugin with Lua. This is done by making a call to  register_all_PluginIAPLua( lua_State* ); . It is important to note that this call must be made after  lua_State *tolua_s = pStack- getLuaState();  and before  tolua_extensions_ccb_open(tolua_s); . Here is an example of what this might look like for you:   lua_State *tolua_s = pStack- getLuaState();\nregister_all_PluginIAPLua(tolua_s);\nregister_all_PluginIAPLua_helper(tolua_s);\ntolua_extensions_ccb_open(tolua_s);  Initialize IAP   modify your Lua code to  init()  the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.   sdkbox.IAP:init();  Retrieve latest Product data  It's always a good idea to retrieve the latest product data from store when your game starts.  To retrieve latest IAP data, simply call  sdkbox.IAP:refresh() .   onProductRequestSuccess  if retrieved successfully.  onProductRequestFailure  if exception occurs.   Make a purchase  To make a purchase call  sdkbox.IAP:purchase(name)  Note:   name  is the name of the IAP item in your config file under  items  tag, not the product id you set in iTunes or GooglePlay Store   onSuccess  will be triggered if purchase is successful.  onFailure  will be triggered if purchase fails.  onCanceled  will be triggered if purchase is canceled by user.   Restore purchase  To restore purchase call  sdkbox.IAP:restore() .   onRestored  will be triggered if restore is successful.   Note:   onRestored  could be triggered multiple times  Handling Purchase Events  This allows you to catch the  IAP  events so that you can perform operations based upon the response from your players and IAP servers.  sdkbox.IAP:setListener(function(args)\n        if  onSuccess  == args.event then\n                local product = args.product\n                dump(product,  onSuccess: )\n        elseif  onFailure  == args.event then\n                local product = args.product\n                local msg = args.msg\n                dump(product,  onFailure: )\n                print( msg: , msg)\n        elseif  onCanceled  == args.event then\n                local product = args.product\n                dump(product,  onCanceled: )\n        elseif  onRestored  == args.event then\n                local product = args.product\n                dump(product,  onRestored: )\n        elseif  onProductRequestSuccess  == args.event then\n                local products = args.products\n                dump(products,  onProductRequestSuccess: )\n        elseif  onProductRequestFailure  == args.event then\n                local msg = args.msg\n                print( msg: , msg)\n        else\n                print( unknow event  , args.event)\n        end\nend)", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/iap/v2-lua/#api-reference", 
            "text": "Methods  sdkbox.IAP:init();   Initialize SDKBox IAP   sdkbox.IAP:setDebug(debug);   Enable/disable debug logging   sdkbox.IAP:purchase(name);   Make a purchase request   sdkbox.IAP:refresh();   Refresh the IAP data(title, price, description)   sdkbox.IAP:restore();   Restore purchase   sdkbox.IAP:setListener(listener);   Set listener for IAP   sdkbox.IAP:removeListener();   Remove listener for IAP   Listeners  sdkbox.IAP:onSuccess(product);   Called when an IAP processed successfully   sdkbox.IAP:onFailure(product, message);   Called when an IAP fails   sdkbox.IAP:onCanceled(product);   Called when user canceled the IAP   sdkbox.IAP:onRestored(product);   Called when server returns the IAP items user already purchased   sdkbox.IAP:onProductRequestSuccess(products);   Called the product request is successful, usually developers use product request to update the latest info(title, price) from IAP   sdkbox.IAP:onProductRequestFailure(message);   Called when the product request fails", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/kochava/v3-cpp/", 
            "text": "Tune\n\n\nIntegration\n\n\nUse the following command to install the SDKBOX Kochava plugin, Make sure you setup SDKBOX installer correctly.\n\n\nsdkbox import kochava\n\n\n\n\nExtra steps\n\n\nModify \nCocos2dxActivity.java\n\n\n\n\n\n\nIf you're using cocos2d-x from source, assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java\n\n\n\n\n\n\nIf you're using the prebuilt cocos2d-x libraries assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n./src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nNote:\n When using Cocos2d-x from source, different versions have \nCocos2dxActivity.java\n in a different location. One way to find the location is to look in \nproj.android/project.properties\n. Example:\n\n\nandroid.library.reference.1=../../cocos2d-x/cocos/platform/android/java\n\n\n\n\nIn this case, \nCocos2dxActivity.java\n should be located at:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nModify \nCocos2dxActivity.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify \nCocos2dxActivity\n to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. The placement of this call is important. It must be done after the call to \nonLoadNativeLibraries();\n. Example:\n\n\n\n\nonLoadNativeLibraries();\nSDKBox.init(this);\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nConfiguration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nsdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the Kochava configuration, you need to replace\n\nKOCHAVA_APP_ID\n with your specific \nKochava\n account information.\nHere is an example adding \nKochava\n:\n\n\nkochava\n :\n{\n    \nkochavaAppId\n : \nKOCHAVA_APP_ID\n,\n    \nenableLogging\n : 1,\n    \nretrieveAttribution\n : 1\n}\n\n\n\n\nUsage\n\n\nInitialize Kochava\n\n\nInitialize the plugin where appropriate in your code. We recommend to do this in the \nAppDelegate::applicationDidFinishLaunching()\n or \nAppController:didFinishLaunchingWithOptions()\n. Make sure to include the appropriate headers:\n\n\n#include \nPluginKochava/PluginKochava.h\n\nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginKochava::init();\n}\n\n\n\n\nTracking Events\n\n\nKochava provides tracking \ncustom\n, \nspatial\n or \nreferral\n events.\n\n\n\n\nTracking a \ncustom\n event:\n\n\n\n\nsdkbox::PluginKochava::trackEvent(\nEVENT\n, \nVALUE\n);\n\n\n\n\n\n\nTracking a \nspatial\n event, by providing a title and position in the world:\n\n\n\n\nsdkbox::PluginKochava::spatialEvent(\nTITLE\n, \nX\n, \nY\n, \nZ\n);\n\n\n\n\n\n\nTracking a \nreferral\n event (also known as a deep link):\n\n\n\n\nsdkbox::PluginKochava::sendDeepLink(\nURI\n, \nYOUR APP\n);\n\n\n\n\nNote:\n On Android, the 2nd parameter (\n) is not used. You just\nneed to pass the \n.\n\n\nCatch Kochava events (optional)\n\n\nThis allows you to poll and catch \nKochava\n events so that you get notified when\nreferral or attribution data is returned from the server or secondly get notified\nwhen a user has crossed a beacon boundary, i.e. the user is near a Starbucks or\nperhaps walks into a Starbucks. The implementation here is simple using a \nlambda\n function:\n\n\nauto callback = [](const std::map\nstd::string, std::string\n* attribution)\n{\n  if (attribution)\n  {\n      typedef std::map\nstd::string, std::string\n map_type;\n      const map_type\n m = * attribution;\n\n      for (map_type::const_iterator it = m.begin(); it != m.end(); ++it)\n      {\n          const map_type::value_type\n kv = * it;\n          printf(\n%s -\n %s\n, kv.first.c_str(), kv.second.c_str());\n      }\n  }\n};\n\nsdkbox::PluginKochava::setAttributionCallback(callback);\n\n\n\n\nNote\n: Asking for attribution data could take a while. You can  poll\n \ngetAttributionData()\n until you get something back that is not \nnull\n.\n\n\nAPI Reference\n\n\nMethods\n\n\nstatic void init();\n\n\n\n\n\n\ninitialize the Kochava service.\n\n\n\n\nstatic void shutdown();\n\n\n\n\n\n\nshutdown the Kochava service.\n\n\n\n\nstatic void enableLogging(bool enabled);\n\n\n\n\n\n\nlog? true or false.\n\n\n\n\nstatic void trackEvent(const char* event, const char* value);\n\n\n\n\n\n\ntrack a single event, specifying the event and value.\n\n\n\n\nstatic void identityLinkEvent(const std::map\nstd::string, std::string\n data);\n\n\n\n\n\n\nlink one or more udid's to a Kochava id.\n\n\n\n\nstatic void spatialEvent(const char* title, float x, float y, float z);\n\n\n\n\n\n\nevent specifying x, y, and z coordinate to Kochava server for visualizing your data.\n\n\n\n\nstatic void setLimitAdTracking(bool limitAdTracking);\n\n\n\n\n\n\nturn ad tracking off or on by using true or false.\n\n\n\n\nconst std::map\nstd::string, std::string\n retrieveAttribution() const;\n\n\n\n\n\n\nreturns the attribution data.\n\n\n\n\nvoid sendDeepLink(const char* url, const char* application);\n\n\n\n\n\n\nsend a referral to where your app was opened from.", 
            "title": "c++"
        }, 
        {
            "location": "/plugins/kochava/v3-cpp/#tune", 
            "text": "", 
            "title": "Tune"
        }, 
        {
            "location": "/plugins/kochava/v3-cpp/#integration", 
            "text": "Use the following command to install the SDKBOX Kochava plugin, Make sure you setup SDKBOX installer correctly.  sdkbox import kochava", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/kochava/v3-cpp/#extra-steps", 
            "text": "Modify  Cocos2dxActivity.java    If you're using cocos2d-x from source, assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java    If you're using the prebuilt cocos2d-x libraries assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ./src/org/cocos2dx/lib/Cocos2dxActivity.java    Note:  When using Cocos2d-x from source, different versions have  Cocos2dxActivity.java  in a different location. One way to find the location is to look in  proj.android/project.properties . Example:  android.library.reference.1=../../cocos2d-x/cocos/platform/android/java  In this case,  Cocos2dxActivity.java  should be located at:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java   Modify  Cocos2dxActivity.java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify  Cocos2dxActivity  to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . The placement of this call is important. It must be done after the call to  onLoadNativeLibraries(); . Example:   onLoadNativeLibraries();\nSDKBox.init(this);    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Extra steps"
        }, 
        {
            "location": "/plugins/kochava/v3-cpp/#configuration", 
            "text": "SDKBOX Installer will automatically inject a sample configuration to your  sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the Kochava configuration, you need to replace KOCHAVA_APP_ID  with your specific  Kochava  account information.\nHere is an example adding  Kochava :  kochava  :\n{\n     kochavaAppId  :  KOCHAVA_APP_ID ,\n     enableLogging  : 1,\n     retrieveAttribution  : 1\n}", 
            "title": "Configuration"
        }, 
        {
            "location": "/plugins/kochava/v3-cpp/#usage", 
            "text": "Initialize Kochava  Initialize the plugin where appropriate in your code. We recommend to do this in the  AppDelegate::applicationDidFinishLaunching()  or  AppController:didFinishLaunchingWithOptions() . Make sure to include the appropriate headers:  #include  PluginKochava/PluginKochava.h \nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginKochava::init();\n}  Tracking Events  Kochava provides tracking  custom ,  spatial  or  referral  events.   Tracking a  custom  event:   sdkbox::PluginKochava::trackEvent( EVENT ,  VALUE );   Tracking a  spatial  event, by providing a title and position in the world:   sdkbox::PluginKochava::spatialEvent( TITLE ,  X ,  Y ,  Z );   Tracking a  referral  event (also known as a deep link):   sdkbox::PluginKochava::sendDeepLink( URI ,  YOUR APP );  Note:  On Android, the 2nd parameter ( ) is not used. You just\nneed to pass the  .  Catch Kochava events (optional)  This allows you to poll and catch  Kochava  events so that you get notified when\nreferral or attribution data is returned from the server or secondly get notified\nwhen a user has crossed a beacon boundary, i.e. the user is near a Starbucks or\nperhaps walks into a Starbucks. The implementation here is simple using a  lambda  function:  auto callback = [](const std::map std::string, std::string * attribution)\n{\n  if (attribution)\n  {\n      typedef std::map std::string, std::string  map_type;\n      const map_type  m = * attribution;\n\n      for (map_type::const_iterator it = m.begin(); it != m.end(); ++it)\n      {\n          const map_type::value_type  kv = * it;\n          printf( %s -  %s , kv.first.c_str(), kv.second.c_str());\n      }\n  }\n};\n\nsdkbox::PluginKochava::setAttributionCallback(callback);  Note : Asking for attribution data could take a while. You can  poll\n  getAttributionData()  until you get something back that is not  null .", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/kochava/v3-cpp/#api-reference", 
            "text": "Methods  static void init();   initialize the Kochava service.   static void shutdown();   shutdown the Kochava service.   static void enableLogging(bool enabled);   log? true or false.   static void trackEvent(const char* event, const char* value);   track a single event, specifying the event and value.   static void identityLinkEvent(const std::map std::string, std::string  data);   link one or more udid's to a Kochava id.   static void spatialEvent(const char* title, float x, float y, float z);   event specifying x, y, and z coordinate to Kochava server for visualizing your data.   static void setLimitAdTracking(bool limitAdTracking);   turn ad tracking off or on by using true or false.   const std::map std::string, std::string  retrieveAttribution() const;   returns the attribution data.   void sendDeepLink(const char* url, const char* application);   send a referral to where your app was opened from.", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/kochava/v3-js/", 
            "text": "Tune\n\n\nIntegration\n\n\nUse the following command to install the SDKBOX Kochava plugin, Make sure you setup SDKBOX installer correctly.\n\n\nsdkbox import kochava\n\n\n\n\nExtra steps\n\n\nModify \nCocos2dxActivity.java\n\n\n\n\n\n\nIf you're using cocos2d-x from source, assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java\n\n\n\n\n\n\nIf you're using the prebuilt cocos2d-x libraries assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n./src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nNote:\n When using Cocos2d-x from source, different versions have \nCocos2dxActivity.java\n in a different location. One way to find the location is to look in \nproj.android/project.properties\n. Example:\n\n\nandroid.library.reference.1=../../cocos2d-x/cocos/platform/android/java\n\n\n\n\nIn this case, \nCocos2dxActivity.java\n should be located at:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nModify \nCocos2dxActivity.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify \nCocos2dxActivity\n to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. The placement of this call is important. It must be done after the call to \nonLoadNativeLibraries();\n. Example:\n\n\n\n\nonLoadNativeLibraries();\nSDKBox.init(this);\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nConfiguration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nsdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the Kochava configuration, you need to replace\n\nKOCHAVA_APP_ID\n with your specific \nKochava\n account information.\nHere is an example adding \nKochava\n:\n\n\nkochava\n :\n{\n    \nkochavaAppId\n : \nKOCHAVA_APP_ID\n,\n    \nenableLogging\n : 1,\n    \nretrieveAttribution\n : 1\n}\n\n\n\n\nUsage\n\n\nInitialize Kochava\n\n\n\n\nInitialize the plugin by calling \ninit()\n where appropriate in your code. We\nrecommend to do this in the \napp.js\n. Example:\n\n\n\n\nsdkbox.PluginKochava.init();\n\n\n\n\n\n\nmodify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n to include the following headers:\n\n\n\n\n#include \nPluginKochavaJS.hpp\n\n\n\n\n\n\n\nmodify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n make sure to call:\n\n\n\n\nsc-\naddRegisterCallback(register_all_PluginKochavaJS);\n\n\n\n\nThis registers the Javascript callbacks.\n\n\nTracking Events\n\n\nKochava provides tracking \ncustom\n, \nspatial\n or \nreferral\n events.\n\n\n\n\nTracking a \ncustom\n event:\n\n\n\n\nsdkbox.PluginKochava.trackEvent(\nEVENT\n, \nVALUE\n);\n\n\n\n\n\n\nTracking a \nspatial\n event, by providing a title and position in the world:\n\n\n\n\nsdkbox.PluginKochava.spatialEvent(\nTITLE\n, \nX\n, \nY\n, \nZ\n);\n\n\n\n\n\n\nTracking a \nreferral\n event (also known as a deep link):\n\n\n\n\nsdkbox.PluginKochava.sendDeepLink(\nURI\n, \nYOUR APP\n);\n\n\n\n\nNote:\n On Android, the 2nd parameter (\n) is not used. You just need to pass the \n.\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginKochava.init();\n\n\n\n\n\n\ninitialize the Kochava instance.\n\n\n\n\nsdkbox.PluginKochava.identityLinkEvent();\n\n\n\n\n\n\nlink one or more udid's to a Kochava id.\n\n\n\n\nsdkbox.PluginKochava.spatialEvent();\n\n\n\n\n\n\nevent specifying x, y, and z coordinate to Kochava server for visualizing your data.\n\n\n\n\nsdkbox.PluginKochava.setLimitAdTracking();\n\n\n\n\n\n\nturn ad tracking off or on by using true or false.\n\n\n\n\nsdkbox.PluginKochava.enableLogging(bool);\n\n\n\n\n\n\nlog? true or false.\n\n\n\n\nsdkbox.PluginKochava.trackEvent();\n\n\n\n\n\n\ntrack a single event, specifying the event and value.\n\n\n\n\nsdkbox.PluginKochava.shutdown();\n\n\n\n\n\n\nshutdown the Kochava service.", 
            "title": "js"
        }, 
        {
            "location": "/plugins/kochava/v3-js/#tune", 
            "text": "", 
            "title": "Tune"
        }, 
        {
            "location": "/plugins/kochava/v3-js/#integration", 
            "text": "Use the following command to install the SDKBOX Kochava plugin, Make sure you setup SDKBOX installer correctly.  sdkbox import kochava", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/kochava/v3-js/#extra-steps", 
            "text": "Modify  Cocos2dxActivity.java    If you're using cocos2d-x from source, assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java    If you're using the prebuilt cocos2d-x libraries assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ./src/org/cocos2dx/lib/Cocos2dxActivity.java    Note:  When using Cocos2d-x from source, different versions have  Cocos2dxActivity.java  in a different location. One way to find the location is to look in  proj.android/project.properties . Example:  android.library.reference.1=../../cocos2d-x/cocos/platform/android/java  In this case,  Cocos2dxActivity.java  should be located at:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java   Modify  Cocos2dxActivity.java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify  Cocos2dxActivity  to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . The placement of this call is important. It must be done after the call to  onLoadNativeLibraries(); . Example:   onLoadNativeLibraries();\nSDKBox.init(this);    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Extra steps"
        }, 
        {
            "location": "/plugins/kochava/v3-js/#configuration", 
            "text": "SDKBOX Installer will automatically inject a sample configuration to your  sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the Kochava configuration, you need to replace KOCHAVA_APP_ID  with your specific  Kochava  account information.\nHere is an example adding  Kochava :  kochava  :\n{\n     kochavaAppId  :  KOCHAVA_APP_ID ,\n     enableLogging  : 1,\n     retrieveAttribution  : 1\n}", 
            "title": "Configuration"
        }, 
        {
            "location": "/plugins/kochava/v3-js/#usage", 
            "text": "Initialize Kochava   Initialize the plugin by calling  init()  where appropriate in your code. We\nrecommend to do this in the  app.js . Example:   sdkbox.PluginKochava.init();   modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  to include the following headers:   #include  PluginKochavaJS.hpp    modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  make sure to call:   sc- addRegisterCallback(register_all_PluginKochavaJS);  This registers the Javascript callbacks.  Tracking Events  Kochava provides tracking  custom ,  spatial  or  referral  events.   Tracking a  custom  event:   sdkbox.PluginKochava.trackEvent( EVENT ,  VALUE );   Tracking a  spatial  event, by providing a title and position in the world:   sdkbox.PluginKochava.spatialEvent( TITLE ,  X ,  Y ,  Z );   Tracking a  referral  event (also known as a deep link):   sdkbox.PluginKochava.sendDeepLink( URI ,  YOUR APP );  Note:  On Android, the 2nd parameter ( ) is not used. You just need to pass the  .", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/kochava/v3-js/#api-reference", 
            "text": "Methods  sdkbox.PluginKochava.init();   initialize the Kochava instance.   sdkbox.PluginKochava.identityLinkEvent();   link one or more udid's to a Kochava id.   sdkbox.PluginKochava.spatialEvent();   event specifying x, y, and z coordinate to Kochava server for visualizing your data.   sdkbox.PluginKochava.setLimitAdTracking();   turn ad tracking off or on by using true or false.   sdkbox.PluginKochava.enableLogging(bool);   log? true or false.   sdkbox.PluginKochava.trackEvent();   track a single event, specifying the event and value.   sdkbox.PluginKochava.shutdown();   shutdown the Kochava service.", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/kochava/v3-lua/", 
            "text": "Tune\n\n\nIntegration\n\n\nUse the following command to install the SDKBOX Kochava plugin, Make sure you setup SDKBOX installer correctly.\n\n\nsdkbox import kochava\n\n\n\n\nExtra steps\n\n\nModify \nCocos2dxActivity.java\n\n\n\n\n\n\nIf you're using cocos2d-x from source, assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java\n\n\n\n\n\n\nIf you're using the prebuilt cocos2d-x libraries assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n./src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nNote:\n When using Cocos2d-x from source, different versions have \nCocos2dxActivity.java\n in a different location. One way to find the location is to look in \nproj.android/project.properties\n. Example:\n\n\nandroid.library.reference.1=../../cocos2d-x/cocos/platform/android/java\n\n\n\n\nIn this case, \nCocos2dxActivity.java\n should be located at:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nModify \nCocos2dxActivity.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify \nCocos2dxActivity\n to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. The placement of this call is important. It must be done after the call to \nonLoadNativeLibraries();\n. Example:\n\n\n\n\nonLoadNativeLibraries();\nSDKBox.init(this);\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nConfiguration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nsdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the Kochava configuration, you need to replace\n\nKOCHAVA_APP_ID\n with your specific \nKochava\n account information.\nHere is an example adding \nKochava\n:\n\n\nkochava\n :\n{\n    \nkochavaAppId\n : \nKOCHAVA_APP_ID\n,\n    \nenableLogging\n : 1,\n    \nretrieveAttribution\n : 1\n}\n\n\n\n\nUsage\n\n\nModify Lua Code\n\n\n\n\nModify \n./frameworks/runtime-src/Classes/lua_module_register.h\n to include the necessary headers and calls to register \nKochava\n with Lua. \nNote:\n this takes a parameter of \nlua_State*\n:\n\n\n\n\n#include \nPluginKochavaLua.hpp\n\n\n\n\n\nstatic int lua_module_register(lua_State* L)\n{\n  register_all_PluginKochavaLua(\nlua_State*\n);\n}\n\n\n\n\nInitialize Kochava\n\n\n\n\nmodify your Lua code to \ninit()\n the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.\n\n\n\n\nsdkbox.PluginKochava:init();\n\n\n\n\nTracking Events\n\n\nKochava provides tracking \ncustom\n, \nspatial\n or \nreferral\n events.\n\n\n\n\nTracking a \ncustom\n event:\n\n\n\n\nsdkbox.PluginKochava:trackEvent(\nEVENT\n, \nVALUE\n);\n\n\n\n\n\n\nTracking a \nspatial\n event, by providing a title and position in the world:\n\n\n\n\nsdkbox.PluginKochava:spatialEvent(\nTITLE\n, \nX\n, \nY\n, \nZ\n);\n\n\n\n\n\n\nTracking a \nreferral\n event (also known as a deep link):\n\n\n\n\nsdkbox.PluginKochava:sendDeepLink(\nURI\n, \nYOUR APP\n);\n\n\n\n\nNote:\n On Android, the 2nd parameter (\n) is not used. You just need to pass the \n.\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginKochava:init();\n\n\n\n\n\n\ninitialize the Kochava instance.\n\n\n\n\nsdkbox.PluginKochava:identityLinkEvent();\n\n\n\n\n\n\nlink one or more udid's to a Kochava id.\n\n\n\n\nsdkbox.PluginKochava:spatialEvent();\n\n\n\n\n\n\nevent specifying x, y, and z coordinate to Kochava server for visualizing your data.\n\n\n\n\nsdkbox.PluginKochava:setLimitAdTracking();\n\n\n\n\n\n\nturn ad tracking off or on by using true or false.\n\n\n\n\nsdkbox.PluginKochava:enableLogging(bool);\n\n\n\n\n\n\nlog? true or false.\n\n\n\n\nsdkbox.PluginKochava:trackEvent();\n\n\n\n\n\n\ntrack a single event, specifying the event and value.\n\n\n\n\nsdkbox.PluginKochava:shutdown();\n\n\n\n\n\n\nshutdown the Kochava service.", 
            "title": "lua"
        }, 
        {
            "location": "/plugins/kochava/v3-lua/#tune", 
            "text": "", 
            "title": "Tune"
        }, 
        {
            "location": "/plugins/kochava/v3-lua/#integration", 
            "text": "Use the following command to install the SDKBOX Kochava plugin, Make sure you setup SDKBOX installer correctly.  sdkbox import kochava", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/kochava/v3-lua/#extra-steps", 
            "text": "Modify  Cocos2dxActivity.java    If you're using cocos2d-x from source, assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java    If you're using the prebuilt cocos2d-x libraries assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ./src/org/cocos2dx/lib/Cocos2dxActivity.java    Note:  When using Cocos2d-x from source, different versions have  Cocos2dxActivity.java  in a different location. One way to find the location is to look in  proj.android/project.properties . Example:  android.library.reference.1=../../cocos2d-x/cocos/platform/android/java  In this case,  Cocos2dxActivity.java  should be located at:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java   Modify  Cocos2dxActivity.java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify  Cocos2dxActivity  to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . The placement of this call is important. It must be done after the call to  onLoadNativeLibraries(); . Example:   onLoadNativeLibraries();\nSDKBox.init(this);    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Extra steps"
        }, 
        {
            "location": "/plugins/kochava/v3-lua/#configuration", 
            "text": "SDKBOX Installer will automatically inject a sample configuration to your  sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the Kochava configuration, you need to replace KOCHAVA_APP_ID  with your specific  Kochava  account information.\nHere is an example adding  Kochava :  kochava  :\n{\n     kochavaAppId  :  KOCHAVA_APP_ID ,\n     enableLogging  : 1,\n     retrieveAttribution  : 1\n}", 
            "title": "Configuration"
        }, 
        {
            "location": "/plugins/kochava/v3-lua/#usage", 
            "text": "Modify Lua Code   Modify  ./frameworks/runtime-src/Classes/lua_module_register.h  to include the necessary headers and calls to register  Kochava  with Lua.  Note:  this takes a parameter of  lua_State* :   #include  PluginKochavaLua.hpp   static int lua_module_register(lua_State* L)\n{\n  register_all_PluginKochavaLua( lua_State* );\n}  Initialize Kochava   modify your Lua code to  init()  the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.   sdkbox.PluginKochava:init();  Tracking Events  Kochava provides tracking  custom ,  spatial  or  referral  events.   Tracking a  custom  event:   sdkbox.PluginKochava:trackEvent( EVENT ,  VALUE );   Tracking a  spatial  event, by providing a title and position in the world:   sdkbox.PluginKochava:spatialEvent( TITLE ,  X ,  Y ,  Z );   Tracking a  referral  event (also known as a deep link):   sdkbox.PluginKochava:sendDeepLink( URI ,  YOUR APP );  Note:  On Android, the 2nd parameter ( ) is not used. You just need to pass the  .", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/kochava/v3-lua/#api-reference", 
            "text": "Methods  sdkbox.PluginKochava:init();   initialize the Kochava instance.   sdkbox.PluginKochava:identityLinkEvent();   link one or more udid's to a Kochava id.   sdkbox.PluginKochava:spatialEvent();   event specifying x, y, and z coordinate to Kochava server for visualizing your data.   sdkbox.PluginKochava:setLimitAdTracking();   turn ad tracking off or on by using true or false.   sdkbox.PluginKochava:enableLogging(bool);   log? true or false.   sdkbox.PluginKochava:trackEvent();   track a single event, specifying the event and value.   sdkbox.PluginKochava:shutdown();   shutdown the Kochava service.", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/kochava/v2-cpp/", 
            "text": "Tune\n\n\nIntegration\n\n\nUse the following command to install the SDKBOX Kochava plugin, Make sure you setup SDKBOX installer correctly.\n\n\nsdkbox import kochava\n\n\n\n\nExtra steps\n\n\nModify \nYourGameName\n.java\n\n\n\n\nModify \nproj.android/src/\npackage identifier\n/\nYourGameName\n.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify the class to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. Example of what this might look like for you:\n\n\n\n\nprotected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nConfiguration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nsdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the Kochava configuration, you need to replace\n\nKOCHAVA_APP_ID\n with your specific \nKochava\n account information.\nHere is an example adding \nKochava\n:\n\n\nkochava\n :\n{\n    \nkochavaAppId\n : \nKOCHAVA_APP_ID\n,\n    \nenableLogging\n : 1,\n    \nretrieveAttribution\n : 1\n}\n\n\n\n\nUsage\n\n\nInitialize Kochava\n\n\nInitialize the plugin where appropriate in your code. We recommend to do this in the \nAppDelegate::applicationDidFinishLaunching()\n or \nAppController:didFinishLaunchingWithOptions()\n. Make sure to include the appropriate headers:\n\n\n#include \nPluginKochava/PluginKochava.h\n\nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginKochava::init();\n}\n\n\n\n\nTracking Events\n\n\nKochava provides tracking \ncustom\n, \nspatial\n or \nreferral\n events.\n\n\n\n\nTracking a \ncustom\n event:\n\n\n\n\nsdkbox::PluginKochava::trackEvent(\nEVENT\n, \nVALUE\n);\n\n\n\n\n\n\nTracking a \nspatial\n event, by providing a title and position in the world:\n\n\n\n\nsdkbox::PluginKochava::spatialEvent(\nTITLE\n, \nX\n, \nY\n, \nZ\n);\n\n\n\n\n\n\nTracking a \nreferral\n event (also known as a deep link):\n\n\n\n\nsdkbox::PluginKochava::sendDeepLink(\nURI\n, \nYOUR APP\n);\n\n\n\n\nNote:\n On Android, the 2nd parameter (\n) is not used. You just\nneed to pass the \n.\n\n\nCatch Kochava events (optional)\n\n\nThis allows you to poll and catch \nKochava\n events so that you get notified when\nreferral or attribution data is returned from the server or secondly get notified\nwhen a user has crossed a beacon boundary, i.e. the user is near a Starbucks or\nperhaps walks into a Starbucks. The implementation here is simple using a \nlambda\n function:\n\n\nauto callback = [](const std::map\nstd::string, std::string\n* attribution)\n{\n  if (attribution)\n  {\n      typedef std::map\nstd::string, std::string\n map_type;\n      const map_type\n m = * attribution;\n\n      for (map_type::const_iterator it = m.begin(); it != m.end(); ++it)\n      {\n          const map_type::value_type\n kv = * it;\n          printf(\n%s -\n %s\n, kv.first.c_str(), kv.second.c_str());\n      }\n  }\n};\n\nsdkbox::PluginKochava::setAttributionCallback(callback);\n\n\n\n\nNote\n: Asking for attribution data could take a while. You can  poll\n \ngetAttributionData()\n until you get something back that is not \nnull\n.\n\n\nAPI Reference\n\n\nMethods\n\n\nstatic void init();\n\n\n\n\n\n\ninitialize the Kochava service.\n\n\n\n\nstatic void shutdown();\n\n\n\n\n\n\nshutdown the Kochava service.\n\n\n\n\nstatic void enableLogging(bool enabled);\n\n\n\n\n\n\nlog? true or false.\n\n\n\n\nstatic void trackEvent(const char* event, const char* value);\n\n\n\n\n\n\ntrack a single event, specifying the event and value.\n\n\n\n\nstatic void identityLinkEvent(const std::map\nstd::string, std::string\n data);\n\n\n\n\n\n\nlink one or more udid's to a Kochava id.\n\n\n\n\nstatic void spatialEvent(const char* title, float x, float y, float z);\n\n\n\n\n\n\nevent specifying x, y, and z coordinate to Kochava server for visualizing your data.\n\n\n\n\nstatic void setLimitAdTracking(bool limitAdTracking);\n\n\n\n\n\n\nturn ad tracking off or on by using true or false.\n\n\n\n\nconst std::map\nstd::string, std::string\n retrieveAttribution() const;\n\n\n\n\n\n\nreturns the attribution data.\n\n\n\n\nvoid sendDeepLink(const char* url, const char* application);\n\n\n\n\n\n\nsend a referral to where your app was opened from.", 
            "title": "c++"
        }, 
        {
            "location": "/plugins/kochava/v2-cpp/#tune", 
            "text": "", 
            "title": "Tune"
        }, 
        {
            "location": "/plugins/kochava/v2-cpp/#integration", 
            "text": "Use the following command to install the SDKBOX Kochava plugin, Make sure you setup SDKBOX installer correctly.  sdkbox import kochava", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/kochava/v2-cpp/#extra-steps", 
            "text": "Modify  YourGameName .java   Modify  proj.android/src/ package identifier / YourGameName .java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify the class to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . Example of what this might look like for you:   protected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Extra steps"
        }, 
        {
            "location": "/plugins/kochava/v2-cpp/#configuration", 
            "text": "SDKBOX Installer will automatically inject a sample configuration to your  sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the Kochava configuration, you need to replace KOCHAVA_APP_ID  with your specific  Kochava  account information.\nHere is an example adding  Kochava :  kochava  :\n{\n     kochavaAppId  :  KOCHAVA_APP_ID ,\n     enableLogging  : 1,\n     retrieveAttribution  : 1\n}", 
            "title": "Configuration"
        }, 
        {
            "location": "/plugins/kochava/v2-cpp/#usage", 
            "text": "Initialize Kochava  Initialize the plugin where appropriate in your code. We recommend to do this in the  AppDelegate::applicationDidFinishLaunching()  or  AppController:didFinishLaunchingWithOptions() . Make sure to include the appropriate headers:  #include  PluginKochava/PluginKochava.h \nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginKochava::init();\n}  Tracking Events  Kochava provides tracking  custom ,  spatial  or  referral  events.   Tracking a  custom  event:   sdkbox::PluginKochava::trackEvent( EVENT ,  VALUE );   Tracking a  spatial  event, by providing a title and position in the world:   sdkbox::PluginKochava::spatialEvent( TITLE ,  X ,  Y ,  Z );   Tracking a  referral  event (also known as a deep link):   sdkbox::PluginKochava::sendDeepLink( URI ,  YOUR APP );  Note:  On Android, the 2nd parameter ( ) is not used. You just\nneed to pass the  .  Catch Kochava events (optional)  This allows you to poll and catch  Kochava  events so that you get notified when\nreferral or attribution data is returned from the server or secondly get notified\nwhen a user has crossed a beacon boundary, i.e. the user is near a Starbucks or\nperhaps walks into a Starbucks. The implementation here is simple using a  lambda  function:  auto callback = [](const std::map std::string, std::string * attribution)\n{\n  if (attribution)\n  {\n      typedef std::map std::string, std::string  map_type;\n      const map_type  m = * attribution;\n\n      for (map_type::const_iterator it = m.begin(); it != m.end(); ++it)\n      {\n          const map_type::value_type  kv = * it;\n          printf( %s -  %s , kv.first.c_str(), kv.second.c_str());\n      }\n  }\n};\n\nsdkbox::PluginKochava::setAttributionCallback(callback);  Note : Asking for attribution data could take a while. You can  poll\n  getAttributionData()  until you get something back that is not  null .", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/kochava/v2-cpp/#api-reference", 
            "text": "Methods  static void init();   initialize the Kochava service.   static void shutdown();   shutdown the Kochava service.   static void enableLogging(bool enabled);   log? true or false.   static void trackEvent(const char* event, const char* value);   track a single event, specifying the event and value.   static void identityLinkEvent(const std::map std::string, std::string  data);   link one or more udid's to a Kochava id.   static void spatialEvent(const char* title, float x, float y, float z);   event specifying x, y, and z coordinate to Kochava server for visualizing your data.   static void setLimitAdTracking(bool limitAdTracking);   turn ad tracking off or on by using true or false.   const std::map std::string, std::string  retrieveAttribution() const;   returns the attribution data.   void sendDeepLink(const char* url, const char* application);   send a referral to where your app was opened from.", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/kochava/v2-js/", 
            "text": "Tune\n\n\nIntegration\n\n\nUse the following command to install the SDKBOX Kochava plugin, Make sure you setup SDKBOX installer correctly.\n\n\nsdkbox import kochava\n\n\n\n\nExtra steps\n\n\nModify \nYourGameName\n.java\n\n\n\n\nModify \nproj.android/src/\npackage identifier\n/\nYourGameName\n.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify the class to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. Example of what this might look like for you:\n\n\n\n\nprotected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nConfiguration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nsdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the Kochava configuration, you need to replace\n\nKOCHAVA_APP_ID\n with your specific \nKochava\n account information.\nHere is an example adding \nKochava\n:\n\n\nkochava\n :\n{\n    \nkochavaAppId\n : \nKOCHAVA_APP_ID\n,\n    \nenableLogging\n : 1,\n    \nretrieveAttribution\n : 1\n}\n\n\n\n\nUsage\n\n\nInitialize Kochava\n\n\n\n\nInitialize the plugin by calling \ninit()\n where appropriate in your code. We\nrecommend to do this in the \napp.js\n. Example:\n\n\n\n\nsdkbox.PluginKochava.init();\n\n\n\n\n\n\nmodify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n to include the following headers:\n\n\n\n\n#include \nPluginKochavaJS.hpp\n\n\n\n\n\n\n\nmodify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n make sure to call:\n\n\n\n\nsc-\naddRegisterCallback(register_all_PluginKochavaJS);\n\n\n\n\nThis registers the Javascript callbacks.\n\n\nTracking Events\n\n\nKochava provides tracking \ncustom\n, \nspatial\n or \nreferral\n events.\n\n\n\n\nTracking a \ncustom\n event:\n\n\n\n\nsdkbox.PluginKochava.trackEvent(\nEVENT\n, \nVALUE\n);\n\n\n\n\n\n\nTracking a \nspatial\n event, by providing a title and position in the world:\n\n\n\n\nsdkbox.PluginKochava.spatialEvent(\nTITLE\n, \nX\n, \nY\n, \nZ\n);\n\n\n\n\n\n\nTracking a \nreferral\n event (also known as a deep link):\n\n\n\n\nsdkbox.PluginKochava.sendDeepLink(\nURI\n, \nYOUR APP\n);\n\n\n\n\nNote:\n On Android, the 2nd parameter (\n) is not used. You just need to pass the \n.\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginKochava.init();\n\n\n\n\n\n\ninitialize the Kochava instance.\n\n\n\n\nsdkbox.PluginKochava.identityLinkEvent();\n\n\n\n\n\n\nlink one or more udid's to a Kochava id.\n\n\n\n\nsdkbox.PluginKochava.spatialEvent();\n\n\n\n\n\n\nevent specifying x, y, and z coordinate to Kochava server for visualizing your data.\n\n\n\n\nsdkbox.PluginKochava.setLimitAdTracking();\n\n\n\n\n\n\nturn ad tracking off or on by using true or false.\n\n\n\n\nsdkbox.PluginKochava.enableLogging(bool);\n\n\n\n\n\n\nlog? true or false.\n\n\n\n\nsdkbox.PluginKochava.trackEvent();\n\n\n\n\n\n\ntrack a single event, specifying the event and value.\n\n\n\n\nsdkbox.PluginKochava.shutdown();\n\n\n\n\n\n\nshutdown the Kochava service.", 
            "title": "js"
        }, 
        {
            "location": "/plugins/kochava/v2-js/#tune", 
            "text": "", 
            "title": "Tune"
        }, 
        {
            "location": "/plugins/kochava/v2-js/#integration", 
            "text": "Use the following command to install the SDKBOX Kochava plugin, Make sure you setup SDKBOX installer correctly.  sdkbox import kochava", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/kochava/v2-js/#extra-steps", 
            "text": "Modify  YourGameName .java   Modify  proj.android/src/ package identifier / YourGameName .java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify the class to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . Example of what this might look like for you:   protected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Extra steps"
        }, 
        {
            "location": "/plugins/kochava/v2-js/#configuration", 
            "text": "SDKBOX Installer will automatically inject a sample configuration to your  sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the Kochava configuration, you need to replace KOCHAVA_APP_ID  with your specific  Kochava  account information.\nHere is an example adding  Kochava :  kochava  :\n{\n     kochavaAppId  :  KOCHAVA_APP_ID ,\n     enableLogging  : 1,\n     retrieveAttribution  : 1\n}", 
            "title": "Configuration"
        }, 
        {
            "location": "/plugins/kochava/v2-js/#usage", 
            "text": "Initialize Kochava   Initialize the plugin by calling  init()  where appropriate in your code. We\nrecommend to do this in the  app.js . Example:   sdkbox.PluginKochava.init();   modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  to include the following headers:   #include  PluginKochavaJS.hpp    modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  make sure to call:   sc- addRegisterCallback(register_all_PluginKochavaJS);  This registers the Javascript callbacks.  Tracking Events  Kochava provides tracking  custom ,  spatial  or  referral  events.   Tracking a  custom  event:   sdkbox.PluginKochava.trackEvent( EVENT ,  VALUE );   Tracking a  spatial  event, by providing a title and position in the world:   sdkbox.PluginKochava.spatialEvent( TITLE ,  X ,  Y ,  Z );   Tracking a  referral  event (also known as a deep link):   sdkbox.PluginKochava.sendDeepLink( URI ,  YOUR APP );  Note:  On Android, the 2nd parameter ( ) is not used. You just need to pass the  .", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/kochava/v2-js/#api-reference", 
            "text": "Methods  sdkbox.PluginKochava.init();   initialize the Kochava instance.   sdkbox.PluginKochava.identityLinkEvent();   link one or more udid's to a Kochava id.   sdkbox.PluginKochava.spatialEvent();   event specifying x, y, and z coordinate to Kochava server for visualizing your data.   sdkbox.PluginKochava.setLimitAdTracking();   turn ad tracking off or on by using true or false.   sdkbox.PluginKochava.enableLogging(bool);   log? true or false.   sdkbox.PluginKochava.trackEvent();   track a single event, specifying the event and value.   sdkbox.PluginKochava.shutdown();   shutdown the Kochava service.", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/kochava/v2-lua/", 
            "text": "Tune\n\n\nIntegration\n\n\nUse the following command to install the SDKBOX Kochava plugin, Make sure you setup SDKBOX installer correctly.\n\n\nsdkbox import kochava\n\n\n\n\nExtra steps\n\n\nModify \nYourGameName\n.java\n\n\n\n\nModify \nproj.android/src/\npackage identifier\n/\nYourGameName\n.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify the class to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. Example of what this might look like for you:\n\n\n\n\nprotected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nConfiguration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nsdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the Kochava configuration, you need to replace\n\nKOCHAVA_APP_ID\n with your specific \nKochava\n account information.\nHere is an example adding \nKochava\n:\n\n\nkochava\n :\n{\n    \nkochavaAppId\n : \nKOCHAVA_APP_ID\n,\n    \nenableLogging\n : 1,\n    \nretrieveAttribution\n : 1\n}\n\n\n\n\nUsage\n\n\nModify \nAppDelegate.cpp\n\n\n\n\nModify \nAppDelegate.cpp\n to include the following headers:\n\n\n\n\n#include \nPluginKochavaLua.hpp\n\n#include \nPluginKochavaLuaHelper.h\n\n\n\n\n\n\n\nSecond, We need to register the plugin with Lua. This is done by making a call to \nregister_all_PluginKochavaLua(\nlua_State*\n);\n. It is important to note that this call must be made after \nlua_State *tolua_s = pStack-\ngetLuaState();\n and before \ntolua_extensions_ccb_open(tolua_s);\n. Here is an example of what this might look like for you:\n\n\n\n\nlua_State *tolua_s = pStack-\ngetLuaState();\nregister_all_PluginKochavaLua(tolua_s);\ntolua_extensions_ccb_open(tolua_s);\n\n\n\n\nInitialize Kochava\n\n\nModify your Lua code to \ninit()\n the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.\n\n\nsdkbox.PluginKochava:init();\n\n\n\n\nTracking Events\n\n\nKochava provides tracking \ncustom\n, \nspatial\n or \nreferral\n events.\n\n\n\n\nTracking a \ncustom\n event:\n\n\n\n\nsdkbox.PluginKochava:trackEvent(\nEVENT\n, \nVALUE\n);\n\n\n\n\n\n\nTracking a \nspatial\n event, by providing a title and position in the world:\n\n\n\n\nsdkbox.PluginKochava:spatialEvent(\nTITLE\n, \nX\n, \nY\n, \nZ\n);\n\n\n\n\n\n\nTracking a \nreferral\n event (also known as a deep link):\n\n\n\n\nsdkbox.PluginKochava:sendDeepLink(\nURI\n, \nYOUR APP\n);\n\n\n\n\nNote:\n On Android, the 2nd parameter (\n) is not used. You just need to pass the \n.\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginKochava:init();\n\n\n\n\n\n\ninitialize the Kochava instance.\n\n\n\n\nsdkbox.PluginKochava:identityLinkEvent();\n\n\n\n\n\n\nlink one or more udid's to a Kochava id.\n\n\n\n\nsdkbox.PluginKochava:spatialEvent();\n\n\n\n\n\n\nevent specifying x, y, and z coordinate to Kochava server for visualizing your data.\n\n\n\n\nsdkbox.PluginKochava:setLimitAdTracking();\n\n\n\n\n\n\nturn ad tracking off or on by using true or false.\n\n\n\n\nsdkbox.PluginKochava:enableLogging(bool);\n\n\n\n\n\n\nlog? true or false.\n\n\n\n\nsdkbox.PluginKochava:trackEvent();\n\n\n\n\n\n\ntrack a single event, specifying the event and value.\n\n\n\n\nsdkbox.PluginKochava:shutdown();\n\n\n\n\n\n\nshutdown the Kochava service.", 
            "title": "lua"
        }, 
        {
            "location": "/plugins/kochava/v2-lua/#tune", 
            "text": "", 
            "title": "Tune"
        }, 
        {
            "location": "/plugins/kochava/v2-lua/#integration", 
            "text": "Use the following command to install the SDKBOX Kochava plugin, Make sure you setup SDKBOX installer correctly.  sdkbox import kochava", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/kochava/v2-lua/#extra-steps", 
            "text": "Modify  YourGameName .java   Modify  proj.android/src/ package identifier / YourGameName .java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify the class to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . Example of what this might look like for you:   protected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Extra steps"
        }, 
        {
            "location": "/plugins/kochava/v2-lua/#configuration", 
            "text": "SDKBOX Installer will automatically inject a sample configuration to your  sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the Kochava configuration, you need to replace KOCHAVA_APP_ID  with your specific  Kochava  account information.\nHere is an example adding  Kochava :  kochava  :\n{\n     kochavaAppId  :  KOCHAVA_APP_ID ,\n     enableLogging  : 1,\n     retrieveAttribution  : 1\n}", 
            "title": "Configuration"
        }, 
        {
            "location": "/plugins/kochava/v2-lua/#usage", 
            "text": "Modify  AppDelegate.cpp   Modify  AppDelegate.cpp  to include the following headers:   #include  PluginKochavaLua.hpp \n#include  PluginKochavaLuaHelper.h    Second, We need to register the plugin with Lua. This is done by making a call to  register_all_PluginKochavaLua( lua_State* ); . It is important to note that this call must be made after  lua_State *tolua_s = pStack- getLuaState();  and before  tolua_extensions_ccb_open(tolua_s); . Here is an example of what this might look like for you:   lua_State *tolua_s = pStack- getLuaState();\nregister_all_PluginKochavaLua(tolua_s);\ntolua_extensions_ccb_open(tolua_s);  Initialize Kochava  Modify your Lua code to  init()  the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.  sdkbox.PluginKochava:init();  Tracking Events  Kochava provides tracking  custom ,  spatial  or  referral  events.   Tracking a  custom  event:   sdkbox.PluginKochava:trackEvent( EVENT ,  VALUE );   Tracking a  spatial  event, by providing a title and position in the world:   sdkbox.PluginKochava:spatialEvent( TITLE ,  X ,  Y ,  Z );   Tracking a  referral  event (also known as a deep link):   sdkbox.PluginKochava:sendDeepLink( URI ,  YOUR APP );  Note:  On Android, the 2nd parameter ( ) is not used. You just need to pass the  .", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/kochava/v2-lua/#api-reference", 
            "text": "Methods  sdkbox.PluginKochava:init();   initialize the Kochava instance.   sdkbox.PluginKochava:identityLinkEvent();   link one or more udid's to a Kochava id.   sdkbox.PluginKochava:spatialEvent();   event specifying x, y, and z coordinate to Kochava server for visualizing your data.   sdkbox.PluginKochava:setLimitAdTracking();   turn ad tracking off or on by using true or false.   sdkbox.PluginKochava:enableLogging(bool);   log? true or false.   sdkbox.PluginKochava:trackEvent();   track a single event, specifying the event and value.   sdkbox.PluginKochava:shutdown();   shutdown the Kochava service.", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/tune/v3-cpp/", 
            "text": "Tune\n\n\nIntegration\n\n\nUse the following command to install the SDKBOX Tune plugin, Make sure you setup SDKBOX installer correctly.\n\n\nsdkbox import tune\n\n\n\n\nExtra steps\n\n\nModify \nCocos2dxActivity.java\n\n\n\n\n\n\nIf you're using cocos2d-x from source, assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java\n\n\n\n\n\n\nIf you're using the prebuilt cocos2d-x libraries assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n./src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nNote:\n When using Cocos2d-x from source, different versions have \nCocos2dxActivity.java\n in a different location. One way to find the location is to look in \nproj.android/project.properties\n. Example:\n\n\nandroid.library.reference.1=../../cocos2d-x/cocos/platform/android/java\n\n\n\n\nIn this case, \nCocos2dxActivity.java\n should be located at:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nModify \nCocos2dxActivity.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify \nCocos2dxActivity\n to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. The placement of this call is important. It must be done after the call to \nonLoadNativeLibraries();\n. Example:\n\n\n\n\nonLoadNativeLibraries();\nSDKBox.init(this);\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (release, optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n-keep public class com.mobileapptracker.** {\n    public *;\n}\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.\n\n\nConfiguration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nsdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the Tune configuration, you need to replace\n\nTUNE ID\n and \nTUNE KEY\n  with your specific \nTune ID\n account information.\nHere is an example adding \nTune\n:\n\n\nTune\n:{\n    \nid\n:\nTUNE ID\n,\n    \nkey\n:\nTUNE KEY\n,\n    \ndebug\n:false\n}\n\n\n\n\nUsage\n\n\nInitialize Tune\n\n\nInitialize the plugin where appropriate in your code. We recommend to do this in the \nAppDelegate::applicationDidFinishLaunching()\n or \nAppController:didFinishLaunchingWithOptions()\n. Make sure to include the appropriate headers. \ninit()\n and \nmeasureSession()\n are required. Example:\n\n\n#include \nPluginTune/PluginTune.h\n\nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginTune::init();\n     sdkbox::PluginTune::measureSession();\n}\n\n\n\n\nUsing Tune\n\n\nAfter initialization you can begin to use the Tune functionality. Tune uses a concept of \nevents\n (also known as \nMAT Native Event Types\n). You log \nevents\n that you care about and you can later view them using the web-based report viewer. Tune provides a structure for these events in their documentation. Example:\n\n\n{\n    PluginTune::measureEventName(\npurchase\n);\n    PluginTune::measureEventId(1122334455);\n        TuneEvent event;\n    event.eventName = \npurchase2\n;\n    event.refId     = \nRJ1357\n;\n    event.searchString = \nsweet crisp red apples\n;\n    event.attribute1 = \ncrisp\n;\n    event.attribute2 = \nred\n;\n    event.quantity = 3;\n    PluginTune::measureEvent(event);\n}\n\n\n\n\nNotice that at the end of the \nevent\n \nPluginTune::measureEvent(event)\n was called. This takes care of logging our event.\n\n\nAPI Reference\n\n\nMethods\n\n\nstatic void init();\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nstatic void setDebugMode(bool enable);\n\n\n\n\n\n\nSpecifies that the server responses should include debug information.\n\n\n\n\nstatic void setAllowDuplicateRequests(bool allow);\n\n\n\n\n\n\nSet to YES to allow duplicate requests to be registered with the MAT server.\n\n\n\n\nstatic void checkForDeferredDeeplinkWithTimeout(double timeout);\n\n\n\n\n\n\nCheck for a deferred deeplink entry point upon app installation.\n\n\n\n\nstatic void automateIapEventMeasurement(bool automate);\n\n\n\n\n\n\nEnable automatic measurement of app store in-app-purchase events. When enabled, your code should not explicitly measure events for successful purchases related to StoreKit to avoid event duplication.\n\n\n\n\nstatic void setFacebookEventLogging(bool logging, bool limit);\n\n\n\n\n\n\nSet whether the MAT events should also be logged to the Facebook SDK. This flag is ignored if the Facebook SDK is not present.\n\n\n\n\nstatic void setExistingUser(bool existingUser);\n\n\n\n\n\n\nSet whether this is an existing user or a new one. This is generally used to\ndistinguish users who were using previous versions of the app, prior to\nintegration of the MAT SDK. The default is to assume a new user.\n\n\n\n\nstatic void setAppleAdvertisingIdentifier(const std::string \nappleAdvertisingIdentifier, bool adTrackingEnabled);\n\n\n\n\n\n\nSet the Apple Advertising Identifier available in iOS 6.\n\n\n\n\nstatic void setAppleVendorIdentifier(const std::string \nappleVendorIdentifier);\n\n\n\n\n\n\nSet the Apple Vendor Identifier available in iOS 6.\n\n\n\n\nstatic void setCurrencyCode(const std::string \ncurrencyCode);\n\n\n\n\n\n\nSets the currency code.\n\n\n\n\nstatic void setJailbroken(bool jailbroken);\n\n\n\n\n\n\nSets the jailbroken device flag.\n\n\n\n\nstatic void setPackageName(const std::string \npackageName);\n\n\n\n\n\n\nSets the package name (bundle identifier).\n\n\n\n\nstatic void setShouldAutoDetectJailbroken(bool autoDetect);\n\n\n\n\n\n\nSpecifies if the sdk should auto detect if the iOS device is jailbroken.\n\n\n\n\nstatic void setShouldAutoGenerateAppleVendorIdentifier(bool autoGenerate);\n\n\n\n\n\n\nSpecifies if the sdk should pull the Apple Vendor Identifier from the device. Note that setting to false will clear any previously set value for the property.\n\n\n\n\nstatic void setSiteId(const std::string \nsiteId);\n\n\n\n\n\n\nSets the site ID.\n\n\n\n\nstatic void setTRUSTeId(const std::string \ntpid);\n\n\n\n\n\n\nSet the TRUSTe Trusted Preference Identifier (TPID).\n\n\n\n\nstatic void setUserEmail(const std::string \nuserEmail);\n\n\n\n\n\n\nSets the user's email address.\n\n\n\n\nstatic void setUserId(const std::string \nuserId);\n\n\n\n\n\n\nSets the user ID.\n\n\n\n\nstatic void setUserName(const std::string \nuserName);\n\n\n\n\n\n\nSets the user's name.\n\n\n\n\nstatic void setPhoneNumber(const std::string \nphoneNumber);\n\n\n\n\n\n\nSets the user's phone number.\n\n\n\n\nstatic void setFacebookUserId(const std::string \nfacebookUserId);\n\n\n\n\n\n\nSet user's Facebook ID.\n\n\n\n\nstatic void setTwitterUserId(const std::string \ntwitterUserId);\n\n\n\n\n\n\nSet user's Twitter ID.\n\n\n\n\nstatic void setGoogleUserId(const std::string \ngoogleUserId);\n\n\n\n\n\n\nSet user's Google ID.\n\n\n\n\nstatic void setAge(int userAge);\n\n\n\n\n\n\nSets the user's age.\n\n\n\n\nstatic void setGender(Gender userGender);\n\n\n\n\n\n\nSets the user's gender.\n\n\n\n\nstatic void setLatitude(double latitude, double longitude);\n\n\n\n\n\n\nSets the user's location.\n\n\n\n\nstatic void setLatitude(double latitude, double longitude, double altitude);\n\n\n\n\n\n\nSets the user's location including altitude.\n\n\n\n\nstatic void setAppAdTracking(bool enable);\n\n\n\n\n\n\nSet app-level ad-tracking.\n\n\n\n\nstatic void setPayingUser(bool isPayingUser);\n\n\n\n\n\n\nSet whether the user is generating revenue for the app or not. If measureEvent is called with a non-zero revenue, this is automatically set to YES.\n\n\n\n\nstatic void setPreloadDataForScript(const std::string \njsonString);\nstatic void setPreloadData(const TunePreloadData \npreloadData);\n\n\n\n\n\n\nSets publisher information for attribution.\n\n\n\n\nstatic std::string matId();\n\n\n\n\n\n\nGet the MAT ID for this installation (mat_id).\n\n\n\n\nstatic std::string openLogId();\n\n\n\n\n\n\nGet the MAT log ID for the first app open (open_log_id).\n\n\n\n\nstatic bool isPayingUser();\n\n\n\n\n\n\nGet whether the user is revenue-generating.\n\n\n\n\nstatic void measureSession();\n\n\n\n\n\n\nTo be called when an app opens; typically in the AppDelegate::applicationWillEnterForeground() event.\n\n\n\n\nstatic void measureEventName(const std::string \neventName);\n\n\n\n\n\n\nRecord an event for an Event Name.\n\n\n\n\nstatic void measureEventId(int eventId);\n\n\n\n\n\n\nRecord an event by providing the equivalent Event ID defined on the MobileAppTracking dashboard.\n\n\n\n\nstatic void measureEventForScript(const std::string \njsonString);\nstatic void measureEvent(const TuneEvent \nevent);\n\n\n\n\n\n\nRecord an event with a MATEvent.\n\n\n\n\nstatic void setUseCookieTracking(bool enable);\n\n\n\n\n\n\nSets whether or not to use cookie based tracking.\n\n\n\n\nstatic void setRedirectUrl(const std::string \nredirectUrl);\n\n\n\n\n\n\nSets a url to be used with app-to-app tracking so that the sdk can open the download (redirect) url. This is used in conjunction with the setTracking:advertiserId:offerId:publisherId:redirect: method.\n\n\n\n\nstatic void startAppToAppTracking(const std::string \ntargetAppPackageName,\n                                 const std::string \ntargetAppAdvertiserId,\n                                 const std::string \ntargetAdvertiserOfferId,\n                                 const std::string \ntargetAdvertiserPublisherId,\n                                 bool shouldRedirect);\n\n\n\n\n\n\nStart an app-to-app tracking session on the MAT server.\n\n\n\n\nstatic void applicationDidOpenURL(const std::string \nurlString, const std::string \nsourceApplication);\n\n\n\n\n\n\nRecord the URL and Source when an application is opened via a URL scheme.\nThis typically occurs during OAUTH or when an app exits and is returned\nto via a URL. The data will be sent to the HasOffers server when the next\nmeasureXXX method is called so that a Re-Engagement can be recorded.", 
            "title": "c++"
        }, 
        {
            "location": "/plugins/tune/v3-cpp/#tune", 
            "text": "", 
            "title": "Tune"
        }, 
        {
            "location": "/plugins/tune/v3-cpp/#integration", 
            "text": "Use the following command to install the SDKBOX Tune plugin, Make sure you setup SDKBOX installer correctly.  sdkbox import tune", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/tune/v3-cpp/#extra-steps", 
            "text": "Modify  Cocos2dxActivity.java    If you're using cocos2d-x from source, assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java    If you're using the prebuilt cocos2d-x libraries assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ./src/org/cocos2dx/lib/Cocos2dxActivity.java    Note:  When using Cocos2d-x from source, different versions have  Cocos2dxActivity.java  in a different location. One way to find the location is to look in  proj.android/project.properties . Example:  android.library.reference.1=../../cocos2d-x/cocos/platform/android/java  In this case,  Cocos2dxActivity.java  should be located at:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java   Modify  Cocos2dxActivity.java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify  Cocos2dxActivity  to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . The placement of this call is important. It must be done after the call to  onLoadNativeLibraries(); . Example:   onLoadNativeLibraries();\nSDKBox.init(this);    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }  Proguard (release, optional)   Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   Edit the file you specified to include the following:   -keep public class com.mobileapptracker.** {\n    public *;\n}\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Extra steps"
        }, 
        {
            "location": "/plugins/tune/v3-cpp/#configuration", 
            "text": "SDKBOX Installer will automatically inject a sample configuration to your  sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the Tune configuration, you need to replace TUNE ID  and  TUNE KEY   with your specific  Tune ID  account information.\nHere is an example adding  Tune :  Tune :{\n     id : TUNE ID ,\n     key : TUNE KEY ,\n     debug :false\n}", 
            "title": "Configuration"
        }, 
        {
            "location": "/plugins/tune/v3-cpp/#usage", 
            "text": "Initialize Tune  Initialize the plugin where appropriate in your code. We recommend to do this in the  AppDelegate::applicationDidFinishLaunching()  or  AppController:didFinishLaunchingWithOptions() . Make sure to include the appropriate headers.  init()  and  measureSession()  are required. Example:  #include  PluginTune/PluginTune.h \nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginTune::init();\n     sdkbox::PluginTune::measureSession();\n}  Using Tune  After initialization you can begin to use the Tune functionality. Tune uses a concept of  events  (also known as  MAT Native Event Types ). You log  events  that you care about and you can later view them using the web-based report viewer. Tune provides a structure for these events in their documentation. Example:  {\n    PluginTune::measureEventName( purchase );\n    PluginTune::measureEventId(1122334455);\n        TuneEvent event;\n    event.eventName =  purchase2 ;\n    event.refId     =  RJ1357 ;\n    event.searchString =  sweet crisp red apples ;\n    event.attribute1 =  crisp ;\n    event.attribute2 =  red ;\n    event.quantity = 3;\n    PluginTune::measureEvent(event);\n}  Notice that at the end of the  event   PluginTune::measureEvent(event)  was called. This takes care of logging our event.", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/tune/v3-cpp/#api-reference", 
            "text": "Methods  static void init();   initialize the plugin instance.   static void setDebugMode(bool enable);   Specifies that the server responses should include debug information.   static void setAllowDuplicateRequests(bool allow);   Set to YES to allow duplicate requests to be registered with the MAT server.   static void checkForDeferredDeeplinkWithTimeout(double timeout);   Check for a deferred deeplink entry point upon app installation.   static void automateIapEventMeasurement(bool automate);   Enable automatic measurement of app store in-app-purchase events. When enabled, your code should not explicitly measure events for successful purchases related to StoreKit to avoid event duplication.   static void setFacebookEventLogging(bool logging, bool limit);   Set whether the MAT events should also be logged to the Facebook SDK. This flag is ignored if the Facebook SDK is not present.   static void setExistingUser(bool existingUser);   Set whether this is an existing user or a new one. This is generally used to\ndistinguish users who were using previous versions of the app, prior to\nintegration of the MAT SDK. The default is to assume a new user.   static void setAppleAdvertisingIdentifier(const std::string  appleAdvertisingIdentifier, bool adTrackingEnabled);   Set the Apple Advertising Identifier available in iOS 6.   static void setAppleVendorIdentifier(const std::string  appleVendorIdentifier);   Set the Apple Vendor Identifier available in iOS 6.   static void setCurrencyCode(const std::string  currencyCode);   Sets the currency code.   static void setJailbroken(bool jailbroken);   Sets the jailbroken device flag.   static void setPackageName(const std::string  packageName);   Sets the package name (bundle identifier).   static void setShouldAutoDetectJailbroken(bool autoDetect);   Specifies if the sdk should auto detect if the iOS device is jailbroken.   static void setShouldAutoGenerateAppleVendorIdentifier(bool autoGenerate);   Specifies if the sdk should pull the Apple Vendor Identifier from the device. Note that setting to false will clear any previously set value for the property.   static void setSiteId(const std::string  siteId);   Sets the site ID.   static void setTRUSTeId(const std::string  tpid);   Set the TRUSTe Trusted Preference Identifier (TPID).   static void setUserEmail(const std::string  userEmail);   Sets the user's email address.   static void setUserId(const std::string  userId);   Sets the user ID.   static void setUserName(const std::string  userName);   Sets the user's name.   static void setPhoneNumber(const std::string  phoneNumber);   Sets the user's phone number.   static void setFacebookUserId(const std::string  facebookUserId);   Set user's Facebook ID.   static void setTwitterUserId(const std::string  twitterUserId);   Set user's Twitter ID.   static void setGoogleUserId(const std::string  googleUserId);   Set user's Google ID.   static void setAge(int userAge);   Sets the user's age.   static void setGender(Gender userGender);   Sets the user's gender.   static void setLatitude(double latitude, double longitude);   Sets the user's location.   static void setLatitude(double latitude, double longitude, double altitude);   Sets the user's location including altitude.   static void setAppAdTracking(bool enable);   Set app-level ad-tracking.   static void setPayingUser(bool isPayingUser);   Set whether the user is generating revenue for the app or not. If measureEvent is called with a non-zero revenue, this is automatically set to YES.   static void setPreloadDataForScript(const std::string  jsonString);\nstatic void setPreloadData(const TunePreloadData  preloadData);   Sets publisher information for attribution.   static std::string matId();   Get the MAT ID for this installation (mat_id).   static std::string openLogId();   Get the MAT log ID for the first app open (open_log_id).   static bool isPayingUser();   Get whether the user is revenue-generating.   static void measureSession();   To be called when an app opens; typically in the AppDelegate::applicationWillEnterForeground() event.   static void measureEventName(const std::string  eventName);   Record an event for an Event Name.   static void measureEventId(int eventId);   Record an event by providing the equivalent Event ID defined on the MobileAppTracking dashboard.   static void measureEventForScript(const std::string  jsonString);\nstatic void measureEvent(const TuneEvent  event);   Record an event with a MATEvent.   static void setUseCookieTracking(bool enable);   Sets whether or not to use cookie based tracking.   static void setRedirectUrl(const std::string  redirectUrl);   Sets a url to be used with app-to-app tracking so that the sdk can open the download (redirect) url. This is used in conjunction with the setTracking:advertiserId:offerId:publisherId:redirect: method.   static void startAppToAppTracking(const std::string  targetAppPackageName,\n                                 const std::string  targetAppAdvertiserId,\n                                 const std::string  targetAdvertiserOfferId,\n                                 const std::string  targetAdvertiserPublisherId,\n                                 bool shouldRedirect);   Start an app-to-app tracking session on the MAT server.   static void applicationDidOpenURL(const std::string  urlString, const std::string  sourceApplication);   Record the URL and Source when an application is opened via a URL scheme.\nThis typically occurs during OAUTH or when an app exits and is returned\nto via a URL. The data will be sent to the HasOffers server when the next\nmeasureXXX method is called so that a Re-Engagement can be recorded.", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/tune/v3-js/", 
            "text": "Tune\n\n\nIntegration\n\n\nUse the following command to install the SDKBOX Tune plugin, Make sure you setup SDKBOX installer correctly.\n\n\nsdkbox import tune\n\n\n\n\nExtra steps\n\n\nModify \nCocos2dxActivity.java\n\n\n\n\n\n\nIf you're using cocos2d-x from source, assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java\n\n\n\n\n\n\nIf you're using the prebuilt cocos2d-x libraries assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n./src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nNote:\n When using Cocos2d-x from source, different versions have \nCocos2dxActivity.java\n in a different location. One way to find the location is to look in \nproj.android/project.properties\n. Example:\n\n\nandroid.library.reference.1=../../cocos2d-x/cocos/platform/android/java\n\n\n\n\nIn this case, \nCocos2dxActivity.java\n should be located at:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nModify \nCocos2dxActivity.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify \nCocos2dxActivity\n to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. The placement of this call is important. It must be done after the call to \nonLoadNativeLibraries();\n. Example:\n\n\n\n\nonLoadNativeLibraries();\nSDKBox.init(this);\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (release, optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n-keep public class com.mobileapptracker.** {\n    public *;\n}\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.\n\n\nConfiguration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nsdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the Tune configuration, you need to replace\n\nTUNE ID\n and \nTUNE KEY\n  with your specific \nTune ID\n account information.\nHere is an example adding \nTune\n:\n\n\nTune\n:{\n    \nid\n:\nTUNE ID\n,\n    \nkey\n:\nTUNE KEY\n,\n    \ndebug\n:false\n}\n\n\n\n\nUsage\n\n\nInitialize Tune\n\n\n\n\nInitialize the plugin by calling \ninit()\n where appropriate in your code. We\nrecommend to do this in the \napp.js\n. Example:\n\n\n\n\nsdkbox.PluginTune.init();\n\n\n\n\n\n\nModify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n to include the following headers:\n\n\n\n\n#include \nPluginTuneJS.hpp\n\n#include \nPluginTuneJSHelper.h\n\n\n\n\n\n\n\nModify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n make sure to call:\n\n\n\n\nsc-\naddRegisterCallback(register_all_PluginTuneJS);\nsc-\naddRegisterCallback(register_PluginTuneJs_helper);\n\n\n\n\nThis registers the Javascript callbacks.\n\n\nUsing Tune\n\n\nAfter initialization you can begin to use the Tune functionality. Tune uses a concept of \nevents\n (also known as \nMAT Native Event Types\n). You log \nevents\n that you care about and you can later view them using the web-based report viewer. Tune provides a structure for these events in their documentation. Example:\n\n\nsdkbox.PluginTune.measureEventName(\nlogin\n);\nsdkbox.PluginTune.measureEventId(0123456789);\n\nvar event = {};\nevent.eventName = \npurchase\n;\nevent.refId = \nRJ1357\n;\nevent.searchString = \nsweet srisp red apples\n;\nevent.attribute1 = \nsrisp\n;\nevent.attribute2 = \nred\n;\nevent.quantity = 3;\nsdkbox.PluginTune.measureEventForScript(JSON.stringify(event));\n\n\n\n\nCatch Tune events (optional)\n\n\nThis allows you to catch the \nTune\n events so that you can perform operations based upon responses. A simple example might look like this:\n\n\nsdkbox.PluginTune.setListener({\n  onEnqueuedAction: function(data) {},\n  onSucceed: function(data) {},\n  onFailed: function(data) {},\n  onReceiveDeeplink: function(data) {}\n});\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginTune.init();\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nsdkbox.PluginTune.setDebugMode(enable);\n\n\n\n\n\n\nSpecifies that the server responses should include debug information.\n\n\n\n\nsdkbox.PluginTune.setAllowDuplicateRequests(allow);\n\n\n\n\n\n\nSet to YES to allow duplicate requests to be registered with the MAT server.\n\n\n\n\nsdkbox.PluginTune.checkForDeferredDeeplinkWithTimeout(timeout);\n\n\n\n\n\n\nCheck for a deferred deeplink entry point upon app installation.\n\n\n\n\nsdkbox.PluginTune.automateIapEventMeasurement(automate);\n\n\n\n\n\n\nEnable automatic measurement of app store in-app-purchase events. When enabled, your code should not explicitly measure events for successful purchases related to StoreKit to avoid event duplication.\n\n\n\n\nsdkbox.PluginTune.setFacebookEventLogging(logging, limit);\n\n\n\n\n\n\nSet whether the MAT events should also be logged to the Facebook SDK. This flag is ignored if the Facebook SDK is not present.\n\n\n\n\nsdkbox.PluginTune.setExistingUser(existingUser);\n\n\n\n\n\n\nSet whether this is an existing user or a new one. This is generally used to\ndistinguish users who were using previous versions of the app, prior to\nintegration of the MAT SDK. The default is to assume a new user.\n\n\n\n\nsdkbox.PluginTune.setAppleAdvertisingIdentifier(appleAdvertisingIdentifier, adTrackingEnabled);\n\n\n\n\n\n\nSet the Apple Advertising Identifier available in iOS 6.\n\n\n\n\nsdkbox.PluginTune.setAppleVendorIdentifier(appleVendorIdentifier);\n\n\n\n\n\n\nSet the Apple Vendor Identifier available in iOS 6.\n\n\n\n\nsdkbox.PluginTune.setCurrencyCode(currencyCode);\n\n\n\n\n\n\nSets the currency code.\n\n\n\n\nsdkbox.PluginTune.setJailbroken(jailbroken);\n\n\n\n\n\n\nSets the jailbroken device flag.\n\n\n\n\nsdkbox.PluginTune.setPackageName(packageName);\n\n\n\n\n\n\nSets the package name (bundle identifier).\n\n\n\n\nsdkbox.PluginTune.setShouldAutoDetectJailbroken(autoDetect);\n\n\n\n\n\n\nSpecifies if the sdk should auto detect if the iOS device is jailbroken.\n\n\n\n\nsdkbox.PluginTune.setShouldAutoGenerateAppleVendorIdentifier(autoGenerate);\n\n\n\n\n\n\nSpecifies if the sdk should pull the Apple Vendor Identifier from the device. Note that setting to false will clear any previously set value for the property.\n\n\n\n\nsdkbox.PluginTune.setSiteId(siteId);\n\n\n\n\n\n\nSets the site ID.\n\n\n\n\nsdkbox.PluginTune.setTRUSTeId(tpid);\n\n\n\n\n\n\nSet the TRUSTe Trusted Preference Identifier (TPID).\n\n\n\n\nsdkbox.PluginTune.setUserEmail(userEmail);\n\n\n\n\n\n\nSets the user's email address.\n\n\n\n\nsdkbox.PluginTune.setUserId(userId);\n\n\n\n\n\n\nSets the user ID.\n\n\n\n\nsdkbox.PluginTune.setUserName(userName);\n\n\n\n\n\n\nSets the user's name.\n\n\n\n\nsdkbox.PluginTune.setPhoneNumber(phoneNumber);\n\n\n\n\n\n\nSets the user's phone number.\n\n\n\n\nsdkbox.PluginTune.setFacebookUserId(facebookUserId);\n\n\n\n\n\n\nSet user's Facebook ID.\n\n\n\n\nsdkbox.PluginTune.setTwitterUserId(twitterUserId);\n\n\n\n\n\n\nSet user's Twitter ID.\n\n\n\n\nsdkbox.PluginTune.setGoogleUserId(googleUserId);\n\n\n\n\n\n\nSet user's Google ID.\n\n\n\n\nsdkbox.PluginTune.setAge(long userAge);\n\n\n\n\n\n\nSets the user's age.\n\n\n\n\nsdkbox.PluginTune.setGender(Gender userGender);\n\n\n\n\n\n\nSets the user's gender.\n\n\n\n\nsdkbox.PluginTune.setLatitude(latitude, longitude);\n\n\n\n\n\n\nSets the user's location.\n\n\n\n\nsdkbox.PluginTune.setLatitude(latitude, longitude, altitude);\n\n\n\n\n\n\nSets the user's location including altitude.\n\n\n\n\nsdkbox.PluginTune.setAppAdTracking(enable);\n\n\n\n\n\n\nSet app-level ad-tracking.\n\n\n\n\nsdkbox.PluginTune.setPayingUser(isPayingUser);\n\n\n\n\n\n\nSet whether the user is generating revenue for the app or not. If measureEvent is called with a non-zero revenue, this is automatically set to YES.\n\n\n\n\nsdkbox.PluginTune.setPreloadDataForScript(jsonString);\nsdkbox.PluginTune.setPreloadData(preloadData);\n\n\n\n\n\n\nSets publisher information for attribution.\n\n\n\n\nsdkbox.PluginTune.matId();\n\n\n\n\n\n\nGet the MAT ID for this installation (mat_id).\n\n\n\n\nsdkbox.PluginTune.openLogId();\n\n\n\n\n\n\nGet the MAT log ID for the first app open (open_log_id).\n\n\n\n\nsdkbox.PluginTune.isPayingUser();\n\n\n\n\n\n\nGet whether the user is revenue-generating.\n\n\n\n\nsdkbox.PluginTune.measureSession();\n\n\n\n\n\n\nTo be called when an app opens; typically in the AppDelegate::applicationWillEnterForeground() event.\n\n\n\n\nsdkbox.PluginTune.measureEventName(eventName);\n\n\n\n\n\n\nRecord an event for an Event Name.\n\n\n\n\nsdkbox.PluginTune.measureEventId(eventId);\n\n\n\n\n\n\nRecord an event by providing the equivalent Event ID defined on the MobileAppTracking dashboard.\n\n\n\n\nsdkbox.PluginTune.measureEventForScript(jsonString);\nsdkbox.PluginTune.measureEvent(event);\n\n\n\n\n\n\nRecord an event with a MATEvent.\n\n\n\n\nsdkbox.PluginTune.setUseCookieTracking(enable);\n\n\n\n\n\n\nSets whether or not to use cookie based tracking.\n\n\n\n\nsdkbox.PluginTune.setRedirectUrl(redirectUrl);\n\n\n\n\n\n\nSets a url to be used with app-to-app tracking so that the sdk can open the download (redirect) url. This is used in conjunction with the setTracking:advertiserId:offerId:publisherId:redirect: method.\n\n\n\n\nsdkbox.PluginTune.startAppToAppTracking(targetAppPackageName,\n                                 targetAppAdvertiserId,\n                                 targetAdvertiserOfferId,\n                                 targetAdvertiserPublisherId,\n                                 shouldRedirect);\n\n\n\n\n\n\nStart an app-to-app tracking session on the MAT server.\n\n\n\n\nsdkbox.PluginTune.applicationDidOpenURL(urlString, sourceApplication);\n\n\n\n\n\n\nRecord the URL and Source when an application is opened via a URL scheme.\nThis typically occurs during OAUTH or when an app exits and is returned\nto via a URL. The data will be sent to the HasOffers server when the next\nmeasureXXX method is called so that a Re-Engagement can be recorded.", 
            "title": "js"
        }, 
        {
            "location": "/plugins/tune/v3-js/#tune", 
            "text": "", 
            "title": "Tune"
        }, 
        {
            "location": "/plugins/tune/v3-js/#integration", 
            "text": "Use the following command to install the SDKBOX Tune plugin, Make sure you setup SDKBOX installer correctly.  sdkbox import tune", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/tune/v3-js/#extra-steps", 
            "text": "Modify  Cocos2dxActivity.java    If you're using cocos2d-x from source, assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java    If you're using the prebuilt cocos2d-x libraries assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ./src/org/cocos2dx/lib/Cocos2dxActivity.java    Note:  When using Cocos2d-x from source, different versions have  Cocos2dxActivity.java  in a different location. One way to find the location is to look in  proj.android/project.properties . Example:  android.library.reference.1=../../cocos2d-x/cocos/platform/android/java  In this case,  Cocos2dxActivity.java  should be located at:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java   Modify  Cocos2dxActivity.java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify  Cocos2dxActivity  to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . The placement of this call is important. It must be done after the call to  onLoadNativeLibraries(); . Example:   onLoadNativeLibraries();\nSDKBox.init(this);    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }  Proguard (release, optional)   Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   Edit the file you specified to include the following:   -keep public class com.mobileapptracker.** {\n    public *;\n}\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Extra steps"
        }, 
        {
            "location": "/plugins/tune/v3-js/#configuration", 
            "text": "SDKBOX Installer will automatically inject a sample configuration to your  sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the Tune configuration, you need to replace TUNE ID  and  TUNE KEY   with your specific  Tune ID  account information.\nHere is an example adding  Tune :  Tune :{\n     id : TUNE ID ,\n     key : TUNE KEY ,\n     debug :false\n}", 
            "title": "Configuration"
        }, 
        {
            "location": "/plugins/tune/v3-js/#usage", 
            "text": "Initialize Tune   Initialize the plugin by calling  init()  where appropriate in your code. We\nrecommend to do this in the  app.js . Example:   sdkbox.PluginTune.init();   Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  to include the following headers:   #include  PluginTuneJS.hpp \n#include  PluginTuneJSHelper.h    Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  make sure to call:   sc- addRegisterCallback(register_all_PluginTuneJS);\nsc- addRegisterCallback(register_PluginTuneJs_helper);  This registers the Javascript callbacks.  Using Tune  After initialization you can begin to use the Tune functionality. Tune uses a concept of  events  (also known as  MAT Native Event Types ). You log  events  that you care about and you can later view them using the web-based report viewer. Tune provides a structure for these events in their documentation. Example:  sdkbox.PluginTune.measureEventName( login );\nsdkbox.PluginTune.measureEventId(0123456789);\n\nvar event = {};\nevent.eventName =  purchase ;\nevent.refId =  RJ1357 ;\nevent.searchString =  sweet srisp red apples ;\nevent.attribute1 =  srisp ;\nevent.attribute2 =  red ;\nevent.quantity = 3;\nsdkbox.PluginTune.measureEventForScript(JSON.stringify(event));  Catch Tune events (optional)  This allows you to catch the  Tune  events so that you can perform operations based upon responses. A simple example might look like this:  sdkbox.PluginTune.setListener({\n  onEnqueuedAction: function(data) {},\n  onSucceed: function(data) {},\n  onFailed: function(data) {},\n  onReceiveDeeplink: function(data) {}\n});", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/tune/v3-js/#api-reference", 
            "text": "Methods  sdkbox.PluginTune.init();   initialize the plugin instance.   sdkbox.PluginTune.setDebugMode(enable);   Specifies that the server responses should include debug information.   sdkbox.PluginTune.setAllowDuplicateRequests(allow);   Set to YES to allow duplicate requests to be registered with the MAT server.   sdkbox.PluginTune.checkForDeferredDeeplinkWithTimeout(timeout);   Check for a deferred deeplink entry point upon app installation.   sdkbox.PluginTune.automateIapEventMeasurement(automate);   Enable automatic measurement of app store in-app-purchase events. When enabled, your code should not explicitly measure events for successful purchases related to StoreKit to avoid event duplication.   sdkbox.PluginTune.setFacebookEventLogging(logging, limit);   Set whether the MAT events should also be logged to the Facebook SDK. This flag is ignored if the Facebook SDK is not present.   sdkbox.PluginTune.setExistingUser(existingUser);   Set whether this is an existing user or a new one. This is generally used to\ndistinguish users who were using previous versions of the app, prior to\nintegration of the MAT SDK. The default is to assume a new user.   sdkbox.PluginTune.setAppleAdvertisingIdentifier(appleAdvertisingIdentifier, adTrackingEnabled);   Set the Apple Advertising Identifier available in iOS 6.   sdkbox.PluginTune.setAppleVendorIdentifier(appleVendorIdentifier);   Set the Apple Vendor Identifier available in iOS 6.   sdkbox.PluginTune.setCurrencyCode(currencyCode);   Sets the currency code.   sdkbox.PluginTune.setJailbroken(jailbroken);   Sets the jailbroken device flag.   sdkbox.PluginTune.setPackageName(packageName);   Sets the package name (bundle identifier).   sdkbox.PluginTune.setShouldAutoDetectJailbroken(autoDetect);   Specifies if the sdk should auto detect if the iOS device is jailbroken.   sdkbox.PluginTune.setShouldAutoGenerateAppleVendorIdentifier(autoGenerate);   Specifies if the sdk should pull the Apple Vendor Identifier from the device. Note that setting to false will clear any previously set value for the property.   sdkbox.PluginTune.setSiteId(siteId);   Sets the site ID.   sdkbox.PluginTune.setTRUSTeId(tpid);   Set the TRUSTe Trusted Preference Identifier (TPID).   sdkbox.PluginTune.setUserEmail(userEmail);   Sets the user's email address.   sdkbox.PluginTune.setUserId(userId);   Sets the user ID.   sdkbox.PluginTune.setUserName(userName);   Sets the user's name.   sdkbox.PluginTune.setPhoneNumber(phoneNumber);   Sets the user's phone number.   sdkbox.PluginTune.setFacebookUserId(facebookUserId);   Set user's Facebook ID.   sdkbox.PluginTune.setTwitterUserId(twitterUserId);   Set user's Twitter ID.   sdkbox.PluginTune.setGoogleUserId(googleUserId);   Set user's Google ID.   sdkbox.PluginTune.setAge(long userAge);   Sets the user's age.   sdkbox.PluginTune.setGender(Gender userGender);   Sets the user's gender.   sdkbox.PluginTune.setLatitude(latitude, longitude);   Sets the user's location.   sdkbox.PluginTune.setLatitude(latitude, longitude, altitude);   Sets the user's location including altitude.   sdkbox.PluginTune.setAppAdTracking(enable);   Set app-level ad-tracking.   sdkbox.PluginTune.setPayingUser(isPayingUser);   Set whether the user is generating revenue for the app or not. If measureEvent is called with a non-zero revenue, this is automatically set to YES.   sdkbox.PluginTune.setPreloadDataForScript(jsonString);\nsdkbox.PluginTune.setPreloadData(preloadData);   Sets publisher information for attribution.   sdkbox.PluginTune.matId();   Get the MAT ID for this installation (mat_id).   sdkbox.PluginTune.openLogId();   Get the MAT log ID for the first app open (open_log_id).   sdkbox.PluginTune.isPayingUser();   Get whether the user is revenue-generating.   sdkbox.PluginTune.measureSession();   To be called when an app opens; typically in the AppDelegate::applicationWillEnterForeground() event.   sdkbox.PluginTune.measureEventName(eventName);   Record an event for an Event Name.   sdkbox.PluginTune.measureEventId(eventId);   Record an event by providing the equivalent Event ID defined on the MobileAppTracking dashboard.   sdkbox.PluginTune.measureEventForScript(jsonString);\nsdkbox.PluginTune.measureEvent(event);   Record an event with a MATEvent.   sdkbox.PluginTune.setUseCookieTracking(enable);   Sets whether or not to use cookie based tracking.   sdkbox.PluginTune.setRedirectUrl(redirectUrl);   Sets a url to be used with app-to-app tracking so that the sdk can open the download (redirect) url. This is used in conjunction with the setTracking:advertiserId:offerId:publisherId:redirect: method.   sdkbox.PluginTune.startAppToAppTracking(targetAppPackageName,\n                                 targetAppAdvertiserId,\n                                 targetAdvertiserOfferId,\n                                 targetAdvertiserPublisherId,\n                                 shouldRedirect);   Start an app-to-app tracking session on the MAT server.   sdkbox.PluginTune.applicationDidOpenURL(urlString, sourceApplication);   Record the URL and Source when an application is opened via a URL scheme.\nThis typically occurs during OAUTH or when an app exits and is returned\nto via a URL. The data will be sent to the HasOffers server when the next\nmeasureXXX method is called so that a Re-Engagement can be recorded.", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/tune/v3-lua/", 
            "text": "Tune\n\n\nIntegration\n\n\nUse the following command to install the SDKBOX Tune plugin, Make sure you setup SDKBOX installer correctly.\n\n\nsdkbox import tune\n\n\n\n\nExtra steps\n\n\nModify \nCocos2dxActivity.java\n\n\n\n\n\n\nIf you're using cocos2d-x from source, assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java\n\n\n\n\n\n\nIf you're using the prebuilt cocos2d-x libraries assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n./src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nNote:\n When using Cocos2d-x from source, different versions have \nCocos2dxActivity.java\n in a different location. One way to find the location is to look in \nproj.android/project.properties\n. Example:\n\n\nandroid.library.reference.1=../../cocos2d-x/cocos/platform/android/java\n\n\n\n\nIn this case, \nCocos2dxActivity.java\n should be located at:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nModify \nCocos2dxActivity.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify \nCocos2dxActivity\n to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. The placement of this call is important. It must be done after the call to \nonLoadNativeLibraries();\n. Example:\n\n\n\n\nonLoadNativeLibraries();\nSDKBox.init(this);\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (release, optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n-keep public class com.mobileapptracker.** {\n    public *;\n}\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.\n\n\nConfiguration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nsdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the Tune configuration, you need to replace\n\nTUNE ID\n and \nTUNE KEY\n  with your specific \nTune ID\n account information.\nHere is an example adding \nTune\n:\n\n\nTune\n:{\n    \nid\n:\nTUNE ID\n,\n    \nkey\n:\nTUNE KEY\n,\n    \ndebug\n:false\n}\n\n\n\n\nUsage\n\n\nModify Lua Code\n\n\nModify \n./frameworks/runtime-src/Classes/lua_module_register.h\n to include the necessary headers and calls to register \nTune\n with Lua. Note this takes a parameter of \nlua_State*\n:\n\n\n#include \nPluginTuneLua.hpp\n\n#include \nPluginTuneLuaHelper.h\n\n\n\n\n\nstatic int lua_module_register(lua_State* L)\n{\n  register_all_PluginTuneLua(L);\n  register_PluginTuneLua_helper(L);\n}\n\n\n\n\nInitialize Tune\n\n\n\n\nmodify your Lua code to \ninit()\n the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.\n\n\n\n\nsdkbox.PluginTune:init();\n\n\n\n\nUsing Tune\n\n\nAfter initialization you can begin to use the Tune functionality. Tune uses a concept of \nevents\n (also known as \nMAT Native Event Types\n). You log \nevents\n that you care about and you can later view them using the web-based report viewer. Tune provides a structure for these events in their documentation. Example:\n\n\nsdkbox.PluginTune:measureEventName(\nlogin\n);\nsdkbox.PluginTune:measureEventId(0123456789);\n\nlocal event = {}\nevent.eventName = \npurchase\n\nevent.refId = \nRJ1357\n\nevent.searchString = \nsweet srisp red apples\n\nevent.attribute1 = \nsrisp\n\nevent.attribute2 = \nred\n\nevent.quantity = 3\nsdkbox.PluginTune:measureEventForScript(json.encode(event))\n\n\n\n\nCatch Tune events (optional)\n\n\nThis allows you to catch the \nTune\n events so that you can perform operations based upon responses. A simple example might look like this:\n\n\nsdkbox.PluginTune:setListener(function(eventName, eventData)\n        print(eventName, eventData)\n    end)\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginTune:init();\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nsdkbox.PluginTune:setDebugMode(enable);\n\n\n\n\n\n\nSpecifies that the server responses should include debug information.\n\n\n\n\nsdkbox.PluginTune:setAllowDuplicateRequests(allow);\n\n\n\n\n\n\nSet to YES to allow duplicate requests to be registered with the MAT server.\n\n\n\n\nsdkbox.PluginTune:checkForDeferredDeeplinkWithTimeout(timeout);\n\n\n\n\n\n\nCheck for a deferred deeplink entry point upon app installation.\n\n\n\n\nsdkbox.PluginTune:automateIapEventMeasurement(automate);\n\n\n\n\n\n\nEnable automatic measurement of app store in-app-purchase events. When enabled, your code should not explicitly measure events for successful purchases related to StoreKit to avoid event duplication.\n\n\n\n\nsdkbox.PluginTune:setFacebookEventLogging(logging, limit);\n\n\n\n\n\n\nSet whether the MAT events should also be logged to the Facebook SDK. This flag is ignored if the Facebook SDK is not present.\n\n\n\n\nsdkbox.PluginTune:setExistingUser(existingUser);\n\n\n\n\n\n\nSet whether this is an existing user or a new one. This is generally used to\ndistinguish users who were using previous versions of the app, prior to\nintegration of the MAT SDK. The default is to assume a new user.\n\n\n\n\nsdkbox.PluginTune:setAppleAdvertisingIdentifier(appleAdvertisingIdentifier, adTrackingEnabled);\n\n\n\n\n\n\nSet the Apple Advertising Identifier available in iOS 6.\n\n\n\n\nsdkbox.PluginTune:setAppleVendorIdentifier(appleVendorIdentifier);\n\n\n\n\n\n\nSet the Apple Vendor Identifier available in iOS 6.\n\n\n\n\nsdkbox.PluginTune:setCurrencyCode(currencyCode);\n\n\n\n\n\n\nSets the currency code.\n\n\n\n\nsdkbox.PluginTune:setJailbroken(jailbroken);\n\n\n\n\n\n\nSets the jailbroken device flag.\n\n\n\n\nsdkbox.PluginTune:setPackageName(packageName);\n\n\n\n\n\n\nSets the package name (bundle identifier).\n\n\n\n\nsdkbox.PluginTune:setShouldAutoDetectJailbroken(autoDetect);\n\n\n\n\n\n\nSpecifies if the sdk should auto detect if the iOS device is jailbroken.\n\n\n\n\nsdkbox.PluginTune:setShouldAutoGenerateAppleVendorIdentifier(autoGenerate);\n\n\n\n\n\n\nSpecifies if the sdk should pull the Apple Vendor Identifier from the device. Note that setting to false will clear any previously set value for the property.\n\n\n\n\nsdkbox.PluginTune:setSiteId(siteId);\n\n\n\n\n\n\nSets the site ID.\n\n\n\n\nsdkbox.PluginTune:setTRUSTeId(tpid);\n\n\n\n\n\n\nSet the TRUSTe Trusted Preference Identifier (TPID).\n\n\n\n\nsdkbox.PluginTune:setUserEmail(userEmail);\n\n\n\n\n\n\nSets the user's email address.\n\n\n\n\nsdkbox.PluginTune:setUserId(userId);\n\n\n\n\n\n\nSets the user ID.\n\n\n\n\nsdkbox.PluginTune:setUserName(userName);\n\n\n\n\n\n\nSets the user's name.\n\n\n\n\nsdkbox.PluginTune:setPhoneNumber(phoneNumber);\n\n\n\n\n\n\nSets the user's phone number.\n\n\n\n\nsdkbox.PluginTune:setFacebookUserId(facebookUserId);\n\n\n\n\n\n\nSet user's Facebook ID.\n\n\n\n\nsdkbox.PluginTune:setTwitterUserId(twitterUserId);\n\n\n\n\n\n\nSet user's Twitter ID.\n\n\n\n\nsdkbox.PluginTune:setGoogleUserId(googleUserId);\n\n\n\n\n\n\nSet user's Google ID.\n\n\n\n\nsdkbox.PluginTune:setAge(long userAge);\n\n\n\n\n\n\nSets the user's age.\n\n\n\n\nsdkbox.PluginTune:setGender(Gender userGender);\n\n\n\n\n\n\nSets the user's gender.\n\n\n\n\nsdkbox.PluginTune:setLatitude(latitude, longitude);\n\n\n\n\n\n\nSets the user's location.\n\n\n\n\nsdkbox.PluginTune:setLatitude(latitude, longitude, altitude);\n\n\n\n\n\n\nSets the user's location including altitude.\n\n\n\n\nsdkbox.PluginTune:setAppAdTracking(enable);\n\n\n\n\n\n\nSet app-level ad-tracking.\n\n\n\n\nsdkbox.PluginTune:setPayingUser(isPayingUser);\n\n\n\n\n\n\nSet whether the user is generating revenue for the app or not. If measureEvent is called with a non-zero revenue, this is automatically set to YES.\n\n\n\n\nsdkbox.PluginTune:setPreloadData(jsonString);\n\n\n\n\n\n\nSets publisher information for attribution.\n\n\n\n\nsdkbox.PluginTune:matId();\n\n\n\n\n\n\nGet the MAT ID for this installation (mat_id).\n\n\n\n\nsdkbox.PluginTune:openLogId();\n\n\n\n\n\n\nGet the MAT log ID for the first app open (open_log_id).\n\n\n\n\nsdkbox.PluginTune:isPayingUser();\n\n\n\n\n\n\nGet whether the user is revenue-generating.\n\n\n\n\nsdkbox.PluginTune:measureSession();\n\n\n\n\n\n\nTo be called when an app opens; typically in the AppDelegate::applicationWillEnterForeground() event.\n\n\n\n\nsdkbox.PluginTune:measureEventName(eventName);\n\n\n\n\n\n\nRecord an event for an Event Name.\n\n\n\n\nsdkbox.PluginTune:measureEventId(eventId);\n\n\n\n\n\n\nRecord an event by providing the equivalent Event ID defined on the MobileAppTracking dashboard.\n\n\n\n\nsdkbox.PluginTune:measureEvent(jsonString);\n\n\n\n\n\n\nRecord an event with a MATEvent.\n\n\n\n\nsdkbox.PluginTune:setUseCookieTracking(enable);\n\n\n\n\n\n\nSets whether or not to use cookie based tracking.\n\n\n\n\nsdkbox.PluginTune:setRedirectUrl(redirectUrl);\n\n\n\n\n\n\nSets a url to be used with app-to-app tracking so that the sdk can open the download (redirect) url. This is used in conjunction with the setTracking:advertiserId:offerId:publisherId:redirect: method.\n\n\n\n\nsdkbox.PluginTune:startAppToAppTracking(targetAppPackageName,\n                                 targetAppAdvertiserId,\n                                 targetAdvertiserOfferId,\n                                 targetAdvertiserPublisherId,\n                                 shouldRedirect);\n\n\n\n\n\n\nStart an app-to-app tracking session on the MAT server.\n\n\n\n\nsdkbox.PluginTune:applicationDidOpenURL(urlString, sourceApplication);\n\n\n\n\n\n\nRecord the URL and Source when an application is opened via a URL scheme.\nThis typically occurs during OAUTH or when an app exits and is returned\nto via a URL. The data will be sent to the HasOffers server when the next\nmeasureXXX method is called so that a Re-Engagement can be recorded.", 
            "title": "lua"
        }, 
        {
            "location": "/plugins/tune/v3-lua/#tune", 
            "text": "", 
            "title": "Tune"
        }, 
        {
            "location": "/plugins/tune/v3-lua/#integration", 
            "text": "Use the following command to install the SDKBOX Tune plugin, Make sure you setup SDKBOX installer correctly.  sdkbox import tune", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/tune/v3-lua/#extra-steps", 
            "text": "Modify  Cocos2dxActivity.java    If you're using cocos2d-x from source, assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java    If you're using the prebuilt cocos2d-x libraries assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ./src/org/cocos2dx/lib/Cocos2dxActivity.java    Note:  When using Cocos2d-x from source, different versions have  Cocos2dxActivity.java  in a different location. One way to find the location is to look in  proj.android/project.properties . Example:  android.library.reference.1=../../cocos2d-x/cocos/platform/android/java  In this case,  Cocos2dxActivity.java  should be located at:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java   Modify  Cocos2dxActivity.java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify  Cocos2dxActivity  to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . The placement of this call is important. It must be done after the call to  onLoadNativeLibraries(); . Example:   onLoadNativeLibraries();\nSDKBox.init(this);    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }  Proguard (release, optional)   Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   Edit the file you specified to include the following:   -keep public class com.mobileapptracker.** {\n    public *;\n}\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Extra steps"
        }, 
        {
            "location": "/plugins/tune/v3-lua/#configuration", 
            "text": "SDKBOX Installer will automatically inject a sample configuration to your  sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the Tune configuration, you need to replace TUNE ID  and  TUNE KEY   with your specific  Tune ID  account information.\nHere is an example adding  Tune :  Tune :{\n     id : TUNE ID ,\n     key : TUNE KEY ,\n     debug :false\n}", 
            "title": "Configuration"
        }, 
        {
            "location": "/plugins/tune/v3-lua/#usage", 
            "text": "Modify Lua Code  Modify  ./frameworks/runtime-src/Classes/lua_module_register.h  to include the necessary headers and calls to register  Tune  with Lua. Note this takes a parameter of  lua_State* :  #include  PluginTuneLua.hpp \n#include  PluginTuneLuaHelper.h   static int lua_module_register(lua_State* L)\n{\n  register_all_PluginTuneLua(L);\n  register_PluginTuneLua_helper(L);\n}  Initialize Tune   modify your Lua code to  init()  the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.   sdkbox.PluginTune:init();  Using Tune  After initialization you can begin to use the Tune functionality. Tune uses a concept of  events  (also known as  MAT Native Event Types ). You log  events  that you care about and you can later view them using the web-based report viewer. Tune provides a structure for these events in their documentation. Example:  sdkbox.PluginTune:measureEventName( login );\nsdkbox.PluginTune:measureEventId(0123456789);\n\nlocal event = {}\nevent.eventName =  purchase \nevent.refId =  RJ1357 \nevent.searchString =  sweet srisp red apples \nevent.attribute1 =  srisp \nevent.attribute2 =  red \nevent.quantity = 3\nsdkbox.PluginTune:measureEventForScript(json.encode(event))  Catch Tune events (optional)  This allows you to catch the  Tune  events so that you can perform operations based upon responses. A simple example might look like this:  sdkbox.PluginTune:setListener(function(eventName, eventData)\n        print(eventName, eventData)\n    end)", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/tune/v3-lua/#api-reference", 
            "text": "Methods  sdkbox.PluginTune:init();   initialize the plugin instance.   sdkbox.PluginTune:setDebugMode(enable);   Specifies that the server responses should include debug information.   sdkbox.PluginTune:setAllowDuplicateRequests(allow);   Set to YES to allow duplicate requests to be registered with the MAT server.   sdkbox.PluginTune:checkForDeferredDeeplinkWithTimeout(timeout);   Check for a deferred deeplink entry point upon app installation.   sdkbox.PluginTune:automateIapEventMeasurement(automate);   Enable automatic measurement of app store in-app-purchase events. When enabled, your code should not explicitly measure events for successful purchases related to StoreKit to avoid event duplication.   sdkbox.PluginTune:setFacebookEventLogging(logging, limit);   Set whether the MAT events should also be logged to the Facebook SDK. This flag is ignored if the Facebook SDK is not present.   sdkbox.PluginTune:setExistingUser(existingUser);   Set whether this is an existing user or a new one. This is generally used to\ndistinguish users who were using previous versions of the app, prior to\nintegration of the MAT SDK. The default is to assume a new user.   sdkbox.PluginTune:setAppleAdvertisingIdentifier(appleAdvertisingIdentifier, adTrackingEnabled);   Set the Apple Advertising Identifier available in iOS 6.   sdkbox.PluginTune:setAppleVendorIdentifier(appleVendorIdentifier);   Set the Apple Vendor Identifier available in iOS 6.   sdkbox.PluginTune:setCurrencyCode(currencyCode);   Sets the currency code.   sdkbox.PluginTune:setJailbroken(jailbroken);   Sets the jailbroken device flag.   sdkbox.PluginTune:setPackageName(packageName);   Sets the package name (bundle identifier).   sdkbox.PluginTune:setShouldAutoDetectJailbroken(autoDetect);   Specifies if the sdk should auto detect if the iOS device is jailbroken.   sdkbox.PluginTune:setShouldAutoGenerateAppleVendorIdentifier(autoGenerate);   Specifies if the sdk should pull the Apple Vendor Identifier from the device. Note that setting to false will clear any previously set value for the property.   sdkbox.PluginTune:setSiteId(siteId);   Sets the site ID.   sdkbox.PluginTune:setTRUSTeId(tpid);   Set the TRUSTe Trusted Preference Identifier (TPID).   sdkbox.PluginTune:setUserEmail(userEmail);   Sets the user's email address.   sdkbox.PluginTune:setUserId(userId);   Sets the user ID.   sdkbox.PluginTune:setUserName(userName);   Sets the user's name.   sdkbox.PluginTune:setPhoneNumber(phoneNumber);   Sets the user's phone number.   sdkbox.PluginTune:setFacebookUserId(facebookUserId);   Set user's Facebook ID.   sdkbox.PluginTune:setTwitterUserId(twitterUserId);   Set user's Twitter ID.   sdkbox.PluginTune:setGoogleUserId(googleUserId);   Set user's Google ID.   sdkbox.PluginTune:setAge(long userAge);   Sets the user's age.   sdkbox.PluginTune:setGender(Gender userGender);   Sets the user's gender.   sdkbox.PluginTune:setLatitude(latitude, longitude);   Sets the user's location.   sdkbox.PluginTune:setLatitude(latitude, longitude, altitude);   Sets the user's location including altitude.   sdkbox.PluginTune:setAppAdTracking(enable);   Set app-level ad-tracking.   sdkbox.PluginTune:setPayingUser(isPayingUser);   Set whether the user is generating revenue for the app or not. If measureEvent is called with a non-zero revenue, this is automatically set to YES.   sdkbox.PluginTune:setPreloadData(jsonString);   Sets publisher information for attribution.   sdkbox.PluginTune:matId();   Get the MAT ID for this installation (mat_id).   sdkbox.PluginTune:openLogId();   Get the MAT log ID for the first app open (open_log_id).   sdkbox.PluginTune:isPayingUser();   Get whether the user is revenue-generating.   sdkbox.PluginTune:measureSession();   To be called when an app opens; typically in the AppDelegate::applicationWillEnterForeground() event.   sdkbox.PluginTune:measureEventName(eventName);   Record an event for an Event Name.   sdkbox.PluginTune:measureEventId(eventId);   Record an event by providing the equivalent Event ID defined on the MobileAppTracking dashboard.   sdkbox.PluginTune:measureEvent(jsonString);   Record an event with a MATEvent.   sdkbox.PluginTune:setUseCookieTracking(enable);   Sets whether or not to use cookie based tracking.   sdkbox.PluginTune:setRedirectUrl(redirectUrl);   Sets a url to be used with app-to-app tracking so that the sdk can open the download (redirect) url. This is used in conjunction with the setTracking:advertiserId:offerId:publisherId:redirect: method.   sdkbox.PluginTune:startAppToAppTracking(targetAppPackageName,\n                                 targetAppAdvertiserId,\n                                 targetAdvertiserOfferId,\n                                 targetAdvertiserPublisherId,\n                                 shouldRedirect);   Start an app-to-app tracking session on the MAT server.   sdkbox.PluginTune:applicationDidOpenURL(urlString, sourceApplication);   Record the URL and Source when an application is opened via a URL scheme.\nThis typically occurs during OAUTH or when an app exits and is returned\nto via a URL. The data will be sent to the HasOffers server when the next\nmeasureXXX method is called so that a Re-Engagement can be recorded.", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/tune/v2-cpp/", 
            "text": "Tune\n\n\nIntegration\n\n\nUse the following command to install the SDKBOX Tune plugin, Make sure you setup SDKBOX installer correctly.\n\n\nsdkbox import tune\n\n\n\n\nExtra steps\n\n\nModify \nYourGameName\n.java\n\n\n\n\nModify \nproj.android/src/\npackage identifier\n/\nYourGameName\n.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify the class to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. Example of what this might look like for you:\n\n\n\n\nprotected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (release, optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n-keep public class com.mobileapptracker.** {\n    public *;\n}\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.\n\n\nConfiguration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nsdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the Tune configuration, you need to replace\n\nTUNE ID\n and \nTUNE KEY\n  with your specific \nTune ID\n account information.\nHere is an example adding \nTune\n:\n\n\nTune\n:{\n    \nid\n:\nTUNE ID\n,\n    \nkey\n:\nTUNE KEY\n,\n    \ndebug\n:false\n}\n\n\n\n\nUsage\n\n\nInitialize Tune\n\n\nInitialize the plugin where appropriate in your code. We recommend to do this in the \nAppDelegate::applicationDidFinishLaunching()\n or \nAppController:didFinishLaunchingWithOptions()\n. Make sure to include the appropriate headers. \ninit()\n and \nmeasureSession()\n are required. Example:\n\n\n#include \nPluginTune/PluginTune.h\n\nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginTune::init();\n     sdkbox::PluginTune::measureSession();\n}\n\n\n\n\nUsing Tune\n\n\nAfter initialization you can begin to use the Tune functionality. Tune uses a concept of \nevents\n (also known as \nMAT Native Event Types\n). You log \nevents\n that you care about and you can later view them using the web-based report viewer. Tune provides a structure for these events in their documentation. Example:\n\n\n{\n    PluginTune::measureEventName(\npurchase\n);\n    PluginTune::measureEventId(1122334455);\n        TuneEvent event;\n    event.eventName = \npurchase2\n;\n    event.refId     = \nRJ1357\n;\n    event.searchString = \nsweet crisp red apples\n;\n    event.attribute1 = \ncrisp\n;\n    event.attribute2 = \nred\n;\n    event.quantity = 3;\n    PluginTune::measureEvent(event);\n}\n\n\n\n\nNotice that at the end of the \nevent\n \nPluginTune::measureEvent(event)\n was called. This takes care of logging our event.\n\n\nAPI Reference\n\n\nMethods\n\n\nstatic void init();\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nstatic void setDebugMode(bool enable);\n\n\n\n\n\n\nSpecifies that the server responses should include debug information.\n\n\n\n\nstatic void setAllowDuplicateRequests(bool allow);\n\n\n\n\n\n\nSet to YES to allow duplicate requests to be registered with the MAT server.\n\n\n\n\nstatic void checkForDeferredDeeplinkWithTimeout(double timeout);\n\n\n\n\n\n\nCheck for a deferred deeplink entry point upon app installation.\n\n\n\n\nstatic void automateIapEventMeasurement(bool automate);\n\n\n\n\n\n\nEnable automatic measurement of app store in-app-purchase events. When enabled, your code should not explicitly measure events for successful purchases related to StoreKit to avoid event duplication.\n\n\n\n\nstatic void setFacebookEventLogging(bool logging, bool limit);\n\n\n\n\n\n\nSet whether the MAT events should also be logged to the Facebook SDK. This flag is ignored if the Facebook SDK is not present.\n\n\n\n\nstatic void setExistingUser(bool existingUser);\n\n\n\n\n\n\nSet whether this is an existing user or a new one. This is generally used to\ndistinguish users who were using previous versions of the app, prior to\nintegration of the MAT SDK. The default is to assume a new user.\n\n\n\n\nstatic void setAppleAdvertisingIdentifier(const std::string \nappleAdvertisingIdentifier, bool adTrackingEnabled);\n\n\n\n\n\n\nSet the Apple Advertising Identifier available in iOS 6.\n\n\n\n\nstatic void setAppleVendorIdentifier(const std::string \nappleVendorIdentifier);\n\n\n\n\n\n\nSet the Apple Vendor Identifier available in iOS 6.\n\n\n\n\nstatic void setCurrencyCode(const std::string \ncurrencyCode);\n\n\n\n\n\n\nSets the currency code.\n\n\n\n\nstatic void setJailbroken(bool jailbroken);\n\n\n\n\n\n\nSets the jailbroken device flag.\n\n\n\n\nstatic void setPackageName(const std::string \npackageName);\n\n\n\n\n\n\nSets the package name (bundle identifier).\n\n\n\n\nstatic void setShouldAutoDetectJailbroken(bool autoDetect);\n\n\n\n\n\n\nSpecifies if the sdk should auto detect if the iOS device is jailbroken.\n\n\n\n\nstatic void setShouldAutoGenerateAppleVendorIdentifier(bool autoGenerate);\n\n\n\n\n\n\nSpecifies if the sdk should pull the Apple Vendor Identifier from the device. Note that setting to false will clear any previously set value for the property.\n\n\n\n\nstatic void setSiteId(const std::string \nsiteId);\n\n\n\n\n\n\nSets the site ID.\n\n\n\n\nstatic void setTRUSTeId(const std::string \ntpid);\n\n\n\n\n\n\nSet the TRUSTe Trusted Preference Identifier (TPID).\n\n\n\n\nstatic void setUserEmail(const std::string \nuserEmail);\n\n\n\n\n\n\nSets the user's email address.\n\n\n\n\nstatic void setUserId(const std::string \nuserId);\n\n\n\n\n\n\nSets the user ID.\n\n\n\n\nstatic void setUserName(const std::string \nuserName);\n\n\n\n\n\n\nSets the user's name.\n\n\n\n\nstatic void setPhoneNumber(const std::string \nphoneNumber);\n\n\n\n\n\n\nSets the user's phone number.\n\n\n\n\nstatic void setFacebookUserId(const std::string \nfacebookUserId);\n\n\n\n\n\n\nSet user's Facebook ID.\n\n\n\n\nstatic void setTwitterUserId(const std::string \ntwitterUserId);\n\n\n\n\n\n\nSet user's Twitter ID.\n\n\n\n\nstatic void setGoogleUserId(const std::string \ngoogleUserId);\n\n\n\n\n\n\nSet user's Google ID.\n\n\n\n\nstatic void setAge(int userAge);\n\n\n\n\n\n\nSets the user's age.\n\n\n\n\nstatic void setGender(Gender userGender);\n\n\n\n\n\n\nSets the user's gender.\n\n\n\n\nstatic void setLatitude(double latitude, double longitude);\n\n\n\n\n\n\nSets the user's location.\n\n\n\n\nstatic void setLatitude(double latitude, double longitude, double altitude);\n\n\n\n\n\n\nSets the user's location including altitude.\n\n\n\n\nstatic void setAppAdTracking(bool enable);\n\n\n\n\n\n\nSet app-level ad-tracking.\n\n\n\n\nstatic void setPayingUser(bool isPayingUser);\n\n\n\n\n\n\nSet whether the user is generating revenue for the app or not. If measureEvent is called with a non-zero revenue, this is automatically set to YES.\n\n\n\n\nstatic void setPreloadDataForScript(const std::string \njsonString);\nstatic void setPreloadData(const TunePreloadData \npreloadData);\n\n\n\n\n\n\nSets publisher information for attribution.\n\n\n\n\nstatic std::string matId();\n\n\n\n\n\n\nGet the MAT ID for this installation (mat_id).\n\n\n\n\nstatic std::string openLogId();\n\n\n\n\n\n\nGet the MAT log ID for the first app open (open_log_id).\n\n\n\n\nstatic bool isPayingUser();\n\n\n\n\n\n\nGet whether the user is revenue-generating.\n\n\n\n\nstatic void measureSession();\n\n\n\n\n\n\nTo be called when an app opens; typically in the AppDelegate::applicationWillEnterForeground() event.\n\n\n\n\nstatic void measureEventName(const std::string \neventName);\n\n\n\n\n\n\nRecord an event for an Event Name.\n\n\n\n\nstatic void measureEventId(int eventId);\n\n\n\n\n\n\nRecord an event by providing the equivalent Event ID defined on the MobileAppTracking dashboard.\n\n\n\n\nstatic void measureEventForScript(const std::string \njsonString);\nstatic void measureEvent(const TuneEvent \nevent);\n\n\n\n\n\n\nRecord an event with a MATEvent.\n\n\n\n\nstatic void setUseCookieTracking(bool enable);\n\n\n\n\n\n\nSets whether or not to use cookie based tracking.\n\n\n\n\nstatic void setRedirectUrl(const std::string \nredirectUrl);\n\n\n\n\n\n\nSets a url to be used with app-to-app tracking so that the sdk can open the download (redirect) url. This is used in conjunction with the setTracking:advertiserId:offerId:publisherId:redirect: method.\n\n\n\n\nstatic void startAppToAppTracking(const std::string \ntargetAppPackageName,\n                                 const std::string \ntargetAppAdvertiserId,\n                                 const std::string \ntargetAdvertiserOfferId,\n                                 const std::string \ntargetAdvertiserPublisherId,\n                                 bool shouldRedirect);\n\n\n\n\n\n\nStart an app-to-app tracking session on the MAT server.\n\n\n\n\nstatic void applicationDidOpenURL(const std::string \nurlString, const std::string \nsourceApplication);\n\n\n\n\n\n\nRecord the URL and Source when an application is opened via a URL scheme.\nThis typically occurs during OAUTH or when an app exits and is returned\nto via a URL. The data will be sent to the HasOffers server when the next\nmeasureXXX method is called so that a Re-Engagement can be recorded.", 
            "title": "c++"
        }, 
        {
            "location": "/plugins/tune/v2-cpp/#tune", 
            "text": "", 
            "title": "Tune"
        }, 
        {
            "location": "/plugins/tune/v2-cpp/#integration", 
            "text": "Use the following command to install the SDKBOX Tune plugin, Make sure you setup SDKBOX installer correctly.  sdkbox import tune", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/tune/v2-cpp/#extra-steps", 
            "text": "Modify  YourGameName .java   Modify  proj.android/src/ package identifier / YourGameName .java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify the class to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . Example of what this might look like for you:   protected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }  Proguard (release, optional)   Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   Edit the file you specified to include the following:   -keep public class com.mobileapptracker.** {\n    public *;\n}\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Extra steps"
        }, 
        {
            "location": "/plugins/tune/v2-cpp/#configuration", 
            "text": "SDKBOX Installer will automatically inject a sample configuration to your  sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the Tune configuration, you need to replace TUNE ID  and  TUNE KEY   with your specific  Tune ID  account information.\nHere is an example adding  Tune :  Tune :{\n     id : TUNE ID ,\n     key : TUNE KEY ,\n     debug :false\n}", 
            "title": "Configuration"
        }, 
        {
            "location": "/plugins/tune/v2-cpp/#usage", 
            "text": "Initialize Tune  Initialize the plugin where appropriate in your code. We recommend to do this in the  AppDelegate::applicationDidFinishLaunching()  or  AppController:didFinishLaunchingWithOptions() . Make sure to include the appropriate headers.  init()  and  measureSession()  are required. Example:  #include  PluginTune/PluginTune.h \nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginTune::init();\n     sdkbox::PluginTune::measureSession();\n}  Using Tune  After initialization you can begin to use the Tune functionality. Tune uses a concept of  events  (also known as  MAT Native Event Types ). You log  events  that you care about and you can later view them using the web-based report viewer. Tune provides a structure for these events in their documentation. Example:  {\n    PluginTune::measureEventName( purchase );\n    PluginTune::measureEventId(1122334455);\n        TuneEvent event;\n    event.eventName =  purchase2 ;\n    event.refId     =  RJ1357 ;\n    event.searchString =  sweet crisp red apples ;\n    event.attribute1 =  crisp ;\n    event.attribute2 =  red ;\n    event.quantity = 3;\n    PluginTune::measureEvent(event);\n}  Notice that at the end of the  event   PluginTune::measureEvent(event)  was called. This takes care of logging our event.", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/tune/v2-cpp/#api-reference", 
            "text": "Methods  static void init();   initialize the plugin instance.   static void setDebugMode(bool enable);   Specifies that the server responses should include debug information.   static void setAllowDuplicateRequests(bool allow);   Set to YES to allow duplicate requests to be registered with the MAT server.   static void checkForDeferredDeeplinkWithTimeout(double timeout);   Check for a deferred deeplink entry point upon app installation.   static void automateIapEventMeasurement(bool automate);   Enable automatic measurement of app store in-app-purchase events. When enabled, your code should not explicitly measure events for successful purchases related to StoreKit to avoid event duplication.   static void setFacebookEventLogging(bool logging, bool limit);   Set whether the MAT events should also be logged to the Facebook SDK. This flag is ignored if the Facebook SDK is not present.   static void setExistingUser(bool existingUser);   Set whether this is an existing user or a new one. This is generally used to\ndistinguish users who were using previous versions of the app, prior to\nintegration of the MAT SDK. The default is to assume a new user.   static void setAppleAdvertisingIdentifier(const std::string  appleAdvertisingIdentifier, bool adTrackingEnabled);   Set the Apple Advertising Identifier available in iOS 6.   static void setAppleVendorIdentifier(const std::string  appleVendorIdentifier);   Set the Apple Vendor Identifier available in iOS 6.   static void setCurrencyCode(const std::string  currencyCode);   Sets the currency code.   static void setJailbroken(bool jailbroken);   Sets the jailbroken device flag.   static void setPackageName(const std::string  packageName);   Sets the package name (bundle identifier).   static void setShouldAutoDetectJailbroken(bool autoDetect);   Specifies if the sdk should auto detect if the iOS device is jailbroken.   static void setShouldAutoGenerateAppleVendorIdentifier(bool autoGenerate);   Specifies if the sdk should pull the Apple Vendor Identifier from the device. Note that setting to false will clear any previously set value for the property.   static void setSiteId(const std::string  siteId);   Sets the site ID.   static void setTRUSTeId(const std::string  tpid);   Set the TRUSTe Trusted Preference Identifier (TPID).   static void setUserEmail(const std::string  userEmail);   Sets the user's email address.   static void setUserId(const std::string  userId);   Sets the user ID.   static void setUserName(const std::string  userName);   Sets the user's name.   static void setPhoneNumber(const std::string  phoneNumber);   Sets the user's phone number.   static void setFacebookUserId(const std::string  facebookUserId);   Set user's Facebook ID.   static void setTwitterUserId(const std::string  twitterUserId);   Set user's Twitter ID.   static void setGoogleUserId(const std::string  googleUserId);   Set user's Google ID.   static void setAge(int userAge);   Sets the user's age.   static void setGender(Gender userGender);   Sets the user's gender.   static void setLatitude(double latitude, double longitude);   Sets the user's location.   static void setLatitude(double latitude, double longitude, double altitude);   Sets the user's location including altitude.   static void setAppAdTracking(bool enable);   Set app-level ad-tracking.   static void setPayingUser(bool isPayingUser);   Set whether the user is generating revenue for the app or not. If measureEvent is called with a non-zero revenue, this is automatically set to YES.   static void setPreloadDataForScript(const std::string  jsonString);\nstatic void setPreloadData(const TunePreloadData  preloadData);   Sets publisher information for attribution.   static std::string matId();   Get the MAT ID for this installation (mat_id).   static std::string openLogId();   Get the MAT log ID for the first app open (open_log_id).   static bool isPayingUser();   Get whether the user is revenue-generating.   static void measureSession();   To be called when an app opens; typically in the AppDelegate::applicationWillEnterForeground() event.   static void measureEventName(const std::string  eventName);   Record an event for an Event Name.   static void measureEventId(int eventId);   Record an event by providing the equivalent Event ID defined on the MobileAppTracking dashboard.   static void measureEventForScript(const std::string  jsonString);\nstatic void measureEvent(const TuneEvent  event);   Record an event with a MATEvent.   static void setUseCookieTracking(bool enable);   Sets whether or not to use cookie based tracking.   static void setRedirectUrl(const std::string  redirectUrl);   Sets a url to be used with app-to-app tracking so that the sdk can open the download (redirect) url. This is used in conjunction with the setTracking:advertiserId:offerId:publisherId:redirect: method.   static void startAppToAppTracking(const std::string  targetAppPackageName,\n                                 const std::string  targetAppAdvertiserId,\n                                 const std::string  targetAdvertiserOfferId,\n                                 const std::string  targetAdvertiserPublisherId,\n                                 bool shouldRedirect);   Start an app-to-app tracking session on the MAT server.   static void applicationDidOpenURL(const std::string  urlString, const std::string  sourceApplication);   Record the URL and Source when an application is opened via a URL scheme.\nThis typically occurs during OAUTH or when an app exits and is returned\nto via a URL. The data will be sent to the HasOffers server when the next\nmeasureXXX method is called so that a Re-Engagement can be recorded.", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/tune/v2-js/", 
            "text": "Tune\n\n\nIntegration\n\n\nUse the following command to install the SDKBOX Tune plugin, Make sure you setup SDKBOX installer correctly.\n\n\nsdkbox import tune\n\n\n\n\nExtra steps\n\n\nModify \nYourGameName\n.java\n\n\n\n\nModify \nproj.android/src/\npackage identifier\n/\nYourGameName\n.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify the class to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. Example of what this might look like for you:\n\n\n\n\nprotected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (release, optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n-keep public class com.mobileapptracker.** {\n    public *;\n}\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.\n\n\nConfiguration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nsdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the Tune configuration, you need to replace\n\nTUNE ID\n and \nTUNE KEY\n  with your specific \nTune ID\n account information.\nHere is an example adding \nTune\n:\n\n\nTune\n:{\n    \nid\n:\nTUNE ID\n,\n    \nkey\n:\nTUNE KEY\n,\n    \ndebug\n:false\n}\n\n\n\n\nUsage\n\n\nInitialize Tune\n\n\n\n\nInitialize the plugin by calling \ninit()\n where appropriate in your code. We\nrecommend to do this in the \napp.js\n. Example:\n\n\n\n\nsdkbox.PluginTune.init();\n\n\n\n\n\n\nModify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n to include the following headers:\n\n\n\n\n#include \nPluginTuneJS.hpp\n\n#include \nPluginTuneJSHelper.h\n\n\n\n\n\n\n\nModify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n make sure to call:\n\n\n\n\nsc-\naddRegisterCallback(register_all_PluginTuneJS);\nsc-\naddRegisterCallback(register_PluginTuneJs_helper);\n\n\n\n\nThis registers the Javascript callbacks.\n\n\nUsing Tune\n\n\nAfter initialization you can begin to use the Tune functionality. Tune uses a concept of \nevents\n (also known as \nMAT Native Event Types\n). You log \nevents\n that you care about and you can later view them using the web-based report viewer. Tune provides a structure for these events in their documentation. Example:\n\n\nsdkbox.PluginTune.measureEventName(\nlogin\n);\nsdkbox.PluginTune.measureEventId(0123456789);\n\nvar event = {};\nevent.eventName = \npurchase\n;\nevent.refId = \nRJ1357\n;\nevent.searchString = \nsweet srisp red apples\n;\nevent.attribute1 = \nsrisp\n;\nevent.attribute2 = \nred\n;\nevent.quantity = 3;\nsdkbox.PluginTune.measureEventForScript(JSON.stringify(event));\n\n\n\n\nCatch Tune events (optional)\n\n\nThis allows you to catch the \nTune\n events so that you can perform operations based upon responses. A simple example might look like this:\n\n\nsdkbox.PluginTune.setListener({\n  onEnqueuedAction: function(data) {},\n  onSucceed: function(data) {},\n  onFailed: function(data) {},\n  onReceiveDeeplink: function(data) {}\n});\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginTune.init();\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nsdkbox.PluginTune.setDebugMode(enable);\n\n\n\n\n\n\nSpecifies that the server responses should include debug information.\n\n\n\n\nsdkbox.PluginTune.setAllowDuplicateRequests(allow);\n\n\n\n\n\n\nSet to YES to allow duplicate requests to be registered with the MAT server.\n\n\n\n\nsdkbox.PluginTune.checkForDeferredDeeplinkWithTimeout(timeout);\n\n\n\n\n\n\nCheck for a deferred deeplink entry point upon app installation.\n\n\n\n\nsdkbox.PluginTune.automateIapEventMeasurement(automate);\n\n\n\n\n\n\nEnable automatic measurement of app store in-app-purchase events. When enabled, your code should not explicitly measure events for successful purchases related to StoreKit to avoid event duplication.\n\n\n\n\nsdkbox.PluginTune.setFacebookEventLogging(logging, limit);\n\n\n\n\n\n\nSet whether the MAT events should also be logged to the Facebook SDK. This flag is ignored if the Facebook SDK is not present.\n\n\n\n\nsdkbox.PluginTune.setExistingUser(existingUser);\n\n\n\n\n\n\nSet whether this is an existing user or a new one. This is generally used to\ndistinguish users who were using previous versions of the app, prior to\nintegration of the MAT SDK. The default is to assume a new user.\n\n\n\n\nsdkbox.PluginTune.setAppleAdvertisingIdentifier(appleAdvertisingIdentifier, adTrackingEnabled);\n\n\n\n\n\n\nSet the Apple Advertising Identifier available in iOS 6.\n\n\n\n\nsdkbox.PluginTune.setAppleVendorIdentifier(appleVendorIdentifier);\n\n\n\n\n\n\nSet the Apple Vendor Identifier available in iOS 6.\n\n\n\n\nsdkbox.PluginTune.setCurrencyCode(currencyCode);\n\n\n\n\n\n\nSets the currency code.\n\n\n\n\nsdkbox.PluginTune.setJailbroken(jailbroken);\n\n\n\n\n\n\nSets the jailbroken device flag.\n\n\n\n\nsdkbox.PluginTune.setPackageName(packageName);\n\n\n\n\n\n\nSets the package name (bundle identifier).\n\n\n\n\nsdkbox.PluginTune.setShouldAutoDetectJailbroken(autoDetect);\n\n\n\n\n\n\nSpecifies if the sdk should auto detect if the iOS device is jailbroken.\n\n\n\n\nsdkbox.PluginTune.setShouldAutoGenerateAppleVendorIdentifier(autoGenerate);\n\n\n\n\n\n\nSpecifies if the sdk should pull the Apple Vendor Identifier from the device. Note that setting to false will clear any previously set value for the property.\n\n\n\n\nsdkbox.PluginTune.setSiteId(siteId);\n\n\n\n\n\n\nSets the site ID.\n\n\n\n\nsdkbox.PluginTune.setTRUSTeId(tpid);\n\n\n\n\n\n\nSet the TRUSTe Trusted Preference Identifier (TPID).\n\n\n\n\nsdkbox.PluginTune.setUserEmail(userEmail);\n\n\n\n\n\n\nSets the user's email address.\n\n\n\n\nsdkbox.PluginTune.setUserId(userId);\n\n\n\n\n\n\nSets the user ID.\n\n\n\n\nsdkbox.PluginTune.setUserName(userName);\n\n\n\n\n\n\nSets the user's name.\n\n\n\n\nsdkbox.PluginTune.setPhoneNumber(phoneNumber);\n\n\n\n\n\n\nSets the user's phone number.\n\n\n\n\nsdkbox.PluginTune.setFacebookUserId(facebookUserId);\n\n\n\n\n\n\nSet user's Facebook ID.\n\n\n\n\nsdkbox.PluginTune.setTwitterUserId(twitterUserId);\n\n\n\n\n\n\nSet user's Twitter ID.\n\n\n\n\nsdkbox.PluginTune.setGoogleUserId(googleUserId);\n\n\n\n\n\n\nSet user's Google ID.\n\n\n\n\nsdkbox.PluginTune.setAge(long userAge);\n\n\n\n\n\n\nSets the user's age.\n\n\n\n\nsdkbox.PluginTune.setGender(Gender userGender);\n\n\n\n\n\n\nSets the user's gender.\n\n\n\n\nsdkbox.PluginTune.setLatitude(latitude, longitude);\n\n\n\n\n\n\nSets the user's location.\n\n\n\n\nsdkbox.PluginTune.setLatitude(latitude, longitude, altitude);\n\n\n\n\n\n\nSets the user's location including altitude.\n\n\n\n\nsdkbox.PluginTune.setAppAdTracking(enable);\n\n\n\n\n\n\nSet app-level ad-tracking.\n\n\n\n\nsdkbox.PluginTune.setPayingUser(isPayingUser);\n\n\n\n\n\n\nSet whether the user is generating revenue for the app or not. If measureEvent is called with a non-zero revenue, this is automatically set to YES.\n\n\n\n\nsdkbox.PluginTune.setPreloadDataForScript(jsonString);\nsdkbox.PluginTune.setPreloadData(preloadData);\n\n\n\n\n\n\nSets publisher information for attribution.\n\n\n\n\nsdkbox.PluginTune.matId();\n\n\n\n\n\n\nGet the MAT ID for this installation (mat_id).\n\n\n\n\nsdkbox.PluginTune.openLogId();\n\n\n\n\n\n\nGet the MAT log ID for the first app open (open_log_id).\n\n\n\n\nsdkbox.PluginTune.isPayingUser();\n\n\n\n\n\n\nGet whether the user is revenue-generating.\n\n\n\n\nsdkbox.PluginTune.measureSession();\n\n\n\n\n\n\nTo be called when an app opens; typically in the AppDelegate::applicationWillEnterForeground() event.\n\n\n\n\nsdkbox.PluginTune.measureEventName(eventName);\n\n\n\n\n\n\nRecord an event for an Event Name.\n\n\n\n\nsdkbox.PluginTune.measureEventId(eventId);\n\n\n\n\n\n\nRecord an event by providing the equivalent Event ID defined on the MobileAppTracking dashboard.\n\n\n\n\nsdkbox.PluginTune.measureEventForScript(jsonString);\nsdkbox.PluginTune.measureEvent(event);\n\n\n\n\n\n\nRecord an event with a MATEvent.\n\n\n\n\nsdkbox.PluginTune.setUseCookieTracking(enable);\n\n\n\n\n\n\nSets whether or not to use cookie based tracking.\n\n\n\n\nsdkbox.PluginTune.setRedirectUrl(redirectUrl);\n\n\n\n\n\n\nSets a url to be used with app-to-app tracking so that the sdk can open the download (redirect) url. This is used in conjunction with the setTracking:advertiserId:offerId:publisherId:redirect: method.\n\n\n\n\nsdkbox.PluginTune.startAppToAppTracking(targetAppPackageName,\n                                 targetAppAdvertiserId,\n                                 targetAdvertiserOfferId,\n                                 targetAdvertiserPublisherId,\n                                 shouldRedirect);\n\n\n\n\n\n\nStart an app-to-app tracking session on the MAT server.\n\n\n\n\nsdkbox.PluginTune.applicationDidOpenURL(urlString, sourceApplication);\n\n\n\n\n\n\nRecord the URL and Source when an application is opened via a URL scheme.\nThis typically occurs during OAUTH or when an app exits and is returned\nto via a URL. The data will be sent to the HasOffers server when the next\nmeasureXXX method is called so that a Re-Engagement can be recorded.", 
            "title": "js"
        }, 
        {
            "location": "/plugins/tune/v2-js/#tune", 
            "text": "", 
            "title": "Tune"
        }, 
        {
            "location": "/plugins/tune/v2-js/#integration", 
            "text": "Use the following command to install the SDKBOX Tune plugin, Make sure you setup SDKBOX installer correctly.  sdkbox import tune", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/tune/v2-js/#extra-steps", 
            "text": "Modify  YourGameName .java   Modify  proj.android/src/ package identifier / YourGameName .java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify the class to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . Example of what this might look like for you:   protected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }  Proguard (release, optional)   Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   Edit the file you specified to include the following:   -keep public class com.mobileapptracker.** {\n    public *;\n}\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Extra steps"
        }, 
        {
            "location": "/plugins/tune/v2-js/#configuration", 
            "text": "SDKBOX Installer will automatically inject a sample configuration to your  sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the Tune configuration, you need to replace TUNE ID  and  TUNE KEY   with your specific  Tune ID  account information.\nHere is an example adding  Tune :  Tune :{\n     id : TUNE ID ,\n     key : TUNE KEY ,\n     debug :false\n}", 
            "title": "Configuration"
        }, 
        {
            "location": "/plugins/tune/v2-js/#usage", 
            "text": "Initialize Tune   Initialize the plugin by calling  init()  where appropriate in your code. We\nrecommend to do this in the  app.js . Example:   sdkbox.PluginTune.init();   Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  to include the following headers:   #include  PluginTuneJS.hpp \n#include  PluginTuneJSHelper.h    Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  make sure to call:   sc- addRegisterCallback(register_all_PluginTuneJS);\nsc- addRegisterCallback(register_PluginTuneJs_helper);  This registers the Javascript callbacks.  Using Tune  After initialization you can begin to use the Tune functionality. Tune uses a concept of  events  (also known as  MAT Native Event Types ). You log  events  that you care about and you can later view them using the web-based report viewer. Tune provides a structure for these events in their documentation. Example:  sdkbox.PluginTune.measureEventName( login );\nsdkbox.PluginTune.measureEventId(0123456789);\n\nvar event = {};\nevent.eventName =  purchase ;\nevent.refId =  RJ1357 ;\nevent.searchString =  sweet srisp red apples ;\nevent.attribute1 =  srisp ;\nevent.attribute2 =  red ;\nevent.quantity = 3;\nsdkbox.PluginTune.measureEventForScript(JSON.stringify(event));  Catch Tune events (optional)  This allows you to catch the  Tune  events so that you can perform operations based upon responses. A simple example might look like this:  sdkbox.PluginTune.setListener({\n  onEnqueuedAction: function(data) {},\n  onSucceed: function(data) {},\n  onFailed: function(data) {},\n  onReceiveDeeplink: function(data) {}\n});", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/tune/v2-js/#api-reference", 
            "text": "Methods  sdkbox.PluginTune.init();   initialize the plugin instance.   sdkbox.PluginTune.setDebugMode(enable);   Specifies that the server responses should include debug information.   sdkbox.PluginTune.setAllowDuplicateRequests(allow);   Set to YES to allow duplicate requests to be registered with the MAT server.   sdkbox.PluginTune.checkForDeferredDeeplinkWithTimeout(timeout);   Check for a deferred deeplink entry point upon app installation.   sdkbox.PluginTune.automateIapEventMeasurement(automate);   Enable automatic measurement of app store in-app-purchase events. When enabled, your code should not explicitly measure events for successful purchases related to StoreKit to avoid event duplication.   sdkbox.PluginTune.setFacebookEventLogging(logging, limit);   Set whether the MAT events should also be logged to the Facebook SDK. This flag is ignored if the Facebook SDK is not present.   sdkbox.PluginTune.setExistingUser(existingUser);   Set whether this is an existing user or a new one. This is generally used to\ndistinguish users who were using previous versions of the app, prior to\nintegration of the MAT SDK. The default is to assume a new user.   sdkbox.PluginTune.setAppleAdvertisingIdentifier(appleAdvertisingIdentifier, adTrackingEnabled);   Set the Apple Advertising Identifier available in iOS 6.   sdkbox.PluginTune.setAppleVendorIdentifier(appleVendorIdentifier);   Set the Apple Vendor Identifier available in iOS 6.   sdkbox.PluginTune.setCurrencyCode(currencyCode);   Sets the currency code.   sdkbox.PluginTune.setJailbroken(jailbroken);   Sets the jailbroken device flag.   sdkbox.PluginTune.setPackageName(packageName);   Sets the package name (bundle identifier).   sdkbox.PluginTune.setShouldAutoDetectJailbroken(autoDetect);   Specifies if the sdk should auto detect if the iOS device is jailbroken.   sdkbox.PluginTune.setShouldAutoGenerateAppleVendorIdentifier(autoGenerate);   Specifies if the sdk should pull the Apple Vendor Identifier from the device. Note that setting to false will clear any previously set value for the property.   sdkbox.PluginTune.setSiteId(siteId);   Sets the site ID.   sdkbox.PluginTune.setTRUSTeId(tpid);   Set the TRUSTe Trusted Preference Identifier (TPID).   sdkbox.PluginTune.setUserEmail(userEmail);   Sets the user's email address.   sdkbox.PluginTune.setUserId(userId);   Sets the user ID.   sdkbox.PluginTune.setUserName(userName);   Sets the user's name.   sdkbox.PluginTune.setPhoneNumber(phoneNumber);   Sets the user's phone number.   sdkbox.PluginTune.setFacebookUserId(facebookUserId);   Set user's Facebook ID.   sdkbox.PluginTune.setTwitterUserId(twitterUserId);   Set user's Twitter ID.   sdkbox.PluginTune.setGoogleUserId(googleUserId);   Set user's Google ID.   sdkbox.PluginTune.setAge(long userAge);   Sets the user's age.   sdkbox.PluginTune.setGender(Gender userGender);   Sets the user's gender.   sdkbox.PluginTune.setLatitude(latitude, longitude);   Sets the user's location.   sdkbox.PluginTune.setLatitude(latitude, longitude, altitude);   Sets the user's location including altitude.   sdkbox.PluginTune.setAppAdTracking(enable);   Set app-level ad-tracking.   sdkbox.PluginTune.setPayingUser(isPayingUser);   Set whether the user is generating revenue for the app or not. If measureEvent is called with a non-zero revenue, this is automatically set to YES.   sdkbox.PluginTune.setPreloadDataForScript(jsonString);\nsdkbox.PluginTune.setPreloadData(preloadData);   Sets publisher information for attribution.   sdkbox.PluginTune.matId();   Get the MAT ID for this installation (mat_id).   sdkbox.PluginTune.openLogId();   Get the MAT log ID for the first app open (open_log_id).   sdkbox.PluginTune.isPayingUser();   Get whether the user is revenue-generating.   sdkbox.PluginTune.measureSession();   To be called when an app opens; typically in the AppDelegate::applicationWillEnterForeground() event.   sdkbox.PluginTune.measureEventName(eventName);   Record an event for an Event Name.   sdkbox.PluginTune.measureEventId(eventId);   Record an event by providing the equivalent Event ID defined on the MobileAppTracking dashboard.   sdkbox.PluginTune.measureEventForScript(jsonString);\nsdkbox.PluginTune.measureEvent(event);   Record an event with a MATEvent.   sdkbox.PluginTune.setUseCookieTracking(enable);   Sets whether or not to use cookie based tracking.   sdkbox.PluginTune.setRedirectUrl(redirectUrl);   Sets a url to be used with app-to-app tracking so that the sdk can open the download (redirect) url. This is used in conjunction with the setTracking:advertiserId:offerId:publisherId:redirect: method.   sdkbox.PluginTune.startAppToAppTracking(targetAppPackageName,\n                                 targetAppAdvertiserId,\n                                 targetAdvertiserOfferId,\n                                 targetAdvertiserPublisherId,\n                                 shouldRedirect);   Start an app-to-app tracking session on the MAT server.   sdkbox.PluginTune.applicationDidOpenURL(urlString, sourceApplication);   Record the URL and Source when an application is opened via a URL scheme.\nThis typically occurs during OAUTH or when an app exits and is returned\nto via a URL. The data will be sent to the HasOffers server when the next\nmeasureXXX method is called so that a Re-Engagement can be recorded.", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/tune/v2-lua/", 
            "text": "Tune\n\n\nIntegration\n\n\nUse the following command to install the SDKBOX Tune plugin, Make sure you setup SDKBOX installer correctly.\n\n\nsdkbox import tune\n\n\n\n\nExtra steps\n\n\nModify \nYourGameName\n.java\n\n\n\n\nModify \nproj.android/src/\npackage identifier\n/\nYourGameName\n.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify the class to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. Example of what this might look like for you:\n\n\n\n\nprotected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (release, optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n-keep public class com.mobileapptracker.** {\n    public *;\n}\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.\n\n\nConfiguration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nsdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the Tune configuration, you need to replace\n\nTUNE ID\n and \nTUNE KEY\n  with your specific \nTune ID\n account information.\nHere is an example adding \nTune\n:\n\n\nTune\n:{\n    \nid\n:\nTUNE ID\n,\n    \nkey\n:\nTUNE KEY\n,\n    \ndebug\n:false\n}\n\n\n\n\nUsage\n\n\nModify Lua Code\n\n\n\n\nmodify \nAppDelegate.cpp\n to include the following headers:\n\n\n\n\n#include \nPluginTuneLua.hpp\n\n#include \nPluginTuneLuaHelper.h\n\n\n\n\n\nModify \nlua_module_register.h\n to include a call to register \nTune\n with Lua. Note this takes a parameter of \nlua_State*\n:\n\n\nlua_State* tolua_s = pStack-\ngetLuaState();\nregister_all_PluginTuneLua(tolua_s);\nregister_all_PluginTuneLua_helper(tolua_s);\ntolua_extensions_ccb_open(tolua_s);\n\n\n\n\nInitialize Tune\n\n\n\n\nmodify your Lua code to \ninit()\n the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.\n\n\n\n\nsdkbox.PluginTune:init();\n\n\n\n\nUsing Tune\n\n\nAfter initialization you can begin to use the Tune functionality. Tune uses a concept of \nevents\n (also known as \nMAT Native Event Types\n). You log \nevents\n that you care about and you can later view them using the web-based report viewer. Tune provides a structure for these events in their documentation. Example:\n\n\nsdkbox.PluginTune:measureEventName(\nlogin\n);\nsdkbox.PluginTune:measureEventId(0123456789);\nlocal event = {}\nevent.eventName = \npurchase\n\nevent.refId = \nRJ1357\n\nevent.searchString = \nsweet srisp red apples\n\nevent.attribute1 = \nsrisp\n\nevent.attribute2 = \nred\n\nevent.quantity = 3\nsdkbox.PluginTune:measureEventForScript(json.encode(event))\n\n\n\n\nCatch Tune events (optional)\n\n\nThis allows you to catch the \nTune\n events so that you can perform operations based upon responses. A simple example might look like this:\n\n\nsdkbox.PluginTune:setListener(function(eventName, eventData)\n       print(eventName, eventData)\n   end)\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginTune:init();\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nsdkbox.PluginTune:setDebugMode(enable);\n\n\n\n\n\n\nSpecifies that the server responses should include debug information.\n\n\n\n\nsdkbox.PluginTune:setAllowDuplicateRequests(allow);\n\n\n\n\n\n\nSet to YES to allow duplicate requests to be registered with the MAT server.\n\n\n\n\nsdkbox.PluginTune:checkForDeferredDeeplinkWithTimeout(timeout);\n\n\n\n\n\n\nCheck for a deferred deeplink entry point upon app installation.\n\n\n\n\nsdkbox.PluginTune:automateIapEventMeasurement(automate);\n\n\n\n\n\n\nEnable automatic measurement of app store in-app-purchase events. When enabled, your code should not explicitly measure events for successful purchases related to StoreKit to avoid event duplication.\n\n\n\n\nsdkbox.PluginTune:setFacebookEventLogging(logging, limit);\n\n\n\n\n\n\nSet whether the MAT events should also be logged to the Facebook SDK. This flag is ignored if the Facebook SDK is not present.\n\n\n\n\nsdkbox.PluginTune:setExistingUser(existingUser);\n\n\n\n\n\n\nSet whether this is an existing user or a new one. This is generally used to\ndistinguish users who were using previous versions of the app, prior to\nintegration of the MAT SDK. The default is to assume a new user.\n\n\n\n\nsdkbox.PluginTune:setAppleAdvertisingIdentifier(appleAdvertisingIdentifier, adTrackingEnabled);\n\n\n\n\n\n\nSet the Apple Advertising Identifier available in iOS 6.\n\n\n\n\nsdkbox.PluginTune:setAppleVendorIdentifier(appleVendorIdentifier);\n\n\n\n\n\n\nSet the Apple Vendor Identifier available in iOS 6.\n\n\n\n\nsdkbox.PluginTune:setCurrencyCode(currencyCode);\n\n\n\n\n\n\nSets the currency code.\n\n\n\n\nsdkbox.PluginTune:setJailbroken(jailbroken);\n\n\n\n\n\n\nSets the jailbroken device flag.\n\n\n\n\nsdkbox.PluginTune:setPackageName(packageName);\n\n\n\n\n\n\nSets the package name (bundle identifier).\n\n\n\n\nsdkbox.PluginTune:setShouldAutoDetectJailbroken(autoDetect);\n\n\n\n\n\n\nSpecifies if the sdk should auto detect if the iOS device is jailbroken.\n\n\n\n\nsdkbox.PluginTune:setShouldAutoGenerateAppleVendorIdentifier(autoGenerate);\n\n\n\n\n\n\nSpecifies if the sdk should pull the Apple Vendor Identifier from the device. Note that setting to false will clear any previously set value for the property.\n\n\n\n\nsdkbox.PluginTune:setSiteId(siteId);\n\n\n\n\n\n\nSets the site ID.\n\n\n\n\nsdkbox.PluginTune:setTRUSTeId(tpid);\n\n\n\n\n\n\nSet the TRUSTe Trusted Preference Identifier (TPID).\n\n\n\n\nsdkbox.PluginTune:setUserEmail(userEmail);\n\n\n\n\n\n\nSets the user's email address.\n\n\n\n\nsdkbox.PluginTune:setUserId(userId);\n\n\n\n\n\n\nSets the user ID.\n\n\n\n\nsdkbox.PluginTune:setUserName(userName);\n\n\n\n\n\n\nSets the user's name.\n\n\n\n\nsdkbox.PluginTune:setPhoneNumber(phoneNumber);\n\n\n\n\n\n\nSets the user's phone number.\n\n\n\n\nsdkbox.PluginTune:setFacebookUserId(facebookUserId);\n\n\n\n\n\n\nSet user's Facebook ID.\n\n\n\n\nsdkbox.PluginTune:setTwitterUserId(twitterUserId);\n\n\n\n\n\n\nSet user's Twitter ID.\n\n\n\n\nsdkbox.PluginTune:setGoogleUserId(googleUserId);\n\n\n\n\n\n\nSet user's Google ID.\n\n\n\n\nsdkbox.PluginTune:setAge(long userAge);\n\n\n\n\n\n\nSets the user's age.\n\n\n\n\nsdkbox.PluginTune:setGender(Gender userGender);\n\n\n\n\n\n\nSets the user's gender.\n\n\n\n\nsdkbox.PluginTune:setLatitude(latitude, longitude);\n\n\n\n\n\n\nSets the user's location.\n\n\n\n\nsdkbox.PluginTune:setLatitude(latitude, longitude, altitude);\n\n\n\n\n\n\nSets the user's location including altitude.\n\n\n\n\nsdkbox.PluginTune:setAppAdTracking(enable);\n\n\n\n\n\n\nSet app-level ad-tracking.\n\n\n\n\nsdkbox.PluginTune:setPayingUser(isPayingUser);\n\n\n\n\n\n\nSet whether the user is generating revenue for the app or not. If measureEvent is called with a non-zero revenue, this is automatically set to YES.\n\n\n\n\nsdkbox.PluginTune:setPreloadData(jsonString);\n\n\n\n\n\n\nSets publisher information for attribution.\n\n\n\n\nsdkbox.PluginTune:matId();\n\n\n\n\n\n\nGet the MAT ID for this installation (mat_id).\n\n\n\n\nsdkbox.PluginTune:openLogId();\n\n\n\n\n\n\nGet the MAT log ID for the first app open (open_log_id).\n\n\n\n\nsdkbox.PluginTune:isPayingUser();\n\n\n\n\n\n\nGet whether the user is revenue-generating.\n\n\n\n\nsdkbox.PluginTune:measureSession();\n\n\n\n\n\n\nTo be called when an app opens; typically in the AppDelegate::applicationWillEnterForeground() event.\n\n\n\n\nsdkbox.PluginTune:measureEventName(eventName);\n\n\n\n\n\n\nRecord an event for an Event Name.\n\n\n\n\nsdkbox.PluginTune:measureEventId(eventId);\n\n\n\n\n\n\nRecord an event by providing the equivalent Event ID defined on the MobileAppTracking dashboard.\n\n\n\n\nsdkbox.PluginTune:measureEvent(jsonString);\n\n\n\n\n\n\nRecord an event with a MATEvent.\n\n\n\n\nsdkbox.PluginTune:setUseCookieTracking(enable);\n\n\n\n\n\n\nSets whether or not to use cookie based tracking.\n\n\n\n\nsdkbox.PluginTune:setRedirectUrl(redirectUrl);\n\n\n\n\n\n\nSets a url to be used with app-to-app tracking so that the sdk can open the download (redirect) url. This is used in conjunction with the setTracking:advertiserId:offerId:publisherId:redirect: method.\n\n\n\n\nsdkbox.PluginTune:startAppToAppTracking(targetAppPackageName,\n                                 targetAppAdvertiserId,\n                                 targetAdvertiserOfferId,\n                                 targetAdvertiserPublisherId,\n                                 shouldRedirect);\n\n\n\n\n\n\nStart an app-to-app tracking session on the MAT server.\n\n\n\n\nsdkbox.PluginTune:applicationDidOpenURL(urlString, sourceApplication);\n\n\n\n\n\n\nRecord the URL and Source when an application is opened via a URL scheme.\nThis typically occurs during OAUTH or when an app exits and is returned\nto via a URL. The data will be sent to the HasOffers server when the next\nmeasureXXX method is called so that a Re-Engagement can be recorded.", 
            "title": "lua"
        }, 
        {
            "location": "/plugins/tune/v2-lua/#tune", 
            "text": "", 
            "title": "Tune"
        }, 
        {
            "location": "/plugins/tune/v2-lua/#integration", 
            "text": "Use the following command to install the SDKBOX Tune plugin, Make sure you setup SDKBOX installer correctly.  sdkbox import tune", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/tune/v2-lua/#extra-steps", 
            "text": "Modify  YourGameName .java   Modify  proj.android/src/ package identifier / YourGameName .java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify the class to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . Example of what this might look like for you:   protected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }  Proguard (release, optional)   Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   Edit the file you specified to include the following:   -keep public class com.mobileapptracker.** {\n    public *;\n}\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Extra steps"
        }, 
        {
            "location": "/plugins/tune/v2-lua/#configuration", 
            "text": "SDKBOX Installer will automatically inject a sample configuration to your  sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the Tune configuration, you need to replace TUNE ID  and  TUNE KEY   with your specific  Tune ID  account information.\nHere is an example adding  Tune :  Tune :{\n     id : TUNE ID ,\n     key : TUNE KEY ,\n     debug :false\n}", 
            "title": "Configuration"
        }, 
        {
            "location": "/plugins/tune/v2-lua/#usage", 
            "text": "Modify Lua Code   modify  AppDelegate.cpp  to include the following headers:   #include  PluginTuneLua.hpp \n#include  PluginTuneLuaHelper.h   Modify  lua_module_register.h  to include a call to register  Tune  with Lua. Note this takes a parameter of  lua_State* :  lua_State* tolua_s = pStack- getLuaState();\nregister_all_PluginTuneLua(tolua_s);\nregister_all_PluginTuneLua_helper(tolua_s);\ntolua_extensions_ccb_open(tolua_s);  Initialize Tune   modify your Lua code to  init()  the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.   sdkbox.PluginTune:init();  Using Tune  After initialization you can begin to use the Tune functionality. Tune uses a concept of  events  (also known as  MAT Native Event Types ). You log  events  that you care about and you can later view them using the web-based report viewer. Tune provides a structure for these events in their documentation. Example:  sdkbox.PluginTune:measureEventName( login );\nsdkbox.PluginTune:measureEventId(0123456789);\nlocal event = {}\nevent.eventName =  purchase \nevent.refId =  RJ1357 \nevent.searchString =  sweet srisp red apples \nevent.attribute1 =  srisp \nevent.attribute2 =  red \nevent.quantity = 3\nsdkbox.PluginTune:measureEventForScript(json.encode(event))  Catch Tune events (optional)  This allows you to catch the  Tune  events so that you can perform operations based upon responses. A simple example might look like this:  sdkbox.PluginTune:setListener(function(eventName, eventData)\n       print(eventName, eventData)\n   end)", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/tune/v2-lua/#api-reference", 
            "text": "Methods  sdkbox.PluginTune:init();   initialize the plugin instance.   sdkbox.PluginTune:setDebugMode(enable);   Specifies that the server responses should include debug information.   sdkbox.PluginTune:setAllowDuplicateRequests(allow);   Set to YES to allow duplicate requests to be registered with the MAT server.   sdkbox.PluginTune:checkForDeferredDeeplinkWithTimeout(timeout);   Check for a deferred deeplink entry point upon app installation.   sdkbox.PluginTune:automateIapEventMeasurement(automate);   Enable automatic measurement of app store in-app-purchase events. When enabled, your code should not explicitly measure events for successful purchases related to StoreKit to avoid event duplication.   sdkbox.PluginTune:setFacebookEventLogging(logging, limit);   Set whether the MAT events should also be logged to the Facebook SDK. This flag is ignored if the Facebook SDK is not present.   sdkbox.PluginTune:setExistingUser(existingUser);   Set whether this is an existing user or a new one. This is generally used to\ndistinguish users who were using previous versions of the app, prior to\nintegration of the MAT SDK. The default is to assume a new user.   sdkbox.PluginTune:setAppleAdvertisingIdentifier(appleAdvertisingIdentifier, adTrackingEnabled);   Set the Apple Advertising Identifier available in iOS 6.   sdkbox.PluginTune:setAppleVendorIdentifier(appleVendorIdentifier);   Set the Apple Vendor Identifier available in iOS 6.   sdkbox.PluginTune:setCurrencyCode(currencyCode);   Sets the currency code.   sdkbox.PluginTune:setJailbroken(jailbroken);   Sets the jailbroken device flag.   sdkbox.PluginTune:setPackageName(packageName);   Sets the package name (bundle identifier).   sdkbox.PluginTune:setShouldAutoDetectJailbroken(autoDetect);   Specifies if the sdk should auto detect if the iOS device is jailbroken.   sdkbox.PluginTune:setShouldAutoGenerateAppleVendorIdentifier(autoGenerate);   Specifies if the sdk should pull the Apple Vendor Identifier from the device. Note that setting to false will clear any previously set value for the property.   sdkbox.PluginTune:setSiteId(siteId);   Sets the site ID.   sdkbox.PluginTune:setTRUSTeId(tpid);   Set the TRUSTe Trusted Preference Identifier (TPID).   sdkbox.PluginTune:setUserEmail(userEmail);   Sets the user's email address.   sdkbox.PluginTune:setUserId(userId);   Sets the user ID.   sdkbox.PluginTune:setUserName(userName);   Sets the user's name.   sdkbox.PluginTune:setPhoneNumber(phoneNumber);   Sets the user's phone number.   sdkbox.PluginTune:setFacebookUserId(facebookUserId);   Set user's Facebook ID.   sdkbox.PluginTune:setTwitterUserId(twitterUserId);   Set user's Twitter ID.   sdkbox.PluginTune:setGoogleUserId(googleUserId);   Set user's Google ID.   sdkbox.PluginTune:setAge(long userAge);   Sets the user's age.   sdkbox.PluginTune:setGender(Gender userGender);   Sets the user's gender.   sdkbox.PluginTune:setLatitude(latitude, longitude);   Sets the user's location.   sdkbox.PluginTune:setLatitude(latitude, longitude, altitude);   Sets the user's location including altitude.   sdkbox.PluginTune:setAppAdTracking(enable);   Set app-level ad-tracking.   sdkbox.PluginTune:setPayingUser(isPayingUser);   Set whether the user is generating revenue for the app or not. If measureEvent is called with a non-zero revenue, this is automatically set to YES.   sdkbox.PluginTune:setPreloadData(jsonString);   Sets publisher information for attribution.   sdkbox.PluginTune:matId();   Get the MAT ID for this installation (mat_id).   sdkbox.PluginTune:openLogId();   Get the MAT log ID for the first app open (open_log_id).   sdkbox.PluginTune:isPayingUser();   Get whether the user is revenue-generating.   sdkbox.PluginTune:measureSession();   To be called when an app opens; typically in the AppDelegate::applicationWillEnterForeground() event.   sdkbox.PluginTune:measureEventName(eventName);   Record an event for an Event Name.   sdkbox.PluginTune:measureEventId(eventId);   Record an event by providing the equivalent Event ID defined on the MobileAppTracking dashboard.   sdkbox.PluginTune:measureEvent(jsonString);   Record an event with a MATEvent.   sdkbox.PluginTune:setUseCookieTracking(enable);   Sets whether or not to use cookie based tracking.   sdkbox.PluginTune:setRedirectUrl(redirectUrl);   Sets a url to be used with app-to-app tracking so that the sdk can open the download (redirect) url. This is used in conjunction with the setTracking:advertiserId:offerId:publisherId:redirect: method.   sdkbox.PluginTune:startAppToAppTracking(targetAppPackageName,\n                                 targetAppAdvertiserId,\n                                 targetAdvertiserOfferId,\n                                 targetAdvertiserPublisherId,\n                                 shouldRedirect);   Start an app-to-app tracking session on the MAT server.   sdkbox.PluginTune:applicationDidOpenURL(urlString, sourceApplication);   Record the URL and Source when an application is opened via a URL scheme.\nThis typically occurs during OAUTH or when an app exits and is returned\nto via a URL. The data will be sent to the HasOffers server when the next\nmeasureXXX method is called so that a Re-Engagement can be recorded.", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/vungle/v3-cpp/", 
            "text": "Vungle\n\n\nIntegration\n\n\nUse the following command to install the SDKBOX Vungle plugin, Make sure you setup SDKBOX installer correctly.\n\n\nsdkbox import vungle\n\n\n\n\nExtra steps\n\n\nModify \nCocos2dxActivity.java\n\n\n\n\n\n\nIf you're using cocos2d-x from source, assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java\n\n\n\n\n\n\nIf you're using the prebuilt cocos2d-x libraries assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n./src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nNote:\n When using Cocos2d-x from source, different versions have \nCocos2dxActivity.java\n in a different location. One way to find the location is to look in \nproj.android/project.properties\n. Example:\n\n\nandroid.library.reference.1=../../cocos2d-x/cocos/platform/android/java\n\n\n\n\nIn this case, \nCocos2dxActivity.java\n should be located at:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nModify \nCocos2dxActivity.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify \nCocos2dxActivity\n to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. The placement of this call is important. It must be done after the call to \nonLoadNativeLibraries();\n. Example:\n\n\n\n\nonLoadNativeLibraries();\nSDKBox.init(this);\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (release, optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n-dontwarn com.vungle.**\n-keep class com.vungle.** { public *; }\n-keep class javax.inject.*\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.\n\n\nConfiguration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nsdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the Vungle configuration, you need to replace \nvungle id\n  with your specific \nVungle\n Publisher account information.\nHere is an example adding \nVungle\n to iOS:\n\n\nVungle\n :\n{\n    \nid\n:\nvungle id\n,\n    \nads\n:{\n        \nvideo\n:{\n\n        },\n        \nreward\n:{\n            \nincentivized\n : true\n        }\n    }\n}\n\n\n\n\nAdding \nVungle\n to Android is a bit different as it supports \nsound\n and\n\nbackbutton\n settings. Here is an example adding \nVungle\n to Android:\n\n\nVungle\n :\n{\n    \nid\n:\nvungle id\n,\n    \nads\n:{\n        \nvideo\n:{\n            \nsound\n : true,\n            \nbackbutton\n : true\n        },\n        \nreward\n:{\n            \nsound\n : false,\n            \nbackbutton\n : false,\n            \nincentivized\n : true\n        }\n    }\n}\n\n\n\n\nUsage\n\n\nInitialize Vungle\n\n\nInitialize the plugin where appropriate in your code. We recommend to do this in the \nAppDelegate::applicationDidFinishLaunching()\n or \nAppController:didFinishLaunchingWithOptions()\n. Make sure to include the appropriate headers. Example:\n\n\n#include \nPluginVungle/PluginVungle.h\n\nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginVungle::init();\n}\n\n\n\n\nShowing Ads\n\n\nDisplay an ad where ever you want from your code, either \nvideo\n or \nreward\n:\n\n\nsdkbox::PluginVungle::show(\nvideo\n);\nsdkbox::PluginVungle::show(\nreward\n);\n\n\n\n\nCatch Vungle events (optional)\n\n\nThis allows you to catch the \nVungle\n events so that you can pause or resume\nyour game.\n\n\n\n\nAllow your class to extend \nsdkbox::VungleListener\n\n\n\n\n#include \nPluginVungle/PluginVungle.h\n\nclass MyClass : public sdkbox::VungleListener\n{\nprivate:\n  void onVungleCacheAvailable();\n  void onVungleStarted();\n  void onVungleFinished();\n  void onVungleOpenStore();\n}\n\n\n\n\n\n\nCreate a \nlistener\n that handles callbacks (optional):\n\n\n\n\nsdkbox::PluginVungle::setListener(this);\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nstatic void init();\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nstatic void show(const std::string\n name);\n\n\n\n\n\n\nshow ad with a provided name.\n\n\n\n\nstatic void setListener(VungleListener* listener);\n\n\n\n\n\n\nset provided listener.\n\n\n\n\nstatic void removeListener();\n\n\n\n\n\n\nremove listeners.\n\n\n\n\nstatic void setDebug(bool enable);\n\n\n\n\n\n\nenable or disable debug mode.\n\n\n\n\nstatic bool isCacheAvailable();\n\n\n\n\n\n\nis there a cached video available.\n\n\n\n\nstatic void setUserID(const std::string\n userID);\n\n\n\n\n\n\nsets the userID for rewarded ads.\n\n\n\n\nListeners\n\n\nvoid onVungleStarted();\n\n\n\n\n\n\nVungle is running and available.\n\n\n\n\nvoid onVungleFinished();\n\n\n\n\n\n\nVungle is not running/has stopped.\n\n\n\n\nvoid onVungleOpenStore();\n\n\n\n\n\n\nis the Vungle store available.\n\n\n\n\nvoid onVungleCacheAvailable();\n\n\n\n\n\n\nad cache is available.", 
            "title": "c++"
        }, 
        {
            "location": "/plugins/vungle/v3-cpp/#vungle", 
            "text": "", 
            "title": "Vungle"
        }, 
        {
            "location": "/plugins/vungle/v3-cpp/#integration", 
            "text": "Use the following command to install the SDKBOX Vungle plugin, Make sure you setup SDKBOX installer correctly.  sdkbox import vungle", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/vungle/v3-cpp/#extra-steps", 
            "text": "Modify  Cocos2dxActivity.java    If you're using cocos2d-x from source, assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java    If you're using the prebuilt cocos2d-x libraries assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ./src/org/cocos2dx/lib/Cocos2dxActivity.java    Note:  When using Cocos2d-x from source, different versions have  Cocos2dxActivity.java  in a different location. One way to find the location is to look in  proj.android/project.properties . Example:  android.library.reference.1=../../cocos2d-x/cocos/platform/android/java  In this case,  Cocos2dxActivity.java  should be located at:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java   Modify  Cocos2dxActivity.java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify  Cocos2dxActivity  to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . The placement of this call is important. It must be done after the call to  onLoadNativeLibraries(); . Example:   onLoadNativeLibraries();\nSDKBox.init(this);    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }  Proguard (release, optional)   Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   Edit the file you specified to include the following:   -dontwarn com.vungle.**\n-keep class com.vungle.** { public *; }\n-keep class javax.inject.*  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Extra steps"
        }, 
        {
            "location": "/plugins/vungle/v3-cpp/#configuration", 
            "text": "SDKBOX Installer will automatically inject a sample configuration to your  sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the Vungle configuration, you need to replace  vungle id   with your specific  Vungle  Publisher account information.\nHere is an example adding  Vungle  to iOS:  Vungle  :\n{\n     id : vungle id ,\n     ads :{\n         video :{\n\n        },\n         reward :{\n             incentivized  : true\n        }\n    }\n}  Adding  Vungle  to Android is a bit different as it supports  sound  and backbutton  settings. Here is an example adding  Vungle  to Android:  Vungle  :\n{\n     id : vungle id ,\n     ads :{\n         video :{\n             sound  : true,\n             backbutton  : true\n        },\n         reward :{\n             sound  : false,\n             backbutton  : false,\n             incentivized  : true\n        }\n    }\n}", 
            "title": "Configuration"
        }, 
        {
            "location": "/plugins/vungle/v3-cpp/#usage", 
            "text": "Initialize Vungle  Initialize the plugin where appropriate in your code. We recommend to do this in the  AppDelegate::applicationDidFinishLaunching()  or  AppController:didFinishLaunchingWithOptions() . Make sure to include the appropriate headers. Example:  #include  PluginVungle/PluginVungle.h \nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginVungle::init();\n}  Showing Ads  Display an ad where ever you want from your code, either  video  or  reward :  sdkbox::PluginVungle::show( video );\nsdkbox::PluginVungle::show( reward );  Catch Vungle events (optional)  This allows you to catch the  Vungle  events so that you can pause or resume\nyour game.   Allow your class to extend  sdkbox::VungleListener   #include  PluginVungle/PluginVungle.h \nclass MyClass : public sdkbox::VungleListener\n{\nprivate:\n  void onVungleCacheAvailable();\n  void onVungleStarted();\n  void onVungleFinished();\n  void onVungleOpenStore();\n}   Create a  listener  that handles callbacks (optional):   sdkbox::PluginVungle::setListener(this);", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/vungle/v3-cpp/#api-reference", 
            "text": "Methods  static void init();   initialize the plugin instance.   static void show(const std::string  name);   show ad with a provided name.   static void setListener(VungleListener* listener);   set provided listener.   static void removeListener();   remove listeners.   static void setDebug(bool enable);   enable or disable debug mode.   static bool isCacheAvailable();   is there a cached video available.   static void setUserID(const std::string  userID);   sets the userID for rewarded ads.   Listeners  void onVungleStarted();   Vungle is running and available.   void onVungleFinished();   Vungle is not running/has stopped.   void onVungleOpenStore();   is the Vungle store available.   void onVungleCacheAvailable();   ad cache is available.", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/vungle/v3-js/", 
            "text": "Vungle\n\n\nIntegration\n\n\nUse the following command to install the SDKBOX Vungle plugin, Make sure you setup SDKBOX installer correctly.\n\n\nsdkbox import vungle\n\n\n\n\nExtra steps\n\n\nModify \nCocos2dxActivity.java\n\n\n\n\n\n\nIf you're using cocos2d-x from source, assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java\n\n\n\n\n\n\nIf you're using the prebuilt cocos2d-x libraries assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n./src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nNote:\n When using Cocos2d-x from source, different versions have \nCocos2dxActivity.java\n in a different location. One way to find the location is to look in \nproj.android/project.properties\n. Example:\n\n\nandroid.library.reference.1=../../cocos2d-x/cocos/platform/android/java\n\n\n\n\nIn this case, \nCocos2dxActivity.java\n should be located at:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nModify \nCocos2dxActivity.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify \nCocos2dxActivity\n to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. The placement of this call is important. It must be done after the call to \nonLoadNativeLibraries();\n. Example:\n\n\n\n\nonLoadNativeLibraries();\nSDKBox.init(this);\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (release, optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n-dontwarn com.vungle.**\n-keep class com.vungle.** { public *; }\n-keep class javax.inject.*\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.\n\n\nConfiguration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nsdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the Vungle configuration, you need to replace \nvungle id\n  with your specific \nVungle\n Publisher account information.\nHere is an example adding \nVungle\n to iOS:\n\n\nVungle\n :\n{\n    \nid\n:\nvungle id\n,\n    \nads\n:{\n        \nvideo\n:{\n\n        },\n        \nreward\n:{\n            \nincentivized\n : true\n        }\n    }\n}\n\n\n\n\nAdding \nVungle\n to Android is a bit different as it supports \nsound\n and\n\nbackbutton\n settings. Here is an example adding \nVungle\n to Android:\n\n\nVungle\n :\n{\n    \nid\n:\nvungle id\n,\n    \nads\n:{\n        \nvideo\n:{\n            \nsound\n : true,\n            \nbackbutton\n : true\n        },\n        \nreward\n:{\n            \nsound\n : false,\n            \nbackbutton\n : false,\n            \nincentivized\n : true\n        }\n    }\n}\n\n\n\n\nUsage\n\n\nInitialize Vungle\n\n\n\n\nInitialize the plugin by calling \ninit()\n where appropriate in your code. We\nrecommend to do this in the \napp.js\n. Example:\n\n\n\n\nsdkbox.PluginVungle.init();\n\n\n\n\n\n\nmodify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n to include the following headers:\n\n\n\n\n#include \nPluginVungleJS.hpp\n\n#include \nPluginVungleJSHelper.h\n\n\n\n\n\n\n\nmodify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n make sure to call:\n\n\n\n\nsc-\naddRegisterCallback(register_all_PluginVungleJS);\nsc-\naddRegisterCallback(register_PluginVungelJs_helper);\n\n\n\n\nThis registers the Javascript callbacks.\n\n\nShowing Ads\n\n\nDisplay an ad where ever you want from your code, either \nvideo\n or \nreward\n:\n\n\nsdkbox.PluginVungle.show(\nvideo\n);\nsdkbox.PluginVungle.show(\nreward\n);\n\n\n\n\nCatch Vungle events (optional)\n\n\nThis allows you to catch the \nVungle\n events so that you can perform operations such as providing player rewards for watching the video.\n\n\n\n\nCreate a listener (demonstrated by logging events):\n\n\n\n\nsdkbox.PluginVungle.setListener({\n    onVungleCacheAvailable : function() { cc.log(\nonVungleCacheAvailable\n) },\n    onVungleStarted : function() { cc.log(\nonVungleStarted\n) },\n    onVungleFinished : function() { cc.log(\nonVungleFinished\n) },\n    onVungleAdViewed : function(isComplete) { cc.log(\nonVungleAdViewed\n + isComplete) }\n})\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginVungle.init();\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nsdkbox.PluginVungle.show(name);\n\n\n\n\n\n\nshow ad with a provided name.\n\n\n\n\nsdkbox.PluginVungle.setDebug(enable);\n\n\n\n\n\n\nenable or disable debug mode.\n\n\n\n\nsdkbox.PluginVungle.isCacheAvailable();\n\n\n\n\n\n\nis there a cached video available.\n\n\n\n\nsdkbox.PluginVungle.setUserID(userID);\n\n\n\n\n\n\nsets userID for rewarded ads.\n\n\n\n\nListeners\n\n\nonVungleCacheAvailable()\n\n\n\n\n\n\nad cache is available.\n\n\n\n\nonVungleStarted()\n\n\n\n\n\n\nVungle is running and available.\n\n\n\n\nonVungleFinished()\n\n\n\n\n\n\nVungle is not running/has stopped.\n\n\n\n\nonVungleAdViewed()\n\n\n\n\n\n\nVungle ad has been viewed.", 
            "title": "js"
        }, 
        {
            "location": "/plugins/vungle/v3-js/#vungle", 
            "text": "", 
            "title": "Vungle"
        }, 
        {
            "location": "/plugins/vungle/v3-js/#integration", 
            "text": "Use the following command to install the SDKBOX Vungle plugin, Make sure you setup SDKBOX installer correctly.  sdkbox import vungle", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/vungle/v3-js/#extra-steps", 
            "text": "Modify  Cocos2dxActivity.java    If you're using cocos2d-x from source, assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java    If you're using the prebuilt cocos2d-x libraries assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ./src/org/cocos2dx/lib/Cocos2dxActivity.java    Note:  When using Cocos2d-x from source, different versions have  Cocos2dxActivity.java  in a different location. One way to find the location is to look in  proj.android/project.properties . Example:  android.library.reference.1=../../cocos2d-x/cocos/platform/android/java  In this case,  Cocos2dxActivity.java  should be located at:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java   Modify  Cocos2dxActivity.java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify  Cocos2dxActivity  to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . The placement of this call is important. It must be done after the call to  onLoadNativeLibraries(); . Example:   onLoadNativeLibraries();\nSDKBox.init(this);    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }  Proguard (release, optional)   Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   Edit the file you specified to include the following:   -dontwarn com.vungle.**\n-keep class com.vungle.** { public *; }\n-keep class javax.inject.*  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Extra steps"
        }, 
        {
            "location": "/plugins/vungle/v3-js/#configuration", 
            "text": "SDKBOX Installer will automatically inject a sample configuration to your  sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the Vungle configuration, you need to replace  vungle id   with your specific  Vungle  Publisher account information.\nHere is an example adding  Vungle  to iOS:  Vungle  :\n{\n     id : vungle id ,\n     ads :{\n         video :{\n\n        },\n         reward :{\n             incentivized  : true\n        }\n    }\n}  Adding  Vungle  to Android is a bit different as it supports  sound  and backbutton  settings. Here is an example adding  Vungle  to Android:  Vungle  :\n{\n     id : vungle id ,\n     ads :{\n         video :{\n             sound  : true,\n             backbutton  : true\n        },\n         reward :{\n             sound  : false,\n             backbutton  : false,\n             incentivized  : true\n        }\n    }\n}", 
            "title": "Configuration"
        }, 
        {
            "location": "/plugins/vungle/v3-js/#usage", 
            "text": "Initialize Vungle   Initialize the plugin by calling  init()  where appropriate in your code. We\nrecommend to do this in the  app.js . Example:   sdkbox.PluginVungle.init();   modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  to include the following headers:   #include  PluginVungleJS.hpp \n#include  PluginVungleJSHelper.h    modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  make sure to call:   sc- addRegisterCallback(register_all_PluginVungleJS);\nsc- addRegisterCallback(register_PluginVungelJs_helper);  This registers the Javascript callbacks.  Showing Ads  Display an ad where ever you want from your code, either  video  or  reward :  sdkbox.PluginVungle.show( video );\nsdkbox.PluginVungle.show( reward );  Catch Vungle events (optional)  This allows you to catch the  Vungle  events so that you can perform operations such as providing player rewards for watching the video.   Create a listener (demonstrated by logging events):   sdkbox.PluginVungle.setListener({\n    onVungleCacheAvailable : function() { cc.log( onVungleCacheAvailable ) },\n    onVungleStarted : function() { cc.log( onVungleStarted ) },\n    onVungleFinished : function() { cc.log( onVungleFinished ) },\n    onVungleAdViewed : function(isComplete) { cc.log( onVungleAdViewed  + isComplete) }\n})", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/vungle/v3-js/#api-reference", 
            "text": "Methods  sdkbox.PluginVungle.init();   initialize the plugin instance.   sdkbox.PluginVungle.show(name);   show ad with a provided name.   sdkbox.PluginVungle.setDebug(enable);   enable or disable debug mode.   sdkbox.PluginVungle.isCacheAvailable();   is there a cached video available.   sdkbox.PluginVungle.setUserID(userID);   sets userID for rewarded ads.   Listeners  onVungleCacheAvailable()   ad cache is available.   onVungleStarted()   Vungle is running and available.   onVungleFinished()   Vungle is not running/has stopped.   onVungleAdViewed()   Vungle ad has been viewed.", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/vungle/v3-lua/", 
            "text": "Vungle\n\n\nIntegration\n\n\nUse the following command to install the SDKBOX Vungle plugin, Make sure you setup SDKBOX installer correctly.\n\n\nsdkbox import vungle\n\n\n\n\nExtra steps\n\n\nModify \nCocos2dxActivity.java\n\n\n\n\n\n\nIf you're using cocos2d-x from source, assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java\n\n\n\n\n\n\nIf you're using the prebuilt cocos2d-x libraries assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n./src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nNote:\n When using Cocos2d-x from source, different versions have \nCocos2dxActivity.java\n in a different location. One way to find the location is to look in \nproj.android/project.properties\n. Example:\n\n\nandroid.library.reference.1=../../cocos2d-x/cocos/platform/android/java\n\n\n\n\nIn this case, \nCocos2dxActivity.java\n should be located at:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nModify \nCocos2dxActivity.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify \nCocos2dxActivity\n to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. The placement of this call is important. It must be done after the call to \nonLoadNativeLibraries();\n. Example:\n\n\n\n\nonLoadNativeLibraries();\nSDKBox.init(this);\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (release, optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n-dontwarn com.vungle.**\n-keep class com.vungle.** { public *; }\n-keep class javax.inject.*\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.\n\n\nConfiguration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nsdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the Vungle configuration, you need to replace \nvungle id\n  with your specific \nVungle\n Publisher account information.\nHere is an example adding \nVungle\n to iOS:\n\n\nVungle\n :\n{\n    \nid\n:\nvungle id\n,\n    \nads\n:{\n        \nvideo\n:{\n\n        },\n        \nreward\n:{\n            \nincentivized\n : true\n        }\n    }\n}\n\n\n\n\nAdding \nVungle\n to Android is a bit different as it supports \nsound\n and\n\nbackbutton\n settings. Here is an example adding \nVungle\n to Android:\n\n\nVungle\n :\n{\n    \nid\n:\nvungle id\n,\n    \nads\n:{\n        \nvideo\n:{\n            \nsound\n : true,\n            \nbackbutton\n : true\n        },\n        \nreward\n:{\n            \nsound\n : false,\n            \nbackbutton\n : false,\n            \nincentivized\n : true\n        }\n    }\n}\n\n\n\n\nUsage\n\n\nModify Lua Code\n\n\nModify \n./frameworks/runtime-src/Classes/lua_module_register.h\n to include the necessary headers and calls to register \nVungle\n with Lua. Note this takes a parameter of \nlua_State*\n:\n\n\n#include \nPluginVungleLua.hpp\n\n#include \nPluginVungleLuaHelper.h\n\n\n\n\n\nstatic int lua_module_register(lua_State* L)\n{\n  register_all_PluginVungleLua(L);\n  register_PluginVungleLua_helper(L);\n}\n\n\n\n\nInitialize Vungle\n\n\n\n\nmodify your Lua code to \ninit()\n the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.\n\n\n\n\nsdkbox.PluginVungle:init();\n\n\n\n\nShowing Ads\n\n\nDisplay an ad where ever you want from your code, either \nvideo\n or \nreward\n:\n\n\nsdkbox.PluginVungle:show(\nvideo\n);\nsdkbox.PluginVungle:show(\nreward\n);\n\n\n\n\nCatch Vungle events (optional)\n\n\nThis allows you to catch the \nVungle\n events so that you can perform operations such as providing player rewards for watching the video.\n\n\n\n\nCreate a listener (demonstrated by logging events):\n\n\n\n\nsdkbox.PluginVungle:setListener(function(name, isComplete)\n    if \nonVungleCacheAvailable\n == name then\n        print(\nonVungleCacheAvailable\n)\n    elseif \nonVungleStarted\n ==  name then\n        print(\nonVungleStarted\n)\n    elseif \nonVungleFinished\n ==  name then\n        print(\nonVungleFinished\n)\n    elseif \nonVungleAdViewed\n ==  name then\n        print(\nonVungleAdViewed:\n, isComplete)\n    end\nend)\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginVungle:init();\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nsdkbox.PluginVungle:show(name);\n\n\n\n\n\n\nshow ad with a provided name.\n\n\n\n\nsdkbox.PluginVungle:setDebug(enable);\n\n\n\n\n\n\nenable or disable debug mode.\n\n\n\n\nsdkbox.PluginVungle:isCacheAvailable();\n\n\n\n\n\n\nis there a cached video available.\n\n\n\n\nsdkbox.PluginVungle:setUserID(userID);\n\n\n\n\n\n\nsets userID for rewarded ads.\n\n\n\n\nListeners\n\n\nonVungleCacheAvailable();\n\n\n\n\n\n\nthere is cache available of videos\n\n\n\n\nonVungleStarted();\n\n\n\n\n\n\nVungle has started and is ready to go.\n\n\n\n\nonVungleFinished();\n\n\n\n\n\n\nVungle is stopped and not running\n\n\n\n\nonVungleAdViewed();\n\n\n\n\n\n\nan ad was viewed.", 
            "title": "lua"
        }, 
        {
            "location": "/plugins/vungle/v3-lua/#vungle", 
            "text": "", 
            "title": "Vungle"
        }, 
        {
            "location": "/plugins/vungle/v3-lua/#integration", 
            "text": "Use the following command to install the SDKBOX Vungle plugin, Make sure you setup SDKBOX installer correctly.  sdkbox import vungle", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/vungle/v3-lua/#extra-steps", 
            "text": "Modify  Cocos2dxActivity.java    If you're using cocos2d-x from source, assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java    If you're using the prebuilt cocos2d-x libraries assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ./src/org/cocos2dx/lib/Cocos2dxActivity.java    Note:  When using Cocos2d-x from source, different versions have  Cocos2dxActivity.java  in a different location. One way to find the location is to look in  proj.android/project.properties . Example:  android.library.reference.1=../../cocos2d-x/cocos/platform/android/java  In this case,  Cocos2dxActivity.java  should be located at:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java   Modify  Cocos2dxActivity.java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify  Cocos2dxActivity  to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . The placement of this call is important. It must be done after the call to  onLoadNativeLibraries(); . Example:   onLoadNativeLibraries();\nSDKBox.init(this);    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }  Proguard (release, optional)   Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   Edit the file you specified to include the following:   -dontwarn com.vungle.**\n-keep class com.vungle.** { public *; }\n-keep class javax.inject.*  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Extra steps"
        }, 
        {
            "location": "/plugins/vungle/v3-lua/#configuration", 
            "text": "SDKBOX Installer will automatically inject a sample configuration to your  sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the Vungle configuration, you need to replace  vungle id   with your specific  Vungle  Publisher account information.\nHere is an example adding  Vungle  to iOS:  Vungle  :\n{\n     id : vungle id ,\n     ads :{\n         video :{\n\n        },\n         reward :{\n             incentivized  : true\n        }\n    }\n}  Adding  Vungle  to Android is a bit different as it supports  sound  and backbutton  settings. Here is an example adding  Vungle  to Android:  Vungle  :\n{\n     id : vungle id ,\n     ads :{\n         video :{\n             sound  : true,\n             backbutton  : true\n        },\n         reward :{\n             sound  : false,\n             backbutton  : false,\n             incentivized  : true\n        }\n    }\n}", 
            "title": "Configuration"
        }, 
        {
            "location": "/plugins/vungle/v3-lua/#usage", 
            "text": "Modify Lua Code  Modify  ./frameworks/runtime-src/Classes/lua_module_register.h  to include the necessary headers and calls to register  Vungle  with Lua. Note this takes a parameter of  lua_State* :  #include  PluginVungleLua.hpp \n#include  PluginVungleLuaHelper.h   static int lua_module_register(lua_State* L)\n{\n  register_all_PluginVungleLua(L);\n  register_PluginVungleLua_helper(L);\n}  Initialize Vungle   modify your Lua code to  init()  the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.   sdkbox.PluginVungle:init();  Showing Ads  Display an ad where ever you want from your code, either  video  or  reward :  sdkbox.PluginVungle:show( video );\nsdkbox.PluginVungle:show( reward );  Catch Vungle events (optional)  This allows you to catch the  Vungle  events so that you can perform operations such as providing player rewards for watching the video.   Create a listener (demonstrated by logging events):   sdkbox.PluginVungle:setListener(function(name, isComplete)\n    if  onVungleCacheAvailable  == name then\n        print( onVungleCacheAvailable )\n    elseif  onVungleStarted  ==  name then\n        print( onVungleStarted )\n    elseif  onVungleFinished  ==  name then\n        print( onVungleFinished )\n    elseif  onVungleAdViewed  ==  name then\n        print( onVungleAdViewed: , isComplete)\n    end\nend)", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/vungle/v3-lua/#api-reference", 
            "text": "Methods  sdkbox.PluginVungle:init();   initialize the plugin instance.   sdkbox.PluginVungle:show(name);   show ad with a provided name.   sdkbox.PluginVungle:setDebug(enable);   enable or disable debug mode.   sdkbox.PluginVungle:isCacheAvailable();   is there a cached video available.   sdkbox.PluginVungle:setUserID(userID);   sets userID for rewarded ads.   Listeners  onVungleCacheAvailable();   there is cache available of videos   onVungleStarted();   Vungle has started and is ready to go.   onVungleFinished();   Vungle is stopped and not running   onVungleAdViewed();   an ad was viewed.", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/vungle/v2-cpp/", 
            "text": "Vungle\n\n\nIntegration\n\n\nUse the following command to install the SDKBOX Vungle plugin, Make sure you setup SDKBOX installer correctly.\n\n\nsdkbox import vungle\n\n\n\n\nExtra steps\n\n\nModify \nYourGameName\n.java\n\n\n\n\nModify \nproj.android/src/\npackage identifier\n/\nYourGameName\n.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify the class to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. Example of what this might look like for you:\n\n\n\n\nprotected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (release, optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n-dontwarn com.vungle.**\n-keep class com.vungle.** { public *; }\n-keep class javax.inject.*\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.\n\n\nConfiguration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nsdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the Vungle configuration, you need to replace \nvungle id\n  with your specific \nVungle\n Publisher account information.\nHere is an example adding \nVungle\n to iOS:\n\n\nVungle\n :\n{\n    \nid\n:\nvungle id\n,\n    \nads\n:{\n        \nvideo\n:{\n\n        },\n        \nreward\n:{\n            \nincentivized\n : true\n        }\n    }\n}\n\n\n\n\nAdding \nVungle\n to Android is a bit different as it supports \nsound\n and\n\nbackbutton\n settings. Here is an example adding \nVungle\n to Android:\n\n\nVungle\n :\n{\n    \nid\n:\nvungle id\n,\n    \nads\n:{\n        \nvideo\n:{\n            \nsound\n : true,\n            \nbackbutton\n : true\n        },\n        \nreward\n:{\n            \nsound\n : false,\n            \nbackbutton\n : false,\n            \nincentivized\n : true\n        }\n    }\n}\n\n\n\n\nUsage\n\n\nInitialize Vungle\n\n\nInitialize the plugin where appropriate in your code. We recommend to do this in the \nAppDelegate::applicationDidFinishLaunching()\n or \nAppController:didFinishLaunchingWithOptions()\n. Make sure to include the appropriate headers. Example:\n\n\n#include \nPluginVungle/PluginVungle.h\n\nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginVungle::init();\n}\n\n\n\n\nShowing Ads\n\n\nDisplay an ad where ever you want from your code, either \nvideo\n or \nreward\n:\n\n\nsdkbox::PluginVungle::show(\nvideo\n);\nsdkbox::PluginVungle::show(\nreward\n);\n\n\n\n\nCatch Vungle events (optional)\n\n\nThis allows you to catch the \nVungle\n events so that you can pause or resume\nyour game.\n\n\n\n\nAllow your class to extend \nsdkbox::VungleListener\n\n\n\n\n#include \nPluginVungle/PluginVungle.h\n\nclass MyClass : public sdkbox::VungleListener\n{\nprivate:\n  void onVungleCacheAvailable();\n  void onVungleStarted();\n  void onVungleFinished();\n  void onVungleOpenStore();\n}\n\n\n\n\n\n\nCreate a \nlistener\n that handles callbacks (optional):\n\n\n\n\nsdkbox::PluginVungle::setListener(this);\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nstatic void init();\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nstatic void show(const std::string\n name);\n\n\n\n\n\n\nshow ad with a provided name.\n\n\n\n\nstatic void setListener(VungleListener* listener);\n\n\n\n\n\n\nset provided listener.\n\n\n\n\nstatic void removeListener();\n\n\n\n\n\n\nremove listeners.\n\n\n\n\nstatic void setDebug(bool enable);\n\n\n\n\n\n\nenable or disable debug mode.\n\n\n\n\nstatic bool isCacheAvailable();\n\n\n\n\n\n\nis there a cached video available.\n\n\n\n\nstatic void setUserID(const std::string\n userID);\n\n\n\n\n\n\nsets the userID for rewarded ads.\n\n\n\n\nListeners\n\n\nvoid onVungleStarted();\n\n\n\n\n\n\nVungle is running and available.\n\n\n\n\nvoid onVungleFinished();\n\n\n\n\n\n\nVungle is not running/has stopped.\n\n\n\n\nvoid onVungleOpenStore();\n\n\n\n\n\n\nis the Vungle store available.\n\n\n\n\nvoid onVungleCacheAvailable();\n\n\n\n\n\n\nad cache is available.", 
            "title": "c++"
        }, 
        {
            "location": "/plugins/vungle/v2-cpp/#vungle", 
            "text": "", 
            "title": "Vungle"
        }, 
        {
            "location": "/plugins/vungle/v2-cpp/#integration", 
            "text": "Use the following command to install the SDKBOX Vungle plugin, Make sure you setup SDKBOX installer correctly.  sdkbox import vungle", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/vungle/v2-cpp/#extra-steps", 
            "text": "Modify  YourGameName .java   Modify  proj.android/src/ package identifier / YourGameName .java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify the class to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . Example of what this might look like for you:   protected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }  Proguard (release, optional)   Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   Edit the file you specified to include the following:   -dontwarn com.vungle.**\n-keep class com.vungle.** { public *; }\n-keep class javax.inject.*  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Extra steps"
        }, 
        {
            "location": "/plugins/vungle/v2-cpp/#configuration", 
            "text": "SDKBOX Installer will automatically inject a sample configuration to your  sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the Vungle configuration, you need to replace  vungle id   with your specific  Vungle  Publisher account information.\nHere is an example adding  Vungle  to iOS:  Vungle  :\n{\n     id : vungle id ,\n     ads :{\n         video :{\n\n        },\n         reward :{\n             incentivized  : true\n        }\n    }\n}  Adding  Vungle  to Android is a bit different as it supports  sound  and backbutton  settings. Here is an example adding  Vungle  to Android:  Vungle  :\n{\n     id : vungle id ,\n     ads :{\n         video :{\n             sound  : true,\n             backbutton  : true\n        },\n         reward :{\n             sound  : false,\n             backbutton  : false,\n             incentivized  : true\n        }\n    }\n}", 
            "title": "Configuration"
        }, 
        {
            "location": "/plugins/vungle/v2-cpp/#usage", 
            "text": "Initialize Vungle  Initialize the plugin where appropriate in your code. We recommend to do this in the  AppDelegate::applicationDidFinishLaunching()  or  AppController:didFinishLaunchingWithOptions() . Make sure to include the appropriate headers. Example:  #include  PluginVungle/PluginVungle.h \nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginVungle::init();\n}  Showing Ads  Display an ad where ever you want from your code, either  video  or  reward :  sdkbox::PluginVungle::show( video );\nsdkbox::PluginVungle::show( reward );  Catch Vungle events (optional)  This allows you to catch the  Vungle  events so that you can pause or resume\nyour game.   Allow your class to extend  sdkbox::VungleListener   #include  PluginVungle/PluginVungle.h \nclass MyClass : public sdkbox::VungleListener\n{\nprivate:\n  void onVungleCacheAvailable();\n  void onVungleStarted();\n  void onVungleFinished();\n  void onVungleOpenStore();\n}   Create a  listener  that handles callbacks (optional):   sdkbox::PluginVungle::setListener(this);", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/vungle/v2-cpp/#api-reference", 
            "text": "Methods  static void init();   initialize the plugin instance.   static void show(const std::string  name);   show ad with a provided name.   static void setListener(VungleListener* listener);   set provided listener.   static void removeListener();   remove listeners.   static void setDebug(bool enable);   enable or disable debug mode.   static bool isCacheAvailable();   is there a cached video available.   static void setUserID(const std::string  userID);   sets the userID for rewarded ads.   Listeners  void onVungleStarted();   Vungle is running and available.   void onVungleFinished();   Vungle is not running/has stopped.   void onVungleOpenStore();   is the Vungle store available.   void onVungleCacheAvailable();   ad cache is available.", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/vungle/v2-js/", 
            "text": "Vungle\n\n\nIntegration\n\n\nUse the following command to install the SDKBOX Vungle plugin, Make sure you setup SDKBOX installer correctly.\n\n\nsdkbox import vungle\n\n\n\n\nExtra steps\n\n\nModify \nYourGameName\n.java\n\n\n\n\nModify \nproj.android/src/\npackage identifier\n/\nYourGameName\n.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify the class to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. Example of what this might look like for you:\n\n\n\n\nprotected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (release, optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n-dontwarn com.vungle.**\n-keep class com.vungle.** { public *; }\n-keep class javax.inject.*\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.\n\n\nConfiguration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nsdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the Vungle configuration, you need to replace \nvungle id\n  with your specific \nVungle\n Publisher account information.\nHere is an example adding \nVungle\n to iOS:\n\n\nVungle\n :\n{\n    \nid\n:\nvungle id\n,\n    \nads\n:{\n        \nvideo\n:{\n\n        },\n        \nreward\n:{\n            \nincentivized\n : true\n        }\n    }\n}\n\n\n\n\nAdding \nVungle\n to Android is a bit different as it supports \nsound\n and\n\nbackbutton\n settings. Here is an example adding \nVungle\n to Android:\n\n\nVungle\n :\n{\n    \nid\n:\nvungle id\n,\n    \nads\n:{\n        \nvideo\n:{\n            \nsound\n : true,\n            \nbackbutton\n : true\n        },\n        \nreward\n:{\n            \nsound\n : false,\n            \nbackbutton\n : false,\n            \nincentivized\n : true\n        }\n    }\n}\n\n\n\n\nUsage\n\n\nInitialize Vungle\n\n\n\n\nInitialize the plugin by calling \ninit()\n where appropriate in your code. We\nrecommend to do this in the \napp.js\n. Example:\n\n\n\n\nsdkbox.PluginVungle.init();\n\n\n\n\n\n\nmodify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n to include the following headers:\n\n\n\n\n#include \nPluginVungleJS.hpp\n\n#include \nPluginVungleJSHelper.h\n\n\n\n\n\n\n\nmodify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n make sure to call:\n\n\n\n\nsc-\naddRegisterCallback(register_all_PluginVungleJS);\nsc-\naddRegisterCallback(register_PluginVungelJs_helper);\n\n\n\n\nThis registers the Javascript callbacks.\n\n\nShowing Ads\n\n\nDisplay an ad where ever you want from your code, either \nvideo\n or \nreward\n:\n\n\nsdkbox.PluginVungle.show(\nvideo\n);\nsdkbox.PluginVungle.show(\nreward\n);\n\n\n\n\nCatch Vungle events (optional)\n\n\nThis allows you to catch the \nVungle\n events so that you can perform operations such as providing player rewards for watching the video.\n\n\n\n\nCreate a listener (demonstrated by logging events):\n\n\n\n\nsdkbox.PluginVungle.setListener({\n    onVungleCacheAvailable : function() { cc.log(\nonVungleCacheAvailable\n) },\n    onVungleStarted : function() { cc.log(\nonVungleStarted\n) },\n    onVungleFinished : function() { cc.log(\nonVungleFinished\n) },\n    onVungleAdViewed : function(isComplete) { cc.log(\nonVungleAdViewed\n + isComplete) }\n})\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginVungle.init();\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nsdkbox.PluginVungle.show(name);\n\n\n\n\n\n\nshow ad with a provided name.\n\n\n\n\nsdkbox.PluginVungle.setDebug(enable);\n\n\n\n\n\n\nenable or disable debug mode.\n\n\n\n\nsdkbox.PluginVungle.isCacheAvailable();\n\n\n\n\n\n\nis there a cached video available.\n\n\n\n\nsdkbox.PluginVungle.setUserID(userID);\n\n\n\n\n\n\nsets userID for rewarded ads.\n\n\n\n\nListeners\n\n\nonVungleCacheAvailable()\n\n\n\n\n\n\nad cache is available.\n\n\n\n\nonVungleStarted()\n\n\n\n\n\n\nVungle is running and available.\n\n\n\n\nonVungleFinished()\n\n\n\n\n\n\nVungle is not running/has stopped.\n\n\n\n\nonVungleAdViewed()\n\n\n\n\n\n\nVungle ad has been viewed.", 
            "title": "js"
        }, 
        {
            "location": "/plugins/vungle/v2-js/#vungle", 
            "text": "", 
            "title": "Vungle"
        }, 
        {
            "location": "/plugins/vungle/v2-js/#integration", 
            "text": "Use the following command to install the SDKBOX Vungle plugin, Make sure you setup SDKBOX installer correctly.  sdkbox import vungle", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/vungle/v2-js/#extra-steps", 
            "text": "Modify  YourGameName .java   Modify  proj.android/src/ package identifier / YourGameName .java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify the class to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . Example of what this might look like for you:   protected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }  Proguard (release, optional)   Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   Edit the file you specified to include the following:   -dontwarn com.vungle.**\n-keep class com.vungle.** { public *; }\n-keep class javax.inject.*  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Extra steps"
        }, 
        {
            "location": "/plugins/vungle/v2-js/#configuration", 
            "text": "SDKBOX Installer will automatically inject a sample configuration to your  sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the Vungle configuration, you need to replace  vungle id   with your specific  Vungle  Publisher account information.\nHere is an example adding  Vungle  to iOS:  Vungle  :\n{\n     id : vungle id ,\n     ads :{\n         video :{\n\n        },\n         reward :{\n             incentivized  : true\n        }\n    }\n}  Adding  Vungle  to Android is a bit different as it supports  sound  and backbutton  settings. Here is an example adding  Vungle  to Android:  Vungle  :\n{\n     id : vungle id ,\n     ads :{\n         video :{\n             sound  : true,\n             backbutton  : true\n        },\n         reward :{\n             sound  : false,\n             backbutton  : false,\n             incentivized  : true\n        }\n    }\n}", 
            "title": "Configuration"
        }, 
        {
            "location": "/plugins/vungle/v2-js/#usage", 
            "text": "Initialize Vungle   Initialize the plugin by calling  init()  where appropriate in your code. We\nrecommend to do this in the  app.js . Example:   sdkbox.PluginVungle.init();   modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  to include the following headers:   #include  PluginVungleJS.hpp \n#include  PluginVungleJSHelper.h    modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  make sure to call:   sc- addRegisterCallback(register_all_PluginVungleJS);\nsc- addRegisterCallback(register_PluginVungelJs_helper);  This registers the Javascript callbacks.  Showing Ads  Display an ad where ever you want from your code, either  video  or  reward :  sdkbox.PluginVungle.show( video );\nsdkbox.PluginVungle.show( reward );  Catch Vungle events (optional)  This allows you to catch the  Vungle  events so that you can perform operations such as providing player rewards for watching the video.   Create a listener (demonstrated by logging events):   sdkbox.PluginVungle.setListener({\n    onVungleCacheAvailable : function() { cc.log( onVungleCacheAvailable ) },\n    onVungleStarted : function() { cc.log( onVungleStarted ) },\n    onVungleFinished : function() { cc.log( onVungleFinished ) },\n    onVungleAdViewed : function(isComplete) { cc.log( onVungleAdViewed  + isComplete) }\n})", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/vungle/v2-js/#api-reference", 
            "text": "Methods  sdkbox.PluginVungle.init();   initialize the plugin instance.   sdkbox.PluginVungle.show(name);   show ad with a provided name.   sdkbox.PluginVungle.setDebug(enable);   enable or disable debug mode.   sdkbox.PluginVungle.isCacheAvailable();   is there a cached video available.   sdkbox.PluginVungle.setUserID(userID);   sets userID for rewarded ads.   Listeners  onVungleCacheAvailable()   ad cache is available.   onVungleStarted()   Vungle is running and available.   onVungleFinished()   Vungle is not running/has stopped.   onVungleAdViewed()   Vungle ad has been viewed.", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/vungle/v2-lua/", 
            "text": "Vungle\n\n\nIntegration\n\n\nUse the following command to install the SDKBOX Vungle plugin, Make sure you setup SDKBOX installer correctly.\n\n\nsdkbox import vungle\n\n\n\n\nExtra steps\n\n\nModify \nYourGameName\n.java\n\n\n\n\nModify \nproj.android/src/\npackage identifier\n/\nYourGameName\n.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify the class to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. Example of what this might look like for you:\n\n\n\n\nprotected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (release, optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n-dontwarn com.vungle.**\n-keep class com.vungle.** { public *; }\n-keep class javax.inject.*\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.\n\n\nConfiguration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nsdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the Vungle configuration, you need to replace \nvungle id\n  with your specific \nVungle\n Publisher account information.\nHere is an example adding \nVungle\n to iOS:\n\n\nVungle\n :\n{\n    \nid\n:\nvungle id\n,\n    \nads\n:{\n        \nvideo\n:{\n\n        },\n        \nreward\n:{\n            \nincentivized\n : true\n        }\n    }\n}\n\n\n\n\nAdding \nVungle\n to Android is a bit different as it supports \nsound\n and\n\nbackbutton\n settings. Here is an example adding \nVungle\n to Android:\n\n\nVungle\n :\n{\n    \nid\n:\nvungle id\n,\n    \nads\n:{\n        \nvideo\n:{\n            \nsound\n : true,\n            \nbackbutton\n : true\n        },\n        \nreward\n:{\n            \nsound\n : false,\n            \nbackbutton\n : false,\n            \nincentivized\n : true\n        }\n    }\n}\n\n\n\n\nUsage\n\n\nModify \nAppDelegate.cpp\n\n\n\n\nModify \nAppDelegate.cpp\n to include the following headers:\n\n\n\n\n#include \nPluginVungleLua.hpp\n\n#include \nPluginVungleLuaHelper.h\n\n\n\n\n\n\n\nSecond, We need to register the plugin with Lua. This is done by making a call to \nregister_all_PluginVungleLua(\nlua_State*\n);\n. It is important to note that this call must be made after \nlua_State *tolua_s = pStack-\ngetLuaState();\n and before \ntolua_extensions_ccb_open(tolua_s);\n. Here is an example of what this might look like for you:\n\n\n\n\nlua_State* tolua_s = pStack-\ngetLuaState();\nregister_all_PluginVungleLua(tolua_s);\nregister_all_PluginVungleLua_helper(tolua_s);\ntolua_extensions_ccb_open(tolua_s);\n\n\n\n\nInitialize Vungle\n\n\nModify your Lua code to \ninit()\n the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.\n\n\nsdkbox.PluginVungle:init();\n\n\n\n\nShowing Ads\n\n\nDisplay an ad where ever you want from your code, either \nvideo\n or \nreward\n:\n\n\nsdkbox.PluginVungle:show(\nvideo\n);\nsdkbox.PluginVungle:show(\nreward\n);\n\n\n\n\nCatch Vungle events (optional)\n\n\nThis allows you to catch the \nVungle\n events so that you can perform operations such as providing player rewards for watching the video.\n\n\n\n\nCreate a listener (demonstrated by logging events):\n\n\n\n\nsdkbox.PluginVungle:setListener(function(name, isComplete)\n    if \nonVungleCacheAvailable\n == name then\n        print(\nonVungleCacheAvailable\n)\n    elseif \nonVungleStarted\n ==  name then\n        print(\nonVungleStarted\n)\n    elseif \nonVungleFinished\n ==  name then\n        print(\nonVungleFinished\n)\n    elseif \nonVungleAdViewed\n ==  name then\n        print(\nonVungleAdViewed:\n, isComplete)\n    end\nend)\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginVungle:init();\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nsdkbox.PluginVungle:show(name);\n\n\n\n\n\n\nshow ad with a provided name.\n\n\n\n\nsdkbox.PluginVungle:setDebug(enable);\n\n\n\n\n\n\nenable or disable debug mode.\n\n\n\n\nsdkbox.PluginVungle:isCacheAvailable();\n\n\n\n\n\n\nis there a cached video available.\n\n\n\n\nsdkbox.PluginVungle:setUserID(userID);\n\n\n\n\n\n\nsets userID for rewarded ads.\n\n\n\n\nListeners\n\n\nonVungleCacheAvailable();\n\n\n\n\n\n\nthere is cache available of videos\n\n\n\n\nonVungleStarted();\n\n\n\n\n\n\nVungle has started and is ready to go.\n\n\n\n\nonVungleFinished();\n\n\n\n\n\n\nVungle is stopped and not running\n\n\n\n\nonVungleAdViewed();\n\n\n\n\n\n\nan ad was viewed.", 
            "title": "lua"
        }, 
        {
            "location": "/plugins/vungle/v2-lua/#vungle", 
            "text": "", 
            "title": "Vungle"
        }, 
        {
            "location": "/plugins/vungle/v2-lua/#integration", 
            "text": "Use the following command to install the SDKBOX Vungle plugin, Make sure you setup SDKBOX installer correctly.  sdkbox import vungle", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/vungle/v2-lua/#extra-steps", 
            "text": "Modify  YourGameName .java   Modify  proj.android/src/ package identifier / YourGameName .java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify the class to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . Example of what this might look like for you:   protected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }  Proguard (release, optional)   Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   Edit the file you specified to include the following:   -dontwarn com.vungle.**\n-keep class com.vungle.** { public *; }\n-keep class javax.inject.*  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Extra steps"
        }, 
        {
            "location": "/plugins/vungle/v2-lua/#configuration", 
            "text": "SDKBOX Installer will automatically inject a sample configuration to your  sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the Vungle configuration, you need to replace  vungle id   with your specific  Vungle  Publisher account information.\nHere is an example adding  Vungle  to iOS:  Vungle  :\n{\n     id : vungle id ,\n     ads :{\n         video :{\n\n        },\n         reward :{\n             incentivized  : true\n        }\n    }\n}  Adding  Vungle  to Android is a bit different as it supports  sound  and backbutton  settings. Here is an example adding  Vungle  to Android:  Vungle  :\n{\n     id : vungle id ,\n     ads :{\n         video :{\n             sound  : true,\n             backbutton  : true\n        },\n         reward :{\n             sound  : false,\n             backbutton  : false,\n             incentivized  : true\n        }\n    }\n}", 
            "title": "Configuration"
        }, 
        {
            "location": "/plugins/vungle/v2-lua/#usage", 
            "text": "Modify  AppDelegate.cpp   Modify  AppDelegate.cpp  to include the following headers:   #include  PluginVungleLua.hpp \n#include  PluginVungleLuaHelper.h    Second, We need to register the plugin with Lua. This is done by making a call to  register_all_PluginVungleLua( lua_State* ); . It is important to note that this call must be made after  lua_State *tolua_s = pStack- getLuaState();  and before  tolua_extensions_ccb_open(tolua_s); . Here is an example of what this might look like for you:   lua_State* tolua_s = pStack- getLuaState();\nregister_all_PluginVungleLua(tolua_s);\nregister_all_PluginVungleLua_helper(tolua_s);\ntolua_extensions_ccb_open(tolua_s);  Initialize Vungle  Modify your Lua code to  init()  the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.  sdkbox.PluginVungle:init();  Showing Ads  Display an ad where ever you want from your code, either  video  or  reward :  sdkbox.PluginVungle:show( video );\nsdkbox.PluginVungle:show( reward );  Catch Vungle events (optional)  This allows you to catch the  Vungle  events so that you can perform operations such as providing player rewards for watching the video.   Create a listener (demonstrated by logging events):   sdkbox.PluginVungle:setListener(function(name, isComplete)\n    if  onVungleCacheAvailable  == name then\n        print( onVungleCacheAvailable )\n    elseif  onVungleStarted  ==  name then\n        print( onVungleStarted )\n    elseif  onVungleFinished  ==  name then\n        print( onVungleFinished )\n    elseif  onVungleAdViewed  ==  name then\n        print( onVungleAdViewed: , isComplete)\n    end\nend)", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/vungle/v2-lua/#api-reference", 
            "text": "Methods  sdkbox.PluginVungle:init();   initialize the plugin instance.   sdkbox.PluginVungle:show(name);   show ad with a provided name.   sdkbox.PluginVungle:setDebug(enable);   enable or disable debug mode.   sdkbox.PluginVungle:isCacheAvailable();   is there a cached video available.   sdkbox.PluginVungle:setUserID(userID);   sets userID for rewarded ads.   Listeners  onVungleCacheAvailable();   there is cache available of videos   onVungleStarted();   Vungle has started and is ready to go.   onVungleFinished();   Vungle is stopped and not running   onVungleAdViewed();   an ad was viewed.", 
            "title": "API Reference"
        }, 
        {
            "location": "/release-note/", 
            "text": "Release Notes\n\n\n\n\n1.1.6\n\n\nSDKBOX now supports install plugin online\nSDKBOX online documentation\nUpgrade Vugnle SDK to new version\n * iOS: 3.1.2\n * Android: 3.3.1\n\n\n1.1.5\n\n\nFix SDKBOX conflicts with Plugin-x\n\n\n1.1.4\n\n\nFix SDKBOX IAP plugin return invalid pricing data", 
            "title": "About"
        }, 
        {
            "location": "/release-note/#release-notes", 
            "text": "", 
            "title": "Release Notes"
        }, 
        {
            "location": "/release-note/#116", 
            "text": "SDKBOX now supports install plugin online\nSDKBOX online documentation\nUpgrade Vugnle SDK to new version\n * iOS: 3.1.2\n * Android: 3.3.1", 
            "title": "1.1.6"
        }, 
        {
            "location": "/release-note/#115", 
            "text": "Fix SDKBOX conflicts with Plugin-x", 
            "title": "1.1.5"
        }, 
        {
            "location": "/release-note/#114", 
            "text": "Fix SDKBOX IAP plugin return invalid pricing data", 
            "title": "1.1.4"
        }
    ]
}